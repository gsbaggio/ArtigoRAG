def solve(s):
    n = len(s)
    # Count original "ab" and "ba" occurrences
    ab_count = 0
    ba_count = 0
    
    for i in range(n - 1):
        if s[i:i+2] == "ab":
            ab_count += 1
        elif s[i:i+2] == "ba":
            ba_count += 1
    
    # If already equal, return original string
    if ab_count == ba_count:
        return s
    
    # Try each position for change
    best_diff = float('inf')
    best_pos = -1
    best_char = ''
    
    for i in range(n):
        # Calculate impact of changing this character
        old_char = s[i]
        new_char = 'a' if old_char == 'b' else 'b'
        
        # Check impact on "ab" and "ba" counts
        delta_ab = 0
        delta_ba = 0
        
        # Character before position i
        if i > 0:
            if s[i-1:i+1] == "ab": delta_ab -= 1
            if s[i-1:i+1] == "ba": delta_ba -= 1
            if s[i-1] + new_char == "ab": delta_ab += 1
            if s[i-1] + new_char == "ba": delta_ba += 1
        
        # Character after position i
        if i < n - 1:
            if s[i:i+2] == "ab": delta_ab -= 1
            if s[i:i+2] == "ba": delta_ba -= 1
            if new_char + s[i+1] == "ab": delta_ab += 1
            if new_char + s[i+1] == "ba": delta_ba += 1
        
        new_ab = ab_count + delta_ab
        new_ba = ba_count + delta_ba
        
        diff = abs(new_ab - new_ba)
        if diff < best_diff:
            best_diff = diff
            best_pos = i
            best_char = new_char
            
            # If we can make them equal, stop searching
            if diff == 0:
                break
    
    # Apply the best change if found
    if best_pos != -1:
        s_list = list(s)
        s_list[best_pos] = best_char
        return ''.join(s_list)
    
    return s  # Shouldn't reach here based on problem guarantees

def main():
    t = int(input())
    for _ in range(t):
        s = input().strip()
        result = solve(s)
        print(result)

if __name__ == "__main__":
    main()