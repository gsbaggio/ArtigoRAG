def solve(s):
    n = len(s)
    
    # Count original AB and BA occurrences
    ab_count = 0
    ba_count = 0
    for i in range(n-1):
        if s[i] == 'a' and s[i+1] == 'b':
            ab_count += 1
        elif s[i] == 'b' and s[i+1] == 'a':
            ba_count += 1
    
    # If already equal, no changes needed
    if ab_count == ba_count:
        return s
    
    # Try to change each character and see what produces the minimal difference
    best_diff = float('inf')
    best_pos = -1
    best_char = ''
    
    for i in range(n):
        # Try changing to 'a'
        if s[i] != 'a':
            new_ab = ab_count
            new_ba = ba_count
            
            # Effect on position i-1, i
            if i > 0:
                if s[i-1] == 'a' and s[i] == 'b':
                    new_ab -= 1  # Removing an 'ab'
                elif s[i-1] == 'b' and s[i] == 'b':
                    new_ba += 1  # Adding a 'ba'
            
            # Effect on position i, i+1
            if i < n-1:
                if s[i] == 'b' and s[i+1] == 'a':
                    new_ba -= 1  # Removing a 'ba'
                elif s[i] == 'b' and s[i+1] == 'b':
                    new_ab += 1  # Adding an 'ab'
            
            if abs(new_ab - new_ba) < best_diff:
                best_diff = abs(new_ab - new_ba)
                best_pos = i
                best_char = 'a'
                
                if new_ab == new_ba:  # Found perfect solution, no need to keep searching
                    break
        
        # Try changing to 'b'
        if s[i] != 'b':
            new_ab = ab_count
            new_ba = ba_count
            
            # Effect on position i-1, i
            if i > 0:
                if s[i-1] == 'a' and s[i] == 'a':
                    new_ab += 1  # Adding an 'ab'
                elif s[i-1] == 'b' and s[i] == 'a':
                    new_ba -= 1  # Removing a 'ba'
            
            # Effect on position i, i+1
            if i < n-1:
                if s[i] == 'a' and s[i+1] == 'b':
                    new_ab -= 1  # Removing an 'ab'
                elif s[i] == 'a' and s[i+1] == 'a':
                    new_ba += 1  # Adding a 'ba'
            
            if abs(new_ab - new_ba) < best_diff:
                best_diff = abs(new_ab - new_ba)
                best_pos = i
                best_char = 'b'
                
                if new_ab == new_ba:  # Found perfect solution, no need to keep searching
                    break
    
    # Make the best change
    if best_pos != -1:
        s_list = list(s)
        s_list[best_pos] = best_char
        return ''.join(s_list)
    
    return s

def main():
    t = int(input())
    for _ in range(t):
        s = input()
        result = solve(s)
        print(result)

if __name__ == "__main__":
    main()