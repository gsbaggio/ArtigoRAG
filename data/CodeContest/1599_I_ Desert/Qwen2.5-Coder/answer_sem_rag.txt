class DSU:
    def __init__(self, n):
        self.parent = list(range(n))
        self.rank = [0] * n
        self.cycle_count = [0] * n
    
    def find(self, u):
        if self.parent[u] != u:
            self.parent[u] = self.find(self.parent[u])
        return self.parent[u]
    
    def union(self, u, v):
        root_u = self.find(u)
        root_v = self.find(v)
        if root_u == root_v:
            self.cycle_count[root_u] += 1
            return False
        if self.rank[root_u] > self.rank[root_v]:
            self.parent[root_v] = root_u
        elif self.rank[root_u] < self.rank[root_v]:
            self.parent[root_u] = root_v
        else:
            self.parent[root_v] = root_u
            self.rank[root_u] += 1
        return True
    
    def disconnect(self, u, v):
        root_u = self.find(u)
        root_v = self.find(v)
        if root_u == root_v:
            self.cycle_count[root_u] -= 1
            if self.cycle_count[root_u] == 0:
                self.parent[root_u] = root_u
                self.rank[root_u] = 0
            return True
        return False

def count_desert_subgraphs(N, M, edges):
    dsu = DSU(N + 1)
    left = 0
    result = 0
    
    for right in range(M):
        u, v = edges[right]
        if not dsu.union(u, v):
            # If adding this edge forms a cycle, move the left pointer
            while dsu.cycle_count[dsu.find(u)] > 1 or dsu.cycle_count[dsu.find(v)] > 1:
                dsu.disconnect(edges[left][0], edges[left][1])
                left += 1
        
        # All subarrays starting from 'left' to 'right' are valid
        result += right - left + 1
    
    return result

# Read input
import sys
input = sys.stdin.read().split()
N = int(input[0])
M = int(input[1])
edges = [(int(input[2 + 2 * i]), int(input[3 + 2 * i])) for i in range(M)]

# Output the result
print(count_desert_subgraphs(N, M, edges))