class DSU:
    def __init__(self, n):
        self.parent = list(range(n))
        self.rank = [0] * n

    def find(self, x):
        if self.parent[x] != x:
            self.parent[x] = self.find(self.parent[x])
        return self.parent[x]

    def union(self, x, y):
        root_x, root_y = self.find(x), self.find(y)
        if root_x == root_y:
            return False
        if self.rank[root_x] < self.rank[root_y]:
            self.parent[root_x] = root_y
        elif self.rank[root_x] > self.rank[root_y]:
            self.parent[root_y] = root_x
        else:
            self.parent[root_y] = root_x
            self.rank[root_x] += 1
        return True

def count_desert_pairs(N, M, edges):
    dsu = DSU(N)
    result = 0
    components = N

    for i in range(M):
        dsu = DSU(N)
        count = 0

        for u, v in edges[i:]:
            if dsu.union(u, v):
                count += 1
                components -= 1

            if components == 1:
                result += count

    return result

# Input processing
N, M = map(int, input().split())
edges = [tuple(map(int, input().split())) for _ in range(M)]

# Output
print(count_desert_pairs(N, M, edges))