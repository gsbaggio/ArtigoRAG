def find(parent, x):
    if parent[x] == x:
        return x
    parent[x] = find(parent, parent[x])
    return parent[x]

def union(parent, rank, x, y):
    x_root = find(parent, x)
    y_root = find(parent, y)

    if rank[x_root] < rank[y_root]:
        parent[x_root] = y_root
    elif rank[x_root] > rank[y_root]:
        parent[y_root] = x_root
    else:
        parent[y_root] = x_root
        rank[x_root] += 1

def count_desert_pairs(n, m, edges):
    parent = [i for i in range(n + 1)]
    rank = [0] * (n + 1)
    tree_edges = 0
    cactus_edges = 0
    result = 0

    for edge in edges:
        u, v = edge
        if find(parent, u) != find(parent, v):
            union(parent, rank, u, v)
            tree_edges += 1
        else:
            cactus_edges += 1
        result += tree_edges * cactus_edges

    return result

# Input parsing
n, m = map(int, input().split())
edges = [list(map(int, input().split())) for _ in range(m)]

# Calculate and print the result
result = count_desert_pairs(n, m, edges)
print(result)