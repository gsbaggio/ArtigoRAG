CURRENT QUESTION:
Polycarp likes squares and cubes of positive integers. Here is the beginning of the sequence of numbers he likes: 1, 4, 8, 9, ....

For a given number n, count the number of integers from 1 to n that Polycarp likes. In other words, find the number of such x that x is a square of a positive integer number or a cube of a positive integer number (or both a square and a cube simultaneously).

Input

The first line contains an integer t (1 ≤ t ≤ 20) — the number of test cases.

Then t lines contain the test cases, one per line. Each of the lines contains one integer n (1 ≤ n ≤ 10^9).

Output

For each test case, print the answer you are looking for — the number of integers from 1 to n that Polycarp likes.

Example

Input


6
10
1
25
1000000000
999999999
500000000


Output


4
1
6
32591
32590
23125

SIMILAR QUESTIONS:
Similar question 1 (Similarity score: 0.73):
Name: 1277_A. Happy Birthday, Polycarp!
Tags: ['implementation']
Description: Hooray! Polycarp turned n years old! The Technocup Team sincerely congratulates Polycarp!

Polycarp celebrated all of his n birthdays: from the 1-th to the n-th. At the moment, he is wondering: how many times he turned beautiful number of years?

According to Polycarp, a positive integer is beautiful if it consists of only one digit repeated one or more times. For example, the following numbers are beautiful: 1, 77, 777, 44 and 999999. The following numbers are not beautiful: 12, 11110, 6969 and 987654321.

Of course, Polycarpus uses the decimal numeral system (i.e. radix is 10).

Help Polycarpus to find the number of numbers from 1 to n (inclusive) that are beautiful.

Input

The first line contains an integer t (1 ≤ t ≤ 10^4) — the number of test cases in the input. Then t test cases follow.

Each test case consists of one line, which contains a positive integer n (1 ≤ n ≤ 10^9) — how many years Polycarp has turned.

Output

Print t integers — the answers to the given test cases in the order they are written in the test. Each answer is an integer: the number of beautiful years between 1 and n, inclusive.

Example

Input


6
18
1
9
100500
33
1000000000


Output


10
1
9
45
12
81

Note

In the first test case of the example beautiful years are 1, 2, 3, 4, 5, 6, 7, 8, 9 and 11.
Difficulty: 7
Solutions: for _ in range(int(input())):
  x = input()
  now = len(x)
  ans = (now-1) * 9
  ans += (int(x[0]))
  flag = 0
  for j in range(1,len(x)):
    if(x[j] > x[j-1]):
      break
    elif(x[j] < x[j-1]):
      flag = 1
      break
  ans -= flag
  print(ans)

Similar question 2 (Similarity score: 0.72):
Name: 1297_A. Likes Display
Tags: ['*special', 'implementation']
Description: Polycarp is working on the implementation of displaying likes on the Codehorses social network. The number of likes should be displayed in a format that will be easy to read by users. It was decided that for large numbers of likes the format should be like 123K (one hundred twenty-three thousand) or like 56M (fifty-six million).

The following displaying strategy has been approved:

  * the number will be displayed either as an integer number from 0 to 999, or as a positive integer number of thousands (from 1K to 999K), or as a positive integer number of millions (from 1M on), 
  * the specified exact number of likes n when displaying should be rounded to the nearest view from the case above (if rounding is ambiguous, it must be rounded up): for example, 1785 should be rounded to 2K instead of 1K, 4500000 should be rounded to 5M. 



Help Polycarp implement this part of the functionality: for a given non-negative integer number of likes n, print its view in the Codehorses interface.

Input

The first line contains an integer t (1 ≤ t ≤ 1000) — the number of test cases in the input. The following are descriptions of the t input test cases, one per line.

The description of each test case consists of a single line that contains a non-negative integer n (0 ≤ n ≤ 2⋅10^9) — the number of likes.

Output

Print t answers to the given test cases in the order from the input. Each printed value must have one of the following types:

  * either an integer from 0 to 999 which corresponds just to the number of likes, 
  * or a number of thousands from 1K to 999K, 
  * or a number of millions from 1M to 2000M. 



The answer is equal to a view which is the closest (by difference) to the given number n. If this rounding is ambiguous, then round answer up (to a greater value).

Example

Input


9
999
123
0
1782
31415926
1500
999999
35499710
2000000000


Output


999
123
0
2K
31M
2K
1M
35M
2000M

Note

Let's describe some test cases: 

  * 1782 can be displayed either as 1K or as 2K but 2K is the nearest view; 
  * 1500 have same difference with 1K and 2K so it should be rounded up; 
  * 999999 should be displayed as 1M since it's closer to it than to 999K. 
Difficulty: 7
Solutions: 


INSTRUCTIONS:
Solve the current question.
Provide:
1. A complete and efficient code solution, optimized for both time and space complexity.
2. A detailed explanation of the solution, including:
   - The intuition behind the approach;
   - Time and space complexity;
   - Important considerations about the algorithm.
3. Use the similar questions as references to improve the solution, but only if they are relevant.
4. Don't use any external libraries. Any language is accepted.