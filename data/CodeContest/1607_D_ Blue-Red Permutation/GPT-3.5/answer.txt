def can_transform_to_permutation(t, test_cases):
    results = []

    for test in test_cases:
        n = test[0]
        arr = test[1]
        colors = test[2]

        blues = {i: 0 for i in range(1, n + 1)}
        reds = {i: 0 for i in range(1, n + 1)}

        for i in range(n):
            if colors[i] == 'B':
                blues[arr[i]] += 1
            else:
                reds[arr[i]] += 1

        blue_count = sum(1 for count in blues.values() if count > 0)
        red_count = sum(1 for count in reds.values() if count > 0)

        if blue_count == sum(1 for i in range(1, n + 1) if blues[i] > 0) and \
           red_count == sum(1 for i in range(1, n + 1) if reds[i] > 0):
            results.append("YES")
        else:
            results.append("NO")

    return results

# Input parsing
t = int(input())
test_cases = []
for _ in range(t):
    n = int(input())
    arr = list(map(int, input().split()))
    colors = input().strip()
    test_cases.append((n, arr, colors))

# Calling the function
results = can_transform_to_permutation(t, test_cases)

# Output
for res in results:
    print(res)