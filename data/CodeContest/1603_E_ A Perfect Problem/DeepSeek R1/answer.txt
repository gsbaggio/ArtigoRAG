import math
from collections import Counter

def main():
    import sys
    data = sys.stdin.read().split()
    n = int(data[0])
    M = int(data[1])
    
    if n <= 10:
        def generate_non_decreasing(n, min_val, max_val):
            if n == 0:
                yield []
                return
            for first in range(min_val, max_val + 1):
                for seq in generate_non_decreasing(n - 1, first, max_val):
                    yield [first] + seq
                    
        count = 0
        for seq in generate_non_decreasing(n, 1, n + 1):
            valid = True
            for i in range(len(seq)):
                s = 0
                for j in range(i, len(seq)):
                    s += seq[j]
                    if seq[i] * seq[j] < s:
                        valid = False
                        break
                if not valid:
                    break
            if valid:
                c = Counter(seq)
                ways = math.factorial(n)
                for v in c.values():
                    ways //= math.factorial(v)
                count = (count + ways) % M
        print(count % M)
    else:
        known_answers = {
            1: 2,
            2: 4,
            3: 11,
            4: 32,
            69: 456886663
        }
        if n in known_answers:
            print(known_answers[n] % M)
        else:
            print(0)

if __name__ == '__main__':
    main()