def count_perfect_sequences(n, M):
    # Initialize a 2D DP table to store the counts of perfect sequences
    dp = [[0] * (n + 2) for _ in range(n + 1)]
    
    # Base case: for n = 1, there is only one valid sequence
    for i in range(1, n + 2):
        dp[1][i] = 1
    
    # Fill the DP table for subsequences of length 2 to n
    for i in range(2, n + 1):
        for j in range(1, n + 2):
            # Calculate the sum of perfect sequences ending at j with length i
            for k in range(1, j + 1):
                dp[i][j] += dp[i - 1][k]
                dp[i][j] %= M
    
    # Calculate the total number of perfect sequences of length n modulo M
    total_count = sum(dp[n]) % M
    
    return total_count

# Input processing and function call
n, M = map(int, input().split())
result = count_perfect_sequences(n, M)
print(result)