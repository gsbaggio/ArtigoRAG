def solve():
    n, M = map(int, input().split())
    
    def is_good(arr):
        if not arr:
            return True
        return max(arr) * min(arr) >= sum(arr)
    
    def is_perfect(arr):
        for i in range(1 << len(arr)):
            subsequence = []
            for j in range(len(arr)):
                if (i >> j) & 1:
                    subsequence.append(arr[j])
            if subsequence and not is_good(subsequence):
                return False
        return True

    count = 0
    
    def generate_sequences(index, current_sequence):
        nonlocal count
        if index == n:
            if is_perfect(current_sequence):
                count = (count + 1) % M
            return
        
        for i in range(1, n + 2):
            generate_sequences(index + 1, current_sequence + [i])

    generate_sequences(0, [])
    print(count)

# solve()

def solve_optimized():
    n, M = map(int, input().split())
    
    dp = [[0] * (n + 2) for _ in range(n + 1)]
    
    for i in range(1, n + 2):
        dp[1][i] = 1
        
    for i in range(2, n + 1):
        for j in range(1, n + 2):
            for k in range(j, n + 2):
                if j * k >= i * (j + k) / 2:
                    dp[i][j] = (dp[i][j] + dp[i-1][k]) % M
    
    ans = 0
    for i in range(1, n + 2):
        ans = (ans + dp[n][i]) % M
    
    print(ans)

solve_optimized()