CURRENT QUESTION:
Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.

Let's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.

Theofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.

Input

The first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of test cases.

The first and only line of each test case contains two integers n and k (2 ≤ n ≤ 10^9; 1 ≤ k ≤ 10^9).

Output

For each test case, print one integer — the k-th special number in increasing order modulo 10^9+7.

Example

Input


3
3 4
2 12
105 564


Output


9
12
3595374

Note

For n = 3 the sequence is [1,3,4,9...]

EXAMPLE QUESTIONS:
Example question 1:
Name: 1346_F. Dune II: Battle For Arrakis
Tags: ['*special', 'data structures', 'greedy', 'math']
Description: You're at the last mission in one very old and very popular strategy game Dune II: Battle For Arrakis. The map of the mission can be represented as a rectangular matrix of size n × m. Initially, there are a_{i, j} units of your army in the cell (i, j).

You want to prepare for the final battle, so you want to move all your army into exactly one cell of the map (i.e. nm-1 cells should contain 0 units of the army and the remaining cell should contain the entire army).

To do this, you can do some (possibly, zero) number of moves. During one move, you can select exactly one unit from some cell and move it to one of the adjacent by side cells. I.e. from the cell (i, j) you can move the unit to cells:

  * (i - 1, j); 
  * (i, j - 1); 
  * (i + 1, j); 
  * (i, j + 1). 



Of course, you want to move all your army into exactly one cell as fast as possible. So, you want to know the minimum number of moves you need to do that.

And, of course, life goes on, so the situation on the map changes. There are q updates, the i-th update is denoted by three integers x, y, z. This update affects the army in the cell (x, y): after this update, the number of units in the cell (x, y) becomes z (i.e. you replace a_{x, y} with z).

Also, you want to determine, for each i, the minimum number of moves needed to move your entire army into exactly one cell with the first i updates applied to the initial map. In other words, the map after the i-th update equals the initial map with the first i updates applied to it.

Input

The first line of the input contains three integers n, m and q (1 ≤ n, m ≤ 1000; 1 ≤ q ≤ 5000) — the size of the matrix and the number of updates correspondingly.

The next n lines contain m integers each, where the j-th integer in the i-th line is a_{i, j} (1 ≤ a_{i, j} ≤ 10^9) — the number of units in the cell (i, j).

The next q lines contain three integers each, where the i-th line contains three integers x_i, y_i and z_i (1 ≤ x_i ≤ n; 1 ≤ y_i ≤ m; 1 ≤ z_i ≤ 10^9) — the cell in which the number of units updates and the new number of units in this cell correspondingly.

Output

Print q+1 integers r_0, r_1, r_2, ..., r_n, where r_0 is the minimum number of moves you need to move all your army into exactly one cell, and r_i for all i from 1 to q is the minimum number of moves you need to move all your army into exactly one cell after the first i updates.

Examples

Input


3 3 1
1 2 3
2 1 2
1 1 2
2 3 100


Output


21 22 


Input


4 4 3
2 5 6 3
4 8 10 5
2 6 7 1
8 4 2 1
1 1 8
2 3 4
4 4 5


Output


123 135 129 145 
Difficulty: 12
Solutions: 

Example question 2:
Name: 743_C. Vladik and fractions
Tags: ['brute force', 'constructive algorithms', 'math', 'number theory']
Description: Vladik and Chloe decided to determine who of them is better at math. Vladik claimed that for any positive integer n he can represent fraction <image> as a sum of three distinct positive fractions in form <image>.

Help Vladik with that, i.e for a given n find three distinct positive integers x, y and z such that <image>. Because Chloe can't check Vladik's answer if the numbers are large, he asks you to print numbers not exceeding 109.

If there is no such answer, print -1.

Input

The single line contains single integer n (1 ≤ n ≤ 104).

Output

If the answer exists, print 3 distinct numbers x, y and z (1 ≤ x, y, z ≤ 109, x ≠ y, x ≠ z, y ≠ z). Otherwise print -1.

If there are multiple answers, print any of them.

Examples

Input

3


Output

2 7 42


Input

7


Output

7 8 56
Difficulty: 9
Solutions: import java.io.*;
import java.util.*;

public class Main {
  
  
  List<Long> divs(long n){
    long half = n / 2 + (n % 2 == 0 ? 1 : 0);
    List<Long> div = new ArrayList<Long>();
    for(long i = 2; i < half; i++){
      if(n % i == 0){
        div.add(i);
        div.add(n / i);
        break;
      }
    }
    return div;
  }
  
  public void solve(final long n){
    if(n == 1){
      System.out.println(-1);
      return;
    }
    List<Long> div = divs(n*n);
//    System.out.println(div.get(0)+" "+ div.get(1)+" "+(div.get(0) == div.get(1)));
    if(div.get(0).compareTo(div.get(1)) == 0){
      System.out.println(n + " " + (n + 1) + " " + (n * (n+1)));
    }
    else{
      System.out.println(n + " " + (n+div.get(0)) + " " + (n+div.get(1)));
    }
    return;
  }


  public static void main(String[] args) throws IOException {
    Scanner cin = new Scanner(System.in);
    Main sol = new Main();
    while(cin.hasNextLong()){
      long n = cin.nextLong();
      sol.solve(n);
    }
  }
}  


INSTRUCTIONS:
Solve the current question.
Provide:
1. A complete and efficient code solution, optimized for both time and space complexity.
2. A detailed explanation of the solution, including:
   - The intuition behind the approach;
   - Time and space complexity;
   - Important considerations about the algorithm.
3. If the language has classes, implement in 'Solution' class. Any language is accepted.
4. You can use the example questions as general references for coding patterns and structure, but solve the current problem independently.
5. Don't use any external libraries. Don't need to import any libraries.
