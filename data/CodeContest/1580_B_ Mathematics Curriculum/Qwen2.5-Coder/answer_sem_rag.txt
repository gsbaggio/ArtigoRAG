#include <bits/stdc++.h>
using namespace std;

const int MAXN = 105;
const int MAXM = 105;
const int MAXK = 105;

int dp[MAXN][MAXK][MAXM];
int n, m, k, p;

int main(){
    cin >> n >> m >> k >> p;
    
    // Initialize dp array
    for(int i = 0; i <= n; i++){
        for(int j = 0; j <= k; j++){
            for(int l = 0; l <= m; l++){
                dp[i][j][l] = 0;
            }
        }
    }
    
    // Base case
    dp[0][0][0] = 1;
    
    // Fill dp table
    for(int i = 1; i <= n; i++){
        for(int j = 0; j <= k; j++){
            for(int l = 0; l <= m; l++){
                if(dp[i-1][j][l] == 0) continue;
                
                // Case 1: i is not a good number
                for(int nl = 1; nl <= m; nl++){
                    dp[i][j][nl] = (dp[i][j][nl] + dp[i-1][j][l]) % p;
                }
                
                // Case 2: i is a good number
                if(l + 1 <= m){
                    dp[i][j+1][l+1] = (dp[i][j+1][l+1] + dp[i-1][j][l]) % p;
                }
            }
        }
    }
    
    // Sum up all valid dp[n][k][l]
    int ans = 0;
    for(int l = 0; l <= m; l++){
        ans = (ans + dp[n][k][l]) % p;
    }
    
    cout << ans;
    return 0;
}