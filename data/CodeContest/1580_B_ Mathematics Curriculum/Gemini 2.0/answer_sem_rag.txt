def solve():
    n, m, k, p = map(int, input().split())

    def count_good(perm, x):
        max_values = set()
        for i in range(n):
            for j in range(i, n):
                subsegment = perm[i:j+1]
                if x in subsegment:
                    max_values.add(max(subsegment))
        return len(max_values)

    def is_good_permutation(perm):
        count = 0
        for x in range(1, n + 1):
            if count_good(perm, x) == m:
                count += 1
        return count == k

    def generate_permutations(arr, l, r, count):
        if l == r:
            if is_good_permutation(arr):
                count[0] = (count[0] + 1) % p
        else:
            for i in range(l, r + 1):
                arr[l], arr[i] = arr[i], arr[l]
                generate_permutations(arr, l + 1, r, count)
                arr[l], arr[i] = arr[i], arr[l]  # backtrack
        
    
    arr = list(range(1, n + 1))
    count = [0]
    generate_permutations(arr, 0, n - 1, count)
    print(count[0])

solve()