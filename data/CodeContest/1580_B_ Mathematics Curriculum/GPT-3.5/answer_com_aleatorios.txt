def count_permutations(n, m, k, p):
    # Initialize a 3D DP array to store the number of permutations
    dp = [[[0 for _ in range(k + 1)] for _ in range(m + 1)] for _ in range(n + 1)]
    
    # Base case: when n = 1, m = 1, and k = 1
    dp[1][1][1] = 1
    
    # Iterate over all possible values
    for i in range(2, n + 1):
        for j in range(1, m + 1):
            for l in range(1, k + 1):
                dp[i][j][l] = (dp[i - 1][j][l] * l + dp[i - 1][j - 1][l - 1] * (i - l)) % p
    
    # Return the result for n, m, k
    return dp[n][m][k]

# Input parsing
n, m, k, p = map(int, input().split())

# Output the result
print(count_permutations(n, m, k, p))