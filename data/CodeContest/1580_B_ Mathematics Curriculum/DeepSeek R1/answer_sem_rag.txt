#include <iostream>
#include <cstring>
using namespace std;

const int N = 105;
int n, m_val, k_val, mod;
long long C[N][N];
long long dp[N][N][N];

int main() {
    cin >> n >> m_val >> k_val >> mod;
    for (int i = 0; i < N; i++) {
        C[i][0] = 1;
        for (int j = 1; j <= i; j++) {
            C[i][j] = (C[i-1][j] + C[i-1][j-1]) % mod;
        }
    }

    for (int a = 0; a <= n; a++) {
        dp[0][0][a] = 1;
    }

    for (int i = 1; i <= n; i++) {
        for (int j = 0; j <= k_val; j++) {
            for (int a = 1; a <= n; a++) {
                long long res = 0;
                for (int sz = 0; sz < i; sz++) {
                    for (int j1 = 0; j1 <= j; j1++) {
                        int j2 = j - j1;
                        long long ways = C[i-1][sz];
                        ways = (ways * dp[sz][j1][a-1]) % mod;
                        ways = (ways * dp[i-1-sz][j2][a-1]) % mod;
                        res = (res + ways) % mod;
                    }
                }
                dp[i][j][a] = res % mod;
            }
        }
    }

    cout << dp[n][k_val][m_val] << endl;
    return 0;
}