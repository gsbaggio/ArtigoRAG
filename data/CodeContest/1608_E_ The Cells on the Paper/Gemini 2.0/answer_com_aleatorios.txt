def solve():
    n = int(input())
    cells = []
    for _ in range(n):
        x, y, c = map(int, input().split())
        cells.append((x, y, c))

    max_k = 0
    for i in range(1 << n):
        subset = []
        for j in range(n):
            if (i >> j) & 1:
                subset.append(cells[j])

        if len(subset) % 3 != 0:
            continue

        counts = [0, 0, 0]
        for _, _, c in subset:
            counts[c - 1] += 1

        if counts[0] != counts[1] or counts[0] != counts[2]:
            continue

        if len(subset) == 0:
            max_k = max(max_k, 0)
            continue

        
        
        # Check if the subset can be covered by non-intersecting rectangles
        
        colors = [[], [], []]
        for x, y, c in subset:
            colors[c - 1].append((x, y))

        if not colors[0] or not colors[1] or not colors[2]:
            if len(subset) > 0:
                max_k = max(max_k, len(subset))
            else:
                max_k = max(max_k, 0)
            continue
        
        
        def check_rectangles(rects):
            # Check for intersections
            for i in range(3):
                for j in range(i + 1, 3):
                    rect1 = rects[i]
                    rect2 = rects[j]
                    if (rect1[0] < rect2[2] and rect1[2] > rect2[0] and
                        rect1[1] < rect2[3] and rect1[3] > rect2[1]):
                        return False

            # Check if each rectangle contains all points of its color and none of other colors
            for i in range(3):
                rect = rects[i]
                for x, y in colors[i]:
                    if not (rect[0] <= x <= rect[2] and rect[1] <= y <= rect[3]):
                        return False

                for j in range(3):
                    if i != j:
                        for x, y in colors[j]:
                            if (rect[0] <= x <= rect[2] and rect[1] <= y <= rect[3]):
                                return False
            return True

        
        # Find bounding rectangles for each color
        min_x = [float('inf'), float('inf'), float('inf')]
        min_y = [float('inf'), float('inf'), float('inf')]
        max_x = [float('-inf'), float('-inf'), float('-inf')]
        max_y = [float('-inf'), float('-inf'), float('-inf')]

        for i in range(3):
            for x, y in colors[i]:
                min_x[i] = min(min_x[i], x)
                min_y[i] = min(min_y[i], y)
                max_x[i] = max(max_x[i], x)
                max_y[i] = max(max_y[i], y)

        rects = []
        for i in range(3):
            rects.append((min_x[i], min_y[i], max_x[i], max_y[i]))

        if check_rectangles(rects):
            max_k = max(max_k, len(subset))

    print(max_k)

solve()