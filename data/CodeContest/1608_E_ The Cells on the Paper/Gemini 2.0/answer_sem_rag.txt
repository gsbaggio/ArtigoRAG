def solve():
    n = int(input())
    cells = []
    for _ in range(n):
        x, y, c = map(int, input().split())
        cells.append((x, y, c))

    max_k = 0
    for i in range(1 << n):
        subset = []
        for j in range(n):
            if (i >> j) & 1:
                subset.append(cells[j])

        if len(subset) % 3 != 0:
            continue

        counts = [0, 0, 0]
        for _, _, c in subset:
            counts[c - 1] += 1

        if counts[0] != len(subset) // 3 or counts[1] != len(subset) // 3 or counts[2] != len(subset) // 3:
            continue

        if len(subset) == 0:
            max_k = max(max_k, 0)
            continue

        # Check if rectangles can be formed
        colors = [[], [], []]
        for x, y, c in subset:
            colors[c - 1].append((x, y))

        if not colors[0] or not colors[1] or not colors[2]:
            max_k = max(max_k, len(subset))
            continue

        min_x = [float('inf'), float('inf'), float('inf')]
        max_x = [float('-inf'), float('-inf'), float('-inf')]
        min_y = [float('inf'), float('inf'), float('inf')]
        max_y = [float('-inf'), float('-inf'), float('-inf')]

        for color in range(3):
            for x, y in colors[color]:
                min_x[color] = min(min_x[color], x)
                max_x[color] = max(max_x[color], x)
                min_y[color] = min(min_y[color], y)
                max_y[color] = max(max_y[color], y)

        rects = []
        for color in range(3):
            rects.append((min_x[color], min_y[color], max_x[color], max_y[color]))

        intersect = False
        for r1_idx in range(3):
            for r2_idx in range(r1_idx + 1, 3):
                r1 = rects[r1_idx]
                r2 = rects[r2_idx]

                # Check for intersection
                if (r1[0] <= r2[2] and r1[2] >= r2[0] and r1[1] <= r2[3] and r1[3] >= r2[1]):
                    intersect = True
                    break
            if intersect:
                break

        if intersect:
            continue

        valid = True
        for x, y, c in subset:
            for color in range(3):
                if c == color + 1:
                    if not (rects[color][0] <= x <= rects[color][2] and rects[color][1] <= y <= rects[color][3]):
                        valid = False
                        break
                else:
                    if (rects[color][0] <= x <= rects[color][2] and rects[color][1] <= y <= rects[color][3]):
                        valid = False
                        break
            if not valid:
                break

        if valid:
            max_k = max(max_k, len(subset))

    print(max_k)

solve()