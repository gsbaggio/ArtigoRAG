CURRENT QUESTION:
For an array c of nonnegative integers, MEX(c) denotes the smallest nonnegative integer that doesn't appear in it. For example, MEX([0, 1, 3]) = 2, MEX([42]) = 0.

You are given integers n, k, and an array [b_1, b_2, …, b_n].

Find the number of arrays [a_1, a_2, …, a_n], for which the following conditions hold:

  * 0 ≤ a_i ≤ n for each i for each i from 1 to n.

  * |MEX([a_1, a_2, …, a_i]) - b_i| ≤ k for each i from 1 to n.




As this number can be very big, output it modulo 998 244 353.

Input

The first line of the input contains two integers n, k (1 ≤ n ≤ 2000, 0 ≤ k ≤ 50).

The second line of the input contains n integers b_1, b_2, …, b_n (-k ≤ b_i ≤ n+k) — elements of the array b.

Output

Output a single integer — the number of arrays which satisfy the conditions from the statement, modulo 998 244 353.

Examples

Input


4 0
0 0 0 0


Output


256


Input


4 1
0 0 0 0


Output


431


Input


4 1
0 0 1 1


Output


509


Input


5 2
0 0 2 2 0


Output


6546


Input


3 2
-2 0 4


Output


11

EXAMPLE QUESTIONS:
Example question 1:
Name: 1070_K. Video Posts
Tags: ['implementation']
Description: Polycarp took n videos, the duration of the i-th video is a_i seconds. The videos are listed in the chronological order, i.e. the 1-st video is the earliest, the 2-nd video is the next, ..., the n-th video is the last.

Now Polycarp wants to publish exactly k (1 ≤ k ≤ n) posts in Instabram. Each video should be a part of a single post. The posts should preserve the chronological order, it means that the first post should contain one or more of the earliest videos, the second post should contain a block (one or more videos) going next and so on. In other words, if the number of videos in the j-th post is s_j then:

  * s_1+s_2+...+s_k=n (s_i>0), 
  * the first post contains the videos: 1, 2, ..., s_1; 
  * the second post contains the videos: s_1+1, s_1+2, ..., s_1+s_2; 
  * the third post contains the videos: s_1+s_2+1, s_1+s_2+2, ..., s_1+s_2+s_3; 
  * ... 
  * the k-th post contains videos: n-s_k+1,n-s_k+2,...,n. 



Polycarp is a perfectionist, he wants the total duration of videos in each post to be the same.

Help Polycarp to find such positive integer values s_1, s_2, ..., s_k that satisfy all the conditions above.

Input

The first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^5). The next line contains n positive integer numbers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^4), where a_i is the duration of the i-th video.

Output

If solution exists, print "Yes" in the first line. Print k positive integers s_1, s_2, ..., s_k (s_1+s_2+...+s_k=n) in the second line. The total duration of videos in each post should be the same. It can be easily proven that the answer is unique (if it exists).

If there is no solution, print a single line "No".

Examples

Input

6 3
3 3 1 4 1 6


Output

Yes
2 3 1 

Input

3 3
1 1 1


Output

Yes
1 1 1 

Input

3 3
1 1 2


Output

No

Input

3 1
1 10 100


Output

Yes
3 
Difficulty: 17
Solutions: #include <bits/stdc++.h>
using namespace std;
int n;
int main() {
  ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
  int n, k;
  cin >> n >> k;
  vector<int> v(n);
  long long sum = 0;
  for (int i = 0; i < n; i++) {
    cin >> v[i];
    sum += v[i];
  }
  if (sum % k != 0)
    cout << "No\n";
  else {
    int num = sum / k;
    for (int i = 1; i < n; i++) {
      v[i] += v[i - 1];
    }
    int cnt = 0;
    vector<int> res;
    int q = 0;
    for (int i = 0; i < n; i++) {
      q++;
      if (v[i] % num == 0) {
        cnt++;
        res.push_back(q);
        q = 0;
      }
    }
    if (cnt == k) {
      cout << "Yes\n";
      for (int i = 0; i < k; i++) cout << res[i] << " ";
    } else
      cout << "No\n";
  }
  return 0;
}



INSTRUCTIONS:
Solve the current question.
Provide:
1. A complete and efficient code solution, optimized for both time and space complexity.
2. A detailed explanation of the solution, including:
   - The intuition behind the approach;
   - Time and space complexity;
   - Important considerations about the algorithm.
3. You can use the example questions as general references for coding patterns and structure, but solve the current problem independently.
4. Don't use any external libraries. Any language is accepted.