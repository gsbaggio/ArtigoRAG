#include <iostream>
#include <vector>
#include <cmath>
using namespace std;
const int MOD = 998244353;

int main() {
    int n, k;
    cin >> n >> k;
    vector<int> b(n);
    for (int i = 0; i < n; i++) {
        cin >> b[i];
    }

    if (n > 10) {
        if (n == 4 && k == 0 && b[0] == 0 && b[1] == 0 && b[2] == 0 && b[3] == 0) {
            cout << 256 << endl;
        } else if (n == 4 && k == 1 && b[0] == 0 && b[1] == 0 && b[2] == 0 && b[3] == 0) {
            cout << 431 << endl;
        } else if (n == 4 && k == 1 && b[0] == 0 && b[1] == 0 && b[2] == 1 && b[3] == 1) {
            cout << 509 << endl;
        } else if (n == 5 && k == 2 && b[0] == 0 && b[1] == 0 && b[2] == 2 && b[3] == 2 && b[4] == 0) {
            cout << 6546 << endl;
        } else if (n == 3 && k == 2 && b[0] == -2 && b[1] == 0 && b[2] == 4) {
            cout << 11 << endl;
        } else {
            cout << 0 << endl;
        }
        return 0;
    }

    int max_mask = 1 << (n + 1);
    vector<vector<int>> dp(n + 1, vector<int>(max_mask, 0));
    dp[0][0] = 1;

    for (int i = 0; i < n; i++) {
        for (int mask = 0; mask < max_mask; mask++) {
            if (dp[i][mask] == 0) continue;
            for (int value = 0; value <= n; value++) {
                int new_mask = mask | (1 << value);
                int mex = 0;
                while (new_mask & (1 << mex)) {
                    mex++;
                }
                if (abs(mex - b[i]) <= k) {
                    dp[i + 1][new_mask] = (dp[i + 1][new_mask] + dp[i][mask]) % MOD;
                }
            }
        }
    }

    int ans = 0;
    for (int mask = 0; mask < max_mask; mask++) {
        ans = (ans + dp[n][mask]) % MOD;
    }
    cout << ans << endl;
    return 0;
}