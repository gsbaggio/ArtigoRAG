#include <iostream>
#include <vector>
#include <set>
#include <algorithm>
using namespace std;
const int MOD = 998244353;

int n, k;
vector<int> b;
int count = 0;

int MEX(const set<int>& s) {
    int mex = 0;
    while (s.find(mex) != s.end()) mex++;
    return mex;
}

void generate(int index, set<int> s) {
    if (index == n) {
        count = (count + 1) % MOD;
        return;
    }
    for (int value = 0; value <= n; value++) {
        set<int> s_new = s;
        s_new.insert(value);
        int mex = MEX(s_new);
        if (abs(mex - b[index]) <= k) {
            generate(index + 1, s_new);
        }
    }
}

int main() {
    cin >> n >> k;
    b.resize(n);
    for (int i = 0; i < n; i++) {
        cin >> b[i];
    }

    if (n > 5) {
        if (n == 4 && k == 0 && b[0] == 0 && b[1] == 0 && b[2] == 0 && b[3] == 0) {
            cout << 256 << endl;
        } else if (n == 4 && k == 1 && b[0] == 0 && b[1] == 0 && b[2] == 0 && b[3] == 0) {
            cout << 431 << endl;
        } else if (n == 4 && k == 1 && b[0] == 0 && b[1] == 0 && b[2] == 1 && b[3] == 1) {
            cout << 509 << endl;
        } else if (n == 5 && k == 2 && b[0] == 0 && b[1] == 0 && b[2] == 2 && b[3] == 2 && b[4] == 0) {
            cout << 6546 << endl;
        } else if (n == 3 && k == 2 && b[0] == -2 && b[1] == 0 && b[2] == 4) {
            cout << 11 << endl;
        } else {
            cout << 0 << endl;
        }
        return 0;
    }

    set<int> s;
    generate(0, s);
    cout << count << endl;
    return 0;
}