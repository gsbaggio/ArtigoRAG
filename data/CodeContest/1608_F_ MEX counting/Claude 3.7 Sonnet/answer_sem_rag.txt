#include <iostream>
#include <vector>
using namespace std;

const int MOD = 998244353;

int main() {
    int n, k;
    cin >> n >> k;
    
    vector<int> b(n);
    for (int i = 0; i < n; i++) {
        cin >> b[i];
    }
    
    // dp[i][mex] = number of valid arrays of length i with MEX value mex
    vector<vector<long long>> dp(n + 1, vector<long long>(n + 2, 0));
    
    // Base case: empty array has MEX 0
    dp[0][0] = 1;
    
    for (int i = 0; i < n; i++) {
        for (int mex = 0; mex <= i + 1; mex++) {
            if (dp[i][mex] == 0) continue;
            
            // Check if current MEX satisfies the constraint for position i
            if (abs(mex - b[i]) > k) continue;
            
            // Adding mex increases the MEX value
            dp[i+1][mex+1] = (dp[i+1][mex+1] + dp[i][mex]) % MOD;
            
            // Adding any other value (0 to n, except mex) keeps the MEX the same
            // Total n+1 values, minus 1 for mex
            dp[i+1][mex] = (dp[i+1][mex] + (dp[i][mex] * n) % MOD) % MOD;
            dp[i+1][mex] = (dp[i+1][mex] - dp[i][mex] + MOD) % MOD;
        }
    }
    
    long long result = 0;
    for (int mex = 0; mex <= n + 1; mex++) {
        if (abs(mex - b[n-1]) <= k) {
            result = (result + dp[n][mex]) % MOD;
        }
    }
    
    cout << result << endl;
    return 0;
}