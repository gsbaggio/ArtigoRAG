#include <iostream>
#include <vector>
using namespace std;

const int MOD = 998244353;

int main() {
    int n, k;
    cin >> n >> k;
    
    vector<int> b(n);
    for (int i = 0; i < n; i++) {
        cin >> b[i];
    }
    
    // dp[i][j] = number of ways to have an array of length i with MEX value j
    vector<vector<long long>> dp(n + 1, vector<long long>(n + 2, 0));
    dp[0][0] = 1;
    
    for (int i = 0; i < n; i++) {
        for (int mex = 0; mex <= n + 1; mex++) {
            if (dp[i][mex] == 0) continue;
            
            // Check if this MEX value satisfies the constraint
            if (abs(mex - b[i]) > k) continue;
            
            // When adding mex, the MEX increases to mex+1
            if (mex <= n) {
                dp[i+1][mex+1] = (dp[i+1][mex+1] + dp[i][mex]) % MOD;
            }
            
            // When adding any number except mex, the MEX remains the same
            if (mex <= n) {
                // We can add any number from 0 to n except mex itself
                // So there are n options
                dp[i+1][mex] = (dp[i+1][mex] + dp[i][mex] * n) % MOD;
            } else {
                // mex > n, so we can add any number from 0 to n
                // Total of n+1 options
                dp[i+1][mex] = (dp[i+1][mex] + dp[i][mex] * (n + 1)) % MOD;
            }
        }
    }
    
    // Sum up all valid arrays
    long long result = 0;
    for (int mex = 0; mex <= n + 1; mex++) {
        result = (result + dp[n][mex]) % MOD;
    }
    
    cout << result << endl;
    
    return 0;
}