MOD = 998244353

def count_valid_arrays(n, k, b):
    # Initialize DP table
    dp = [[0] * (n + 2) for _ in range(n + 1)]
    dp[0][0] = 1  # Base case: empty array has MEX 0

    # Prefix sum for efficient range sum calculation
    prefix = [0] * (n + 2)

    for i in range(1, n + 1):
        # Update prefix sums for the previous row
        for m in range(n + 2):
            prefix[m] = (prefix[m - 1] + dp[i - 1][m]) % MOD if m > 0 else dp[i - 1][m]

        for m in range(n + 1):
            # Calculate the valid range for MEX
            low = max(0, m - k)
            high = min(n, m + k)

            # Check if b[i-1] is within the valid range
            if low <= b[i - 1] <= high:
                # Transition using prefix sums
                dp[i][m] = (prefix[m] - (prefix[m - 1] if m > 0 else 0)) % MOD

    # Sum up all valid MEX values for the full array
    return sum(dp[n]) % MOD

# Input reading
if __name__ == "__main__":
    n, k = map(int, input().split())
    b = list(map(int, input().split()))
    print(count_valid_arrays(n, k, b))