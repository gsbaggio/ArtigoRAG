#include <bits/stdc++.h>
using namespace std;

class SegmentTree {
public:
    int n;
    vector<vector<int>> sorted;
    vector<vector<long long>> prefix_sum;

    SegmentTree(int size) {
        n = size;
        sorted.resize(4 * n);
        prefix_sum.resize(4 * n);
    }

    void build(int idx, int l, int r, const vector<int> &arr) {
        if (l == r) {
            sorted[idx] = {arr[l]};
            prefix_sum[idx] = {0, arr[l]};
            return;
        }
        int mid = (l + r) >> 1;
        build(2 * idx, l, mid, arr);
        build(2 * idx + 1, mid + 1, r, arr);
        sorted[idx].resize(r - l + 1);
        merge(sorted[2*idx].begin(), sorted[2*idx].end(), sorted[2*idx+1].begin(), sorted[2*idx+1].end(), sorted[idx].begin());
        prefix_sum[idx].resize(r - l + 2);
        prefix_sum[idx][0] = 0;
        for (int i = 0; i < r - l + 1; i++) {
            prefix_sum[idx][i+1] = prefix_sum[idx][i] + sorted[idx][i];
        }
    }

    pair<int, long long> query(int idx, int l, int r, int ql, int qr, int k) {
        if (qr < l || ql > r) return {0, 0};
        if (ql <= l && r <= qr) {
            int pos = upper_bound(sorted[idx].begin(), sorted[idx].end(), k) - sorted[idx].begin();
            int count = sorted[idx].size() - pos;
            long long sum = prefix_sum[idx][sorted[idx].size()] - prefix_sum[idx][pos];
            return {count, sum};
        }
        int mid = (l + r) >> 1;
        auto left = query(2 * idx, l, mid, ql, qr, k);
        auto right = query(2 * idx + 1, mid + 1, r, ql, qr, k);
        return {left.first + right.first, left.second + right.second};
    }
};

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    int n;
    cin >> n;
    vector<vector<int>> graph(n);
    for (int i = 0; i < n-1; i++) {
        int u, v;
        cin >> u >> v;
        u--; v--;
        graph[u].push_back(v);
        graph[v].push_back(u);
    }

    vector<int> g_value(n);
    vector<int> in_time(n), out_time(n);
    int timer = 0;
    function<void(int, int)> dfs = [&](int u, int parent) {
        in_time[u] = timer++;
        int children = 0;
        for (int v : graph[u]) {
            if (v == parent) continue;
            dfs(v, u);
            children++;
        }
        g_value[u] = children - 1;
        out_time[u] = timer - 1;
    };
    dfs(0, -1);

    vector<int> B(n);
    for (int i = 0; i < n; i++) {
        B[in_time[i]] = g_value[i];
    }

    SegmentTree tree(n);
    tree.build(1, 0, n-1, B);

    int q;
    cin >> q;
    while (q--) {
        int v, k;
        cin >> v >> k;
        v--;
        int l = in_time[v] + 1;
        int r = out_time[v];
        if (l > r) {
            cout << g_value[v] + 1 << '\n';
        } else {
            auto [count, sum] = tree.query(1, 0, n-1, l, r, k);
            long long ans = g_value[v] + 1 + sum - k * count;
            cout << ans << '\n';
        }
    }
    return 0;
}