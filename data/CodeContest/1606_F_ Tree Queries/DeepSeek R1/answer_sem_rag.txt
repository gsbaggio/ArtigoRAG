import sys
from collections import deque

class Fenw:
    def __init__(self, n):
        self.n = n
        self.tree = [0] * (n + 1)
    
    def update(self, index, delta):
        i = index
        while i <= self.n:
            self.tree[i] += delta
            i += i & -i
            
    def query(self, index):
        s = 0
        i = index
        while i > 0:
            s += self.tree[i]
            i -= i & -i
        return s
        
    def range_query(self, l, r):
        if l > r:
            return 0
        return self.query(r) - self.query(l - 1)

def main():
    data = sys.stdin.read().split()
    it = iter(data)
    n = int(next(it))
    graph = [[] for _ in range(n + 1)]
    for _ in range(n - 1):
        x = int(next(it))
        y = int(next(it))
        graph[x].append(y)
        graph[y].append(x)
    
    children = [[] for _ in range(n + 1)]
    visited = [False] * (n + 1)
    queue = deque([1])
    visited[1] = True
    while queue:
        u = queue.popleft()
        for v in graph[u]:
            if not visited[v]:
                visited[v] = True
                children[u].append(v)
                queue.append(v)
                
    f = [0] * (n + 1)
    for i in range(1, n + 1):
        f[i] = len(children[i])
        
    in_time = [0] * (n + 1)
    out_time = [0] * (n + 1)
    time_counter = 1
    stack = [1]
    while stack:
        u = stack.pop()
        if u > 0:
            in_time[u] = time_counter
            time_counter += 1
            stack.append(-u)
            for v in reversed(children[u]):
                stack.append(v)
        else:
            u = -u
            out_time[u] = time_counter - 1
            
    nodes_list = []
    for i in range(1, n + 1):
        nodes_list.append((f[i], i))
    nodes_list.sort(key=lambda x: x[0], reverse=True)
    
    q = int(next(it))
    queries = []
    for i in range(q):
        v = int(next(it))
        k = int(next(it))
        T = k + 1
        queries.append((T, v, k, i))
        
    queries.sort(key=lambda x: x[0], reverse=True)
    
    fenw_h = Fenw(n)
    fenw_c = Fenw(n)
    
    j = 0
    results = [0] * q
    
    for T, v, k, idx in queries:
        while j < n and nodes_list[j][0] > T:
            u = nodes_list[j][1]
            pos = in_time[u]
            h_val = f[u] - 1
            fenw_h.update(pos, h_val)
            fenw_c.update(pos, 1)
            j += 1
            
        L = in_time[v] + 1
        R = out_time[v]
        S1 = fenw_h.range_query(L, R)
        S2 = fenw_c.range_query(L, R)
        ans = f[v] + S1 - k * S2
        results[idx] = ans
        
    for ans in results:
        print(ans)
        
if __name__ == '__main__':
    main()