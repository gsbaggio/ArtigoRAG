CURRENT QUESTION:
Alice and Bob play the following game. Alice has a set S of disjoint ranges of integers, initially containing only one range [1, n]. In one turn, Alice picks a range [l, r] from the set S and asks Bob to pick a number in the range. Bob chooses a number d (l ≤ d ≤ r). Then Alice removes [l, r] from S and puts into the set S the range [l, d - 1] (if l ≤ d - 1) and the range [d + 1, r] (if d + 1 ≤ r). The game ends when the set S is empty. We can show that the number of turns in each game is exactly n.

After playing the game, Alice remembers all the ranges [l, r] she picked from the set S, but Bob does not remember any of the numbers that he picked. But Bob is smart, and he knows he can find out his numbers d from Alice's ranges, and so he asks you for help with your programming skill.

Given the list of ranges that Alice has picked ([l, r]), for each range, help Bob find the number d that Bob has picked.

We can show that there is always a unique way for Bob to choose his number for a list of valid ranges picked by Alice.

Input

Each test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 1000). Description of the test cases follows.

The first line of each test case contains a single integer n (1 ≤ n ≤ 1000).

Each of the next n lines contains two integers l and r (1 ≤ l ≤ r ≤ n), denoting the range [l, r] that Alice picked at some point.

Note that the ranges are given in no particular order.

It is guaranteed that the sum of n over all test cases does not exceed 1000, and the ranges for each test case are from a valid game.

Output

For each test case print n lines. Each line should contain three integers l, r, and d, denoting that for Alice's range [l, r] Bob picked the number d.

You can print the lines in any order. We can show that the answer is unique.

It is not required to print a new line after each test case. The new lines in the output of the example are for readability only. 

Example

Input


4
1
1 1
3
1 3
2 3
2 2
6
1 1
3 5
4 4
3 6
4 5
1 6
5
1 5
1 2
4 5
2 2
4 4


Output


1 1 1

1 3 1
2 2 2
2 3 3

1 1 1
3 5 3
4 4 4
3 6 6
4 5 5
1 6 2

1 5 3
1 2 1
4 5 5
2 2 2
4 4 4

Note

In the first test case, there is only 1 range [1, 1]. There was only one range [1, 1] for Alice to pick, and there was only one number 1 for Bob to pick.

In the second test case, n = 3. Initially, the set contains only one range [1, 3]. 

  * Alice picked the range [1, 3]. Bob picked the number 1. Then Alice put the range [2, 3] back to the set, which after this turn is the only range in the set. 
  * Alice picked the range [2, 3]. Bob picked the number 3. Then Alice put the range [2, 2] back to the set. 
  * Alice picked the range [2, 2]. Bob picked the number 2. The game ended. 



In the fourth test case, the game was played with n = 5. Initially, the set contains only one range [1, 5]. The game's turn is described in the following table. 

Game turn| Alice's picked range| Bob's picked number| The range set after  
---|---|---|---  
Before the game start| | |  \{ [1, 5] \}   
1| [1, 5]| 3|  \{ [1, 2], [4, 5] \}  
2| [1, 2]| 1|  \{ [2, 2], [4, 5] \}   
3| [4, 5]| 5|  \{ [2, 2], [4, 4] \}   
4| [2, 2]| 2|  \{ [4, 4] \}   
5| [4, 4]| 4|  \{ \}  (empty set)

EXAMPLE QUESTIONS:
Example question 1:
Name: p01333 Summer of KMC
Tags: ['']
Description: Description

KMC sells CDs every year at a coterie spot sale called Comic Market. F was supposed to sell CDs at the comic market, but due to the popularity of F, the KMC sales floor was flooded with people, and the calculation of change could not keep up. So F decided to write a program that would output the change as soon as he entered the amount.

KMC prepares only 100-yen coins, 500-yen coins, and 1000-yen coins as change. You can think of these coins and bills as infinite. Choose change so that the number of coins and bills is minimized. Also, the price of CDs sold by KMC is a multiple of 100, and the amount paid by the purchaser is also a multiple of 100.



Input

The input consists of multiple test cases.

Each test case consists of two positive integers A and B. A is the price of the CD and B is the amount paid by the purchaser. A and B are multiples of 100 and do not exceed 100000000. Also, A ≤ B.

The input ends with 0 0.

Output

For each test case, the number and number of 100-yen coins, 500-yen coins, and 1000-yen coins that should be presented as change are output in this order in one line. Insert a space between each number.

Example

Input

500 1000
100 10000
400 700
600 5000
10000 10000
0 0


Output

0 1 0
4 1 9
3 0 0
4 0 4
0 0 0
Difficulty: 0
Solutions: #include<iostream>
#include<vector>
#include<string>
#include<algorithm>
#include<set>
using namespace std;
int main() {
	int a, b;
	while(cin>>a>>b&&a!=0&&b!=0){
		int h = 0, g = 0, s = 0,o=b-a;
		while (o >= 1000) {
			s++;
			o -= 1000;
		}
		while (o >= 500) {
			g++;
			o -= 500;
		}
		while (o >= 100) {
			h++;
			o -= 100;
		}
		cout << h << " " << g << " " << s << endl;
	}
}

Example question 2:
Name: problem-5
Tags: []
Description: The mysterious pathogen of ACM Nation multiplies mysteriously each day. Maria was able to

decipher the pattern but unable to completely solve the problem. The study of this equation will 

help in combating their growth. 

The summation is - 

S = a + aa + aa*a + ...... a^n times

Where a is the number of pathogen on the first day and S on the nth day.

Input : a and n are taken as input from the user.   First line will contain a,followed by n. 

Output: a single integer depicting the sum

Sample Input:
2
4

Sample Output:
30

SAMPLE INPUT
2
4

SAMPLE OUTPUT
30
Difficulty: 0
Solutions: a = int (raw_input ())
n = int (raw_input ())
if a != 1:
    print a * ((a ** n) - 1) / (a - 1)
else:
    print n


INSTRUCTIONS:
Solve the current question.
Provide:
1. A complete and efficient code solution, optimized for both time and space complexity.
2. A detailed explanation of the solution, including:
   - The intuition behind the approach;
   - Time and space complexity;
   - Important considerations about the algorithm.
3. You can use the example questions as general references for coding patterns and structure, but solve the current problem independently.
4. Don't use any external libraries. Any language is accepted.