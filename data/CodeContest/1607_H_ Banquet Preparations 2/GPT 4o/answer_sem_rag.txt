def minimize_variety(t, test_cases):
    results = []
    
    for case in test_cases:
        n, dishes = case
        seen = {}
        result = []
        
        for a, b, m in dishes:
            # Calculate the new (fish, meat) pair
            x = max(0, m - b)  # Eat as much fish as possible
            y = m - x          # Remaining is meat
            
            # Ensure x and y are valid
            x = min(x, a)
            y = min(y, b)
            
            # Update the resulting dish
            new_fish = a - x
            new_meat = b - y
            
            # Track the resulting pair
            if (new_fish, new_meat) not in seen:
                seen[(new_fish, new_meat)] = True
            
            # Store the result for this dish
            result.append((x, y))
        
        # Append the results for this test case
        results.append((len(seen), result))
    
    return results


# Input reading
if __name__ == "__main__":
    import sys
    input = sys.stdin.read
    data = input().splitlines()
    
    t = int(data[0])
    test_cases = []
    idx = 1
    
    for _ in range(t):
        while data[idx] == "":
            idx += 1
        n = int(data[idx])
        idx += 1
        dishes = []
        for _ in range(n):
            a, b, m = map(int, data[idx].split())
            dishes.append((a, b, m))
            idx += 1
        test_cases.append((n, dishes))
    
    # Solve the problem
    results = minimize_variety(t, test_cases)
    
    # Output the results
    output = []
    for variety, result in results:
        output.append(str(variety))
        for x, y in result:
            output.append(f"{x} {y}")
    print("\n".join(output))