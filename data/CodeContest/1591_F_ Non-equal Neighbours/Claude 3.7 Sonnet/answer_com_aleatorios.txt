#include <iostream>
#include <vector>
using namespace std;

const int MOD = 998244353;

int main() {
    int n;
    cin >> n;
    
    vector<int> a(n);
    for (int i = 0; i < n; i++) {
        cin >> a[i];
    }
    
    // Base case
    if (n == 1) {
        cout << a[0] << endl;
        return 0;
    }
    
    // For the first position, all values 1..a[0] are valid
    long long total = a[0];
    
    // Only need to track counts up to max possible value in next position
    vector<long long> count(min(a[0], a[1]) + 1, 1);
    
    for (int i = 1; i < n; i++) {
        // Calculate new counts
        vector<long long> new_count(min(a[i], (i < n-1 ? a[i+1] : 0)) + 1, 0);
        long long new_total = 0;
        
        // Calculate ways for each value at current position
        for (int j = 1; j <= a[i]; j++) {
            long long ways;
            if (j < count.size()) {
                // If j was valid in previous position, exclude it
                ways = (total - count[j] + MOD) % MOD;
            } else {
                // j wasn't valid in previous position
                ways = total;
            }
            
            new_total = (new_total + ways) % MOD;
            
            // Store count if needed for next iteration
            if (j < new_count.size()) {
                new_count[j] = ways;
            }
        }
        
        // Update for next iteration
        total = new_total;
        count = new_count;
    }
    
    cout << total << endl;
    return 0;
}