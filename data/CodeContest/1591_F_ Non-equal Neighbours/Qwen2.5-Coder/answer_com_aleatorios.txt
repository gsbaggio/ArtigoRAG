#include <bits/stdc++.h>
using namespace std;

const int MOD = 998244353;

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    
    int n;
    cin >> n;
    vector<int> a(n);
    for (int &x : a) cin >> x;
    
    // Find the maximum value in the array a
    int max_a = *max_element(a.begin(), a.end());
    
    // Initialize dp and prefix arrays
    vector<vector<int>> dp(n + 1, vector<int>(max_a + 1, 0));
    vector<vector<int>> prefix(n + 1, vector<int>(max_a + 1, 0));
    
    // Base case: for the first element
    for (int j = 1; j <= a[0]; ++j) {
        dp[1][j] = 1;
        prefix[1][j] = prefix[1][j - 1] + dp[1][j];
        prefix[1][j] %= MOD;
    }
    
    // Fill the dp and prefix arrays for the rest of the elements
    for (int i = 2; i <= n; ++i) {
        for (int j = 1; j <= a[i - 1]; ++j) {
            dp[i][j] = (prefix[i - 1][a[i - 2]] - dp[i - 1][j] + MOD) % MOD;
            prefix[i][j] = (prefix[i][j - 1] + dp[i][j]) % MOD;
        }
    }
    
    // Calculate the final answer
    int result = 0;
    for (int j = 1; j <= a[n - 1]; ++j) {
        result = (result + dp[n][j]) % MOD;
    }
    
    cout << result;
    return 0;
}