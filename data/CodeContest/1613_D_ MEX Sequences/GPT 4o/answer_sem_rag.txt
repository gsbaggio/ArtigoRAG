MOD = 998244353

# Precompute factorials and modular inverses
MAX_N = 500000
fact = [1] * (MAX_N + 1)
inv_fact = [1] * (MAX_N + 1)

for i in range(2, MAX_N + 1):
    fact[i] = fact[i - 1] * i % MOD

inv_fact[MAX_N] = pow(fact[MAX_N], MOD - 2, MOD)
for i in range(MAX_N - 1, 0, -1):
    inv_fact[i] = inv_fact[i + 1] * (i + 1) % MOD

# Function to calculate nCr % MOD
def nCr(n, r):
    if r > n or r < 0:
        return 0
    return fact[n] * inv_fact[r] % MOD * inv_fact[n - r] % MOD

# Solve the problem for all test cases
def solve():
    import sys
    input = sys.stdin.read
    data = input().split()
    
    t = int(data[0])
    idx = 1
    results = []
    
    for _ in range(t):
        n = int(data[idx])
        idx += 1
        a = list(map(int, data[idx:idx + n]))
        idx += n
        
        # Count frequencies of each number
        freq = [0] * (n + 1)
        for num in a:
            freq[num] += 1
        
        # Check if the sequence can be MEX-correct
        if freq[0] == 0:
            results.append(0)
            continue
        
        valid = True
        for i in range(1, n + 1):
            if freq[i] > freq[i - 1]:
                valid = False
                break
        
        if not valid:
            results.append(0)
            continue
        
        # Calculate the number of valid subsequences
        result = 1
        for i in range(n + 1):
            result = result * pow(2, freq[i], MOD) % MOD
        
        results.append(result)
    
    sys.stdout.write("\n".join(map(str, results)) + "\n")