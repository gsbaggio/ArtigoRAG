#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int main(){
    ios::sync_with_stdio(false);
    cin.tie(0);
    
    int t;
    cin >> t;
    while(t--){
        int n;
        cin >> n;
        
        vector<pair<int, int>> players(n);
        for(int i=0; i<n; i++){
            cin >> players[i].first;
            players[i].second = i;
        }
        
        vector<pair<int, int>> players_by_second_map(n);
        for(int i=0; i<n; i++){
            cin >> players_by_second_map[i].first;
            players_by_second_map[i].second = i;
        }
        
        // Sort players by their strength on the first map
        sort(players.begin(), players.end());
        
        // Sort players by their strength on the second map
        sort(players_by_second_map.begin(), players_by_second_map.end());
        
        // Create a mapping from player index to its position in the second map
        vector<int> second_map_position(n);
        for(int i=0; i<n; i++){
            second_map_position[players_by_second_map[i].second] = i;
        }
        
        // Initialize result array
        vector<char> result(n, '1');
        
        // Check dominance for each player
        for(int i=0; i<n; i++){
            int player_index = players[i].second;
            int second_map_pos = second_map_position[player_index];
            
            // Check if there is any player stronger on both maps
            for(int j=i+1; j<n; j++){
                int other_player_index = players[j].second;
                int other_second_map_pos = second_map_position[other_player_index];
                
                if(other_second_map_pos > second_map_pos){
                    result[player_index] = '0';
                    break;
                }
            }
        }
        
        // Output the result for the current test case
        for(int i=0; i<n; i++){
            cout << result[i];
        }
        cout << "\n";
    }
    
    return 0;
}