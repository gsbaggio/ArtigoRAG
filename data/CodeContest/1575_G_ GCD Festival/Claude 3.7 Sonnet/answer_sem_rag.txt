#include <iostream>
#include <vector>
using namespace std;

const int MOD = 1e9 + 7;
const int MAX_VAL = 100005;

int gcd(int a, int b) {
    while (b) {
        int temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}

int main() {
    int n;
    cin >> n;
    
    vector<int> a(n+1);
    for (int i = 1; i <= n; i++) {
        cin >> a[i];
    }
    
    // Precompute position GCD contributions
    vector<long long> pos_gcd(MAX_VAL + 1, 0);
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= n; j++) {
            pos_gcd[gcd(i, j)]++;
        }
    }
    
    // Precompute value GCD contributions
    vector<long long> val_gcd(MAX_VAL + 1, 0);
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= n; j++) {
            val_gcd[gcd(a[i], a[j])]++;
        }
    }
    
    // Calculate the result using the formula
    long long result = 0;
    for (int g = 1; g <= MAX_VAL; g++) {
        result = (result + 1LL * g * pos_gcd[g] % MOD * val_gcd[g] % MOD) % MOD;
    }
    
    cout << result << endl;
    return 0;
}