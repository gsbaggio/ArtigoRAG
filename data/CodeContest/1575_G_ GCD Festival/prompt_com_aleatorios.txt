CURRENT QUESTION:
Mr. Chanek has an array a of n integers. The prettiness value of a is denoted as:

$$$∑_{i=1}^{n} {∑_{j=1}^{n} {\gcd(a_i, a_j) ⋅ \gcd(i, j)}}$$$

where \gcd(x, y) denotes the greatest common divisor (GCD) of integers x and y.

In other words, the prettiness value of an array a is the total sum of \gcd(a_i, a_j) ⋅ \gcd(i, j) for all pairs (i, j).

Help Mr. Chanek find the prettiness value of a, and output the result modulo 10^9 + 7!

Input

The first line contains an integer n (2 ≤ n ≤ 10^5).

The second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^5).

Output

Output an integer denoting the prettiness value of a modulo 10^9 + 7.

Example

Input


5
3 6 2 1 4


Output


77

EXAMPLE QUESTIONS:
Example question 1:
Name: 1011_A. Stages
Tags: ['greedy', 'implementation', 'sortings']
Description: Natasha is going to fly to Mars. She needs to build a rocket, which consists of several stages in some order. Each of the stages is defined by a lowercase Latin letter. This way, the rocket can be described by the string — concatenation of letters, which correspond to the stages.

There are n stages available. The rocket must contain exactly k of them. Stages in the rocket should be ordered by their weight. So, after the stage with some letter can go only stage with a letter, which is at least two positions after in the alphabet (skipping one letter in between, or even more). For example, after letter 'c' can't go letters 'a', 'b', 'c' and 'd', but can go letters 'e', 'f', ..., 'z'.

For the rocket to fly as far as possible, its weight should be minimal. The weight of the rocket is equal to the sum of the weights of its stages. The weight of the stage is the number of its letter in the alphabet. For example, the stage 'a 'weighs one ton,' b 'weighs two tons, and' z' — 26 tons.

Build the rocket with the minimal weight or determine, that it is impossible to build a rocket at all. Each stage can be used at most once.

Input

The first line of input contains two integers — n and k (1 ≤ k ≤ n ≤ 50) – the number of available stages and the number of stages to use in the rocket.

The second line contains string s, which consists of exactly n lowercase Latin letters. Each letter defines a new stage, which can be used to build the rocket. Each stage can be used at most once.

Output

Print a single integer — the minimal total weight of the rocket or -1, if it is impossible to build the rocket at all.

Examples

Input

5 3
xyabd


Output

29

Input

7 4
problem


Output

34

Input

2 2
ab


Output

-1

Input

12 1
abaabbaaabbb


Output

1

Note

In the first example, the following rockets satisfy the condition:

  * "adx" (weight is 1+4+24=29);
  * "ady" (weight is 1+4+25=30);
  * "bdx" (weight is 2+4+24=30);
  * "bdy" (weight is 2+4+25=31).



Rocket "adx" has the minimal weight, so the answer is 29.

In the second example, target rocket is "belo". Its weight is 2+5+12+15=34.

In the third example, n=k=2, so the rocket must have both stages: 'a' and 'b'. This rocket doesn't satisfy the condition, because these letters are adjacent in the alphabet. Answer is -1.
Difficulty: 7
Solutions: n,k = list(map(int,input().split()))

data = sorted(list(input()))

data = list(map(lambda x:ord(x)-ord('a')+1,data))

result = 0
used = 0
idx =0
prev = -2


# print(data)

for d in data:
    if d > prev+1:
        result+= d
        prev = d
        used += 1


    if used == k:
        break

if used < k:
    print(-1)
else:
    print(result)



Example question 2:
Name: mriu2
Tags: []
Description: A circular prime is a prime number with the property that the number generated at each intermediate step when cyclically permuting its (base 10) digits will be prime.[1][2] For example 1193 is a circular prime, since 1931, 9311 and 3119 all are also prime

Input

First line contains an integer N, number of inputs. Second line has space separated N positive integers, none of them greater than 100000

Output
Space separated  0 or 1 values.
Where 0 denote that corresponding number is not circular prime where as 1 indicates it is prime

Example

Input:
10
88 11 2 5 6 9 100 121 233 79


Output:
0 1 1 1 0 0 0 0 0 1

 Explanation
 11,2,5,79 are circular primes others are not
Difficulty: 6
Solutions: def len(n):
    l=0
    while n:
        n/=10
        l+=1
    return l

def isprime(n):
    if n==2:
        return 1
    var=None
    for i in xrange(2,n):
        if n%i==0:
            break
        var=i
    if var==n-1:
        return 1
    else:
        return 0

def num_rot(n,f):
    l=len(n)-1
    while f:
        f-=1
        i=n%10
        n/=10
        n+=i*(10**l)
    return n

def cir_prime(n):
    k=n
    l=len(n)
    if isprime(k)==1:
        while l!=0:
            l-=1
            k=num_rot(n,l)
            if isprime(k)!=1:
                break
            if k<n and cir_prime(k)!=0:
                break
        if l==0:
            return 1
        else:
            return 0
    else:
        return 0

t=int(input())
a=raw_input().split(" ")
for j in a:
    print cir_prime(int(j)),

Example question 3:
Name: 1466_C. Canine poetry
Tags: ['dp', 'greedy', 'strings']
Description: After his wife's tragic death, Eurydice, Orpheus descended to the realm of death to see her. Reaching its gates was uneasy, but passing through them proved to be even more challenging. Mostly because of Cerberus, the three-headed hound of Hades. 

Orpheus, a famous poet, and musician plans to calm Cerberus with his poetry and safely walk past him. He created a very peculiar poem for Cerberus. It consists only of lowercase English letters. 

We call a poem's substring a palindrome if and only if it reads the same backwards and forwards. A string a is a substring of a string b if a can be obtained from b by deleting several (possibly zero or all) characters from the beginning and several (possibly zero or all) characters from the end.

Unfortunately, Cerberus dislikes palindromes of length greater than 1. For example in the poem abaa the hound of Hades wouldn't like substrings aba and aa.

Orpheus can only calm Cerberus if the hound likes his poetry. That's why he wants to change his poem so that it does not contain any palindrome substrings of length greater than 1.

Orpheus can modify the poem by replacing a letter at any position with any lowercase English letter. He can use this operation arbitrarily many times (possibly zero). Since there can be many palindromes in his poem, he may have to make some corrections. But how many, exactly? Given the poem, determine the minimal number of letters that have to be changed so that the poem does not contain any palindromes of length greater than 1.

Input

The first line of the input contains a single integer t (1 ≤ t ≤ 10^5) denoting the number of test cases, then t test cases follow.

The first and only line of each test case contains a non-empty string of lowercase English letters, Orpheus' poem.

The sum of the length of Orpheus' poems in all test cases will not exceed 10^5.

Output

You should output t lines, i-th line should contain a single integer, answer to the i-th test case.

Example

Input


7
babba
abaac
codeforces
zeroorez
abcdcba
bbbbbbb
a


Output


1
1
0
1
1
4
0

Note

In the first test case, we can replace the third character with c and obtain a palindrome-less poem bacba.

In the second test case, we can replace the third character with d and obtain a palindrome-less poem abdac.

In the third test case, the initial poem already doesn't contain any palindromes, so Orpheus doesn't need to change anything there.
Difficulty: 9
Solutions: #include <bits/stdc++.h>
using namespace std;

typedef long long ll;
#define FOR(i, st, n) for (int i = st; i < n; i++)
const int INF = 1e9+100;

int main(){
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	
	int t;
	cin>>t;
	while (t--){
		string s;
		cin>>s;
		int n = s.size();
		int ans = 0;
		for (int i = 0; i < n-1; i++){
			if (i < n-2 && s[i] == s[i+1] && s[i] == s[i+2]){
				ans+=2;
				i += 2;
			}else if(s[i] == s[i+1]){
				ans++;
				i++;
			}else if(i < n-2 && s[i] == s[i+2]){
				ans++;
				if (i < n-3 && s[i+1] == s[i+3]){
					ans++;
					i+=3;
				}else{
					i+=2;
				}
			}
		}
		cout<<ans<<'\n';

	}

	return 0;
}



INSTRUCTIONS:
Solve the current question.
Provide:
1. A complete and efficient code solution, optimized for both time and space complexity.
2. A detailed explanation of the solution, including:
   - The intuition behind the approach;
   - Time and space complexity;
   - Important considerations about the algorithm.
3. You can use the example questions as general references for coding patterns and structure, but solve the current problem independently.
4. Don't use any external libraries. Any language is accepted.