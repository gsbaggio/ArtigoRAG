CURRENT QUESTION:
Paprika loves permutations. She has an array a_1, a_2, ..., a_n. She wants to make the array a permutation of integers 1 to n.

In order to achieve this goal, she can perform operations on the array. In each operation she can choose two integers i (1 ≤ i ≤ n) and x (x > 0), then perform a_i := a_i mod x (that is, replace a_i by the remainder of a_i divided by x). In different operations, the chosen i and x can be different.

Determine the minimum number of operations needed to make the array a permutation of integers 1 to n. If it is impossible, output -1.

A permutation is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but [1,2,2] is not a permutation (2 appears twice in the array) and [1,3,4] is also not a permutation (n=3 but there is 4 in the array).

Input

Each test contains multiple test cases. The first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of test cases. Description of the test cases follows.

The first line of each test case contains an integer n (1 ≤ n ≤ 10^5).

The second line of each test case contains n integers a_1, a_2, ..., a_n. (1 ≤ a_i ≤ 10^9).

It is guaranteed that the sum of n over all test cases does not exceed 2 ⋅ 10^5.

Output

For each test case, output the minimum number of operations needed to make the array a permutation of integers 1 to n, or -1 if it is impossible.

Example

Input


4
2
1 7
3
1 5 4
4
12345678 87654321 20211218 23571113
9
1 2 3 4 18 19 5 6 7


Output


1
-1
4
2

Note

For the first test, the only possible sequence of operations which minimizes the number of operations is: 

  * Choose i=2, x=5. Perform a_2 := a_2 mod 5 = 2. 



For the second test, it is impossible to obtain a permutation of integers from 1 to n.

EXAMPLE QUESTIONS:
Example question 1:
Name: 1322_B. Present
Tags: ['binary search', 'bitmasks', 'constructive algorithms', 'data structures', 'math', 'sortings']
Description: Catherine received an array of integers as a gift for March 8. Eventually she grew bored with it, and she started calculated various useless characteristics for it. She succeeded to do it for each one she came up with. But when she came up with another one — xor of all pairwise sums of elements in the array, she realized that she couldn't compute it for a very large array, thus she asked for your help. Can you do it? Formally, you need to compute

$$$ (a_1 + a_2) ⊕ (a_1 + a_3) ⊕ … ⊕ (a_1 + a_n) \\\ ⊕ (a_2 + a_3) ⊕ … ⊕ (a_2 + a_n) \\\ … \\\ ⊕ (a_{n-1} + a_n) \\\ $$$

Here x ⊕ y is a bitwise XOR operation (i.e. x ^ y in many modern programming languages). You can read about it in Wikipedia: <https://en.wikipedia.org/wiki/Exclusive_or#Bitwise_operation>.

Input

The first line contains a single integer n (2 ≤ n ≤ 400 000) — the number of integers in the array.

The second line contains integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^7).

Output

Print a single integer — xor of all pairwise sums of integers in the given array.

Examples

Input


2
1 2


Output


3

Input


3
1 2 3


Output


2

Note

In the first sample case there is only one sum 1 + 2 = 3.

In the second sample case there are three sums: 1 + 2 = 3, 1 + 3 = 4, 2 + 3 = 5. In binary they are represented as 011_2 ⊕ 100_2 ⊕ 101_2 = 010_2, thus the answer is 2.

⊕ is the bitwise xor operation. To define x ⊕ y, consider binary representations of integers x and y. We put the i-th bit of the result to be 1 when exactly one of the i-th bits of x and y is 1. Otherwise, the i-th bit of the result is put to be 0. For example, 0101_2   ⊕   0011_2 = 0110_2.
Difficulty: 8
Solutions: import java.io.*;
import java.util.*;

public class Main {
	public static int lower_bound(int[] A, int low, int high, int x) {
		if (A[low] >= x) {
			return low;
		} else if (A[high] < x) {
			return high + 1;
		}
		while (low <= high) {
			int mid = (low + high) / 2;
			if (A[mid] < x) {
				low = mid + 1;
			} else {
				high = mid - 1;
			}
		}
		return high + 1;
	}

	public static int upper_bound(int[] A, int low, int high, int x) {
		if (A[low] > x) {
			return low;
		} else if (A[high] <= x) {
			return high + 1;
		}
		while (low <= high) {
			int mid = (low + high) / 2;
			if (A[mid] > x) {
				high = mid - 1;
			} else {
				low = mid + 1;
			}
		}
		return low;
	}

	public static void main(String[] args) {
		InputReader in = new InputReader();

		int N = in.nextInt();
		int[] A = new int[N];
		for (int i = 0; i < N; i++) {
			A[i] = in.nextInt();
		}
		Arrays.sort(A);
		int ans = 0;
		for (int i = 24; i >= 0; i--) {
			for (int j = 0; j < N - 1; j++) {
				int lb, ub;
				lb = lower_bound(A, j + 1, N - 1, (1 << i) - A[j]);
				ub = upper_bound(A, j + 1, N - 1, (2 << i) - 1 - A[j]);
				ans ^= ((Math.max(ub - lb, 0)) % 2) << i;
				lb = lower_bound(A, j + 1, N - 1, (3 << i) - A[j]);
				ub = upper_bound(A, j + 1, N - 1, (4 << i) - 2 - A[j]);
				ans ^= ((Math.max(ub - lb, 0)) % 2) << i;
			}
			if (i == 0) {
				break;
			}
			for (int j = 0; j < N; j++) {
				A[j] %= 1 << i;
			}
			Arrays.sort(A);
		}

		System.out.println(ans);
	}

	static class InputReader {
		public BufferedReader reader;
		public StringTokenizer st;

		public InputReader() {
			reader = new BufferedReader(new InputStreamReader(System.in));
		}

		public String next() {
			while (st == null || !st.hasMoreTokens()) {
				st = new StringTokenizer(nextLine());
			}
			return st.nextToken();
		}

		public String nextLine() {
			try {
				return reader.readLine();
			} catch (IOException e) {
				e.printStackTrace();
			}
			return null;
		}

		public int nextInt() {
			return Integer.parseInt(next());
		}
	}
}


Example question 2:
Name: 985_E. Pencils and Boxes
Tags: ['binary search', 'data structures', 'dp', 'greedy', 'two pointers']
Description: Mishka received a gift of multicolored pencils for his birthday! Unfortunately he lives in a monochrome world, where everything is of the same color and only saturation differs. This pack can be represented as a sequence a1, a2, ..., an of n integer numbers — saturation of the color of each pencil. Now Mishka wants to put all the mess in the pack in order. He has an infinite number of empty boxes to do this. He would like to fill some boxes in such a way that:

  * Each pencil belongs to exactly one box; 
  * Each non-empty box has at least k pencils in it; 
  * If pencils i and j belong to the same box, then |ai - aj| ≤ d, where |x| means absolute value of x. Note that the opposite is optional, there can be pencils i and j such that |ai - aj| ≤ d and they belong to different boxes. 



Help Mishka to determine if it's possible to distribute all the pencils into boxes. Print "YES" if there exists such a distribution. Otherwise print "NO".

Input

The first line contains three integer numbers n, k and d (1 ≤ k ≤ n ≤ 5·105, 0 ≤ d ≤ 109) — the number of pencils, minimal size of any non-empty box and maximal difference in saturation between any pair of pencils in the same box, respectively.

The second line contains n integer numbers a1, a2, ..., an (1 ≤ ai ≤ 109) — saturation of color of each pencil.

Output

Print "YES" if it's possible to distribute all the pencils into boxes and satisfy all the conditions. Otherwise print "NO".

Examples

Input

6 3 10
7 2 7 7 4 2


Output

YES


Input

6 2 3
4 5 3 13 4 10


Output

YES


Input

3 2 5
10 16 22


Output

NO

Note

In the first example it is possible to distribute pencils into 2 boxes with 3 pencils in each with any distribution. And you also can put all the pencils into the same box, difference of any pair in it won't exceed 10.

In the second example you can split pencils of saturations [4, 5, 3, 4] into 2 boxes of size 2 and put the remaining ones into another box.
Difficulty: 11
Solutions: #include <bits/stdc++.h>
using namespace std;
const int maxn = 5e6 + 5;
int n, m;
long long d;
long long a[maxn], sum[maxn];
int main() {
  scanf("%d%d%lld", &n, &m, &d);
  for (int i = 1; i <= n; i++) scanf("%lld", &a[i]);
  sort(&a[1], &a[n + 1]);
  int good = 1;
  sum[0] = 1;
  for (int i = 1, j = 1; i <= n; i++) {
    while (a[i] - a[j] > d) j++;
    good = sum[max(-1, i - m)] - sum[j - 2];
    sum[i] = sum[i - 1];
    if (good >= 1) sum[i]++;
  }
  if (good > 0)
    printf("YES");
  else
    printf("NO");
}



INSTRUCTIONS:
Solve the current question.
Provide:
1. A complete and efficient code solution, optimized for both time and space complexity.
2. A detailed explanation of the solution, including:
   - The intuition behind the approach;
   - Time and space complexity;
   - Important considerations about the algorithm.
3. You can use the example questions as general references for coding patterns and structure, but solve the current problem independently.
4. Don't use any external libraries. Any language is accepted.