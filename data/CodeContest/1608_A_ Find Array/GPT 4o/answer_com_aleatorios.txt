def sieve_of_eratosthenes(limit):
    """Generate all prime numbers up to a given limit."""
    is_prime = [True] * (limit + 1)
    is_prime[0] = is_prime[1] = False
    primes = []
    for i in range(2, limit + 1):
        if is_prime[i]:
            primes.append(i)
            for j in range(i * i, limit + 1, i):
                is_prime[j] = False
    return primes

def solve():
    import sys
    input = sys.stdin.read
    data = input().split()
    
    t = int(data[0])  # Number of test cases
    test_cases = list(map(int, data[1:]))
    
    # Precompute primes up to a large enough limit
    max_n = max(test_cases)
    total_n = sum(test_cases)
    primes = sieve_of_eratosthenes(10**5)  # Generate enough primes
    
    results = []
    index = 0
    for n in test_cases:
        results.append(" ".join(map(str, primes[index:index + n])))
        index += n
    
    # Print all results
    sys.stdout.write("\n".join(results) + "\n")
