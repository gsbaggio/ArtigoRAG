MOD = 10**9 + 7
M = 998244353

def count_numbers_with_prefix(prefix, max_length):
    if len(prefix) == max_length:
        return 1 if int(prefix) <= n else 0
    count = 0
    for i in range(10):
        new_prefix = prefix + str(i)
        if int(new_prefix) > n:
            break
        count += count_numbers_with_prefix(new_prefix, max_length)
    return count

def lexicographical_position(num_str, length, prefix_count):
    pos = 0
    for i in range(length):
        digit = int(num_str[i])
        for j in range(digit):
            pos += prefix_count[str(j)]
        if i < length - 1:
            prefix_count[num_str[:i+1]] -= 1
    return pos

def calculate_lexicographical_positions(n):
    num_str = str(n)
    length = len(num_str)
    
    # Precompute counts of numbers with each prefix
    prefix_count = {}
    for i in range(1, 10):
        prefix_count[str(i)] = count_numbers_with_prefix(str(i), length)
    
    # Calculate lexicographical positions
    positions = []
    for i in range(1, n + 1):
        i_str = str(i)
        pos = lexicographical_position(i_str, len(i_str), prefix_count.copy())
        positions.append(pos)
    
    return positions

def main():
    global n
    n = int(input().strip())
    
    # Calculate lexicographical positions
    positions = calculate_lexicographical_positions(n)
    
    # Calculate the required sum
    total_sum = 0
    for i in range(1, n + 1):
        diff = (i - positions[i - 1]) % M
        total_sum = (total_sum + diff) % MOD
    
    print(total_sum)

if __name__ == "__main__":
    main()