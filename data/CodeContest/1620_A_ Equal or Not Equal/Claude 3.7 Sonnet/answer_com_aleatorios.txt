#include <iostream>
#include <vector>
#include <string>

using namespace std;

class DisjointSet {
private:
    vector<int> parent, rank;
    
public:
    DisjointSet(int n) {
        parent.resize(n);
        rank.resize(n, 0);
        for (int i = 0; i < n; i++) {
            parent[i] = i;
        }
    }
    
    int find(int x) {
        if (parent[x] != x) {
            parent[x] = find(parent[x]);
        }
        return parent[x];
    }
    
    void unite(int x, int y) {
        int rootX = find(x);
        int rootY = find(y);
        
        if (rootX == rootY) return;
        
        if (rank[rootX] < rank[rootY]) {
            parent[rootX] = rootY;
        } else {
            parent[rootY] = rootX;
            if (rank[rootX] == rank[rootY]) {
                rank[rootX]++;
            }
        }
    }
};

bool solve(const string& s) {
    int n = s.size();
    DisjointSet ds(n);
    
    // Group positions that must have the same value
    for (int i = 0; i < n; i++) {
        if (s[i] == 'E') {
            ds.unite(i, (i + 1) % n);
        }
    }
    
    // Check for contradictions
    for (int i = 0; i < n; i++) {
        if (s[i] == 'N' && ds.find(i) == ds.find((i + 1) % n)) {
            return false;
        }
    }
    
    return true;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    
    int t;
    cin >> t;
    
    while (t--) {
        string s;
        cin >> s;
        
        cout << (solve(s) ? "YES" : "NO") << endl;
    }
    
    return 0;
}