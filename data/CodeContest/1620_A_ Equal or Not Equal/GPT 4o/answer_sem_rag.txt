def solve():
    import sys
    input = sys.stdin.read
    data = input().split()
    
    t = int(data[0])  # Number of test cases
    results = []
    
    for case in range(1, t + 1):
        s = data[case]
        n = len(s)
        
        # Union-Find with parity
        parent = list(range(n))
        parity = [0] * n  # 0 means same group, 1 means opposite group
        
        def find(x):
            if parent[x] != x:
                root = find(parent[x])
                parity[x] ^= parity[parent[x]]
                parent[x] = root
            return parent[x]
        
        def union(x, y, relation):
            root_x = find(x)
            root_y = find(y)
            
            if root_x == root_y:
                # Check if the relation is consistent
                if (parity[x] ^ parity[y]) != relation:
                    return False
            else:
                # Union the two sets
                parent[root_x] = root_y
                parity[root_x] = parity[x] ^ parity[y] ^ relation
            return True
        
        consistent = True
        for i in range(n):
            if s[i] == 'E':
                if not union(i, (i + 1) % n, 0):  # Same group
                    consistent = False
                    break
            elif s[i] == 'N':
                if not union(i, (i + 1) % n, 1):  # Opposite group
                    consistent = False
                    break
        
        results.append("YES" if consistent else "NO")
    
    sys.stdout.write("\n".join(results) + "\n")