def solve():
    n, k = map(int, input().split())
    s = input()
    
    MOD = 998244353
    
    def count_permutations(len_substring, num_ones):
        """
        Calculates the number of distinct permutations of a substring of given length
        containing a specified number of ones.
        """
        num_zeros = len_substring - num_ones
        
        if num_ones < 0 or num_zeros < 0:
            return 0
        
        if num_ones == 0 or num_zeros == 0:
            return 1
        
        # Calculate (num_ones + num_zeros)! / (num_ones! * num_zeros!) using multiplicative inverse
        numerator = 1
        for i in range(1, len_substring + 1):
            numerator = (numerator * i) % MOD
        
        denominator = 1
        for i in range(1, num_ones + 1):
            denominator = (denominator * i) % MOD
        
        for i in range(1, num_zeros + 1):
            denominator = (denominator * i) % MOD
            
        return (numerator * pow(denominator, MOD - 2, MOD)) % MOD

    
    distinct_strings = set()
    distinct_strings.add(s)
    
    for i in range(n):
        for j in range(i, n):
            substring = s[i:j+1]
            num_ones = substring.count('1')
            
            if num_ones == k:
                len_substring = len(substring)
                
                for ones in range(len_substring + 1):
                    temp_string = list(s)
                    new_substring = ['1'] * ones + ['0'] * (len_substring - ones)
                    
                    # Generate all possible permutations of the new substring
                    import itertools
                    
                    for permutation in itertools.permutations(new_substring):
                        permuted_substring = "".join(permutation)
                        temp_string[i:j+1] = list(permuted_substring)
                        distinct_strings.add("".join(temp_string))
    
    print(len(distinct_strings) % MOD)

solve()