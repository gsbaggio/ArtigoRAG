#include <bits/stdc++.h>
using namespace std;

const int MOD = 998244353;

// Function to compute x^y % MOD using fast exponentiation
long long power(long long x, long long y) {
    long long res = 1;
    while (y > 0) {
        if (y & 1) res = (res * x) % MOD;
        x = (x * x) % MOD;
        y >>= 1;
    }
    return res;
}

// Function to compute modular inverse of x under MOD
long long modInverse(long long x) {
    return power(x, MOD - 2);
}

// Function to compute nCr % MOD
long long nCr(long long n, long long r) {
    if (r > n) return 0;
    if (r == 0 || r == n) return 1;
    long long numerator = fact[n];
    long long denominator = (fact[r] * fact[n - r]) % MOD;
    return (numerator * modInverse(denominator)) % MOD;
}

int main() {
    int n, k;
    cin >> n >> k;
    string s;
    cin >> s;

    // Precompute factorials and their inverses
    vector<long long> fact(n + 1, 1);
    for (int i = 1; i <= n; ++i) {
        fact[i] = (fact[i - 1] * i) % MOD;
    }

    // Sliding window to find all substrings with exactly k ones
    int countOnes = 0;
    int left = 0;
    set<string> uniqueStrings;
    uniqueStrings.insert(s); // Include the original string

    for (int right = 0; right < n; ++right) {
        if (s[right] == '1') {
            countOnes++;
        }

        // When the window contains exactly k ones
        while (countOnes == k) {
            int zerosInWindow = right - left + 1 - k;
            long long permutations = nCr(right - left + 1, k);

            // Generate all possible permutations of the window
            for (int i = 0; i <= zerosInWindow; ++i) {
                string newString = s.substr(0, left) + string(i, '1') + string(zerosInWindow - i, '0') + string(k, '1') + s.substr(right + 1);
                uniqueStrings.insert(newString);
            }

            // Move the left pointer to reduce the count of ones in the window
            if (s[left] == '1') {
                countOnes--;
            }
            left++;
        }
    }

    // Output the number of unique strings modulo MOD
    cout << uniqueStrings.size() % MOD;
    return 0;
}