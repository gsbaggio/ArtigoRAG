CURRENT QUESTION:
You have an array of integers (initially empty).

You have to perform q queries. Each query is of one of two types: 

  * "1 x" — add the element x to the end of the array; 
  * "2 x y" — replace all occurrences of x in the array with y. 



Find the resulting array after performing all the queries.

Input

The first line contains a single integer q (1 ≤ q ≤ 5 ⋅ 10^5) — the number of queries.

Next q lines contain queries (one per line). Each query is of one of two types: 

  * "1 x" (1 ≤ x ≤ 5 ⋅ 10^5); 
  * "2 x y" (1 ≤ x, y ≤ 5 ⋅ 10^5). 



It's guaranteed that there is at least one query of the first type.

Output

In a single line, print k integers — the resulting array after performing all the queries, where k is the number of queries of the first type.

Examples

Input


7
1 3
1 1
2 1 2
1 2
1 1
1 2
2 1 3


Output


3 2 2 3 2 

Input


4
1 1
1 2
1 1
2 2 2


Output


1 2 1 

Input


8
2 1 4
1 1
1 4
1 2
2 2 4
2 4 3
1 2
2 2 7


Output


1 3 3 7 

Note

In the first example, the array changes as follows:

[] → [3] → [3, 1] → [3, 2] → [3, 2, 2] → [3, 2, 2, 1] → [3, 2, 2, 1, 2] → [3, 2, 2, 3, 2].

In the second example, the array changes as follows:

[] → [1] → [1, 2] → [1, 2, 1] → [1, 2, 1].

In the third example, the array changes as follows:

[] → [] → [1] → [1, 4] → [1, 4, 2] → [1, 4, 4] → [1, 3, 3] → [1, 3, 3, 2] → [1, 3, 3, 7].

EXAMPLE QUESTIONS:
Example question 1:
Name: p03172 Educational DP Contest - Candies
Tags: ['']
Description: There are N children, numbered 1, 2, \ldots, N.

They have decided to share K candies among themselves. Here, for each i (1 \leq i \leq N), Child i must receive between 0 and a_i candies (inclusive). Also, no candies should be left over.

Find the number of ways for them to share candies, modulo 10^9 + 7. Here, two ways are said to be different when there exists a child who receives a different number of candies.

Constraints

* All values in input are integers.
* 1 \leq N \leq 100
* 0 \leq K \leq 10^5
* 0 \leq a_i \leq K

Input

Input is given from Standard Input in the following format:


N K
a_1 a_2 \ldots a_N


Output

Print the number of ways for the children to share candies, modulo 10^9 + 7.

Examples

Input

3 4
1 2 3


Output

5


Input

1 10
9


Output

0


Input

2 0
0 0


Output

1


Input

4 100000
100000 100000 100000 100000


Output

665683269
Difficulty: 0
Solutions: #include<bits/stdc++.h>

using namespace std;

const int N = 110,mod=1e9+7;

typedef long long ll;

int a[N];
ll s[110000];
ll f[110][110000];
int main()
{
	ll n,k;
	cin>>n>>k;

	
	memset(f,0,sizeof(f));
	for(int i=1;i<=n;i++) cin>>a[i];
	for(int i =0;i<=k;i++) f[1][i] = (i<=a[1])? 1:0;
	for(int i=2;i<=n;i++)
	{	memset(s,0,sizeof(s));
		s[0]=f[i-1][0];
		for(int j=1;j<=k;j++)
		{
			s[j]=s[j-1]+f[i-1][j];
		}
		for(int j=k;j>=0;j--)
		{
			if(j-a[i]-1>=0) f[i][j]=s[j]-s[j-a[i]-1];
			else f[i][j]=s[j];
			f[i][j]%=mod;
		}
	}
	cout<<f[n][k]<<endl;
 
}

Example question 2:
Name: iitk2p01
Tags: []
Description: Nowadays out little Chef is traveling a lot. While traveling, on one unlucky day, he lost into a mysterious country. Nearby people handed little Chef to the King for investigations. After proper investigation they found little Chef innocent. Little Chef had no money with him to return to his country Byteland, so the King helped him by giving some money.


The monetary system of the country has coins of following values : 
K^0 , K^1 , K^2 , K^3 , K^4  ..... (till infinity) 
The King gave him K coins of each type.


The cost of the air ticket from that country to Byteland (his home) is  N . What is the minimum number of coins little chef has to spend to buy a ticket ? Little Chef want to spend minimum number of coins so that he can play with the remaining coins in his home !


Input

The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.

The only line of each test case contains two space separated integers N and  K  as described in the problem statement.


Output

For each test case, output a single line containing the answer to the corresponding test case.


Constraints

1 ≤ T ≤ 100,000
1 ≤ N ≤ 1,000,000,000,000,000,000 (10^18)
1 ≤ K ≤ 100,000


Example
Input:
2
12 2
18 3

Output:
2
2
Difficulty: 6
Solutions: for I in range(input()):
 x=raw_input().split()
 a=long(x[0])
 b=long(x[1])
 sum=0
 if b==1:
  print a
  continue
 while a!=0:
  sum+=a%b
  a/=b
 print sum


INSTRUCTIONS:
Solve the current question.
Provide:
1. A complete and efficient code solution, optimized for both time and space complexity.
2. A detailed explanation of the solution, including:
   - The intuition behind the approach;
   - Time and space complexity;
   - Important considerations about the algorithm.
3. You can use the example questions as general references for coding patterns and structure, but solve the current problem independently.
4. Don't use any external libraries. Any language is accepted.