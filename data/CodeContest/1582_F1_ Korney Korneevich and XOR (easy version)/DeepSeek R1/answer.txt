#include <bits/stdc++.h>
using namespace std;

const int MAX_VAL = 500;
const int BITS = 512;

struct Fenw {
    vector<bitset<BITS>> tree;
    int n;

    Fenw(int n) : n(n) {
        tree.resize(n+1);
    }

    void update(int idx, const bitset<BITS> &bs) {
        while (idx <= n) {
            tree[idx] |= bs;
            idx += idx & -idx;
        }
    }

    bitset<BITS> query(int idx) {
        bitset<BITS> res;
        while (idx > 0) {
            res |= tree[idx];
            idx -= idx & -idx;
        }
        return res;
    }
};

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);

    int n;
    cin >> n;
    vector<int> a(n);
    for (int i=0; i<n; i++) {
        cin >> a[i];
    }

    bitset<BITS> base;
    base[0] = 1;
    Fenw fenw(MAX_VAL+1);

    bitset<BITS> result;
    result[0] = 1;

    for (int v : a) {
        bitset<BITS> T = base | fenw.query(v);
        bitset<BITS> new_set;
        for (int i=0; i<BITS; i++) {
            if (T[i]) {
                new_set[i ^ v] = 1;
            }
        }
        fenw.update(v+1, new_set);
        result |= new_set;
    }

    cout << result.count() << '\n';
    for (int i=0; i<BITS; i++) {
        if (result[i]) {
            cout << i << ' ';
        }
    }
    cout << '\n';

    return 0;
}