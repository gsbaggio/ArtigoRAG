from collections import defaultdict

def count_nearly_full_subsequences(t, test_cases):
    def count_sets_with_sum(arr, target_sum):
        # Counts the number of subsets with a given sum
        dp = defaultdict(int)
        dp[0] = 1
        for num in arr:
            for s in list(dp.keys()):
                new_sum = s + num
                dp[new_sum] += dp[s]
        return dp[target_sum]

    results = []
    for _ in range(t):
        n = test_cases[_][0]
        arr = test_cases[_][1]

        total_sum = sum(arr)
        target_sum = total_sum - 1

        count = count_sets_with_sum(arr, target_sum) - 1  # Exclude the empty subset
        results.append(count)

    return results

# Input parsing
t = int(input())
test_cases = []
for _ in range(t):
    n = int(input())
    arr = list(map(int, input().split()))
    test_cases.append((n, arr))

# Get the results
results = count_nearly_full_subsequences(t, test_cases)

# Output the results
for result in results:
    print(result)