CURRENT QUESTION:
You are given two positive integers x and y. You can perform the following operation with x: write it in its binary form without leading zeros, add 0 or 1 to the right of it, reverse the binary form and turn it into a decimal number which is assigned as the new value of x.

For example: 

  * 34 can be turned into 81 via one operation: the binary form of 34 is 100010, if you add 1, reverse it and remove leading zeros, you will get 1010001, which is the binary form of 81. 
  * 34 can be turned into 17 via one operation: the binary form of 34 is 100010, if you add 0, reverse it and remove leading zeros, you will get 10001, which is the binary form of 17. 
  * 81 can be turned into 69 via one operation: the binary form of 81 is 1010001, if you add 0, reverse it and remove leading zeros, you will get 1000101, which is the binary form of 69. 
  * 34 can be turned into 69 via two operations: first you turn 34 into 81 and then 81 into 69. 



Your task is to find out whether x can be turned into y after a certain number of operations (possibly zero).

Input

The only line of the input contains two integers x and y (1 ≤ x, y ≤ 10^{18}).

Output

Print YES if you can make x equal to y and NO if you can't.

Examples

Input


3 3


Output


YES


Input


7 4


Output


NO


Input


2 8


Output


NO


Input


34 69


Output


YES


Input


8935891487501725 71487131900013807


Output


YES

Note

In the first example, you don't even need to do anything.

The fourth example is described in the statement.

EXAMPLE QUESTIONS:
Example question 1:
Name: the-door-closing-game-5
Tags: []
Description: Alice and Bob are taking a walk in the Land Of Doors which is a magical place having a series of N adjacent doors that are either open or close.

After a while they get bored and decide to do something interesting. So they started closing the open doors taking turns.

In each turn, the person walks upto any closed door.

He then selects a direction, either left or right, and starts to close the consecutive open doors in that direction.

He can stop whenever he wants or if he encounters a closed door.

However he must be able to close atleast one door. If he is unable to do so, he must concede defeat.

Your task is, given the initial state of doors in the Land Of Doors, print the name of the winner, given that both players play optimally.

NOTE: Alice takes the first turn.

Input
The first line of the input line contains T, the number of test cases. Then T lines follow each containing a string denoting the initial state of doors. Open doors are represented by a character '_' and closed doors by a character '|'.

Output
Output T lines containig the name of winner("Alice" or "Bob").
(quotes are for clarity only)

Constraints
1 ≤ T ≤ 20000
The length of string in each case is ≤100.

SAMPLE INPUT
4
_|_
|||
|__
|__||_|

SAMPLE OUTPUT
Bob
Bob
Alice
Alice
Difficulty: 0
Solutions: t = int(raw_input())
for ti in range(t):
	door = raw_input()
	n = len(door)
	i = 0
	op = []
	while i<n:		
		if door[i] == '_':
			j = 1
			while i<n and door[i]== '_':
				i += 1
				j += 1
			op.append(j-1)
		i += 1
	#print op
	if not op:
		print "Bob"
	elif len(op)==1 and op[0]<=n-1:
		print "Alice"
	elif len(op)==1 and op[0]==n:
		print "Bob"
	#elif len(op)==2 and op[0] == op[1]
	#elif len(op)&1:
	#	print "Alice"
	else:
		
		xor = op[0]
		for i in range(1,len(op)):
			xor ^= op[i]
		#xor = bin(xor)[2:].count('1')
		if xor>0:
			print "Alice"
		else:
			print "Bob"


INSTRUCTIONS:
Solve the current question.
Provide:
1. A complete and efficient code solution, optimized for both time and space complexity.
2. A detailed explanation of the solution, including:
   - The intuition behind the approach;
   - Time and space complexity;
   - Important considerations about the algorithm.
3. You can use the example questions as general references for coding patterns and structure, but solve the current problem independently.
4. Don't use any external libraries. Any language is accepted.