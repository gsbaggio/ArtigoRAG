#include <bits/stdc++.h>
using namespace std;

const int MOD = 998244353;

// Function to calculate the extreme value of all subarrays
long long calculateExtremeValues(vector<int>& a) {
    int n = a.size();
    vector<int> left(n), right(n);
    stack<int> st;

    // Calculate the nearest smaller element to the left
    for (int i = 0; i < n; ++i) {
        while (!st.empty() && a[st.top()] > a[i]) {
            st.pop();
        }
        left[i] = st.empty() ? -1 : st.top();
        st.push(i);
    }

    // Clear the stack for the next calculation
    while (!st.empty()) st.pop();

    // Calculate the nearest smaller element to the right
    for (int i = n - 1; i >= 0; --i) {
        while (!st.empty() && a[st.top()] >= a[i]) {
            st.pop();
        }
        right[i] = st.empty() ? n : st.top();
        st.push(i);
    }

    // Calculate the sum of extreme values
    long long result = 0;
    for (int i = 0; i < n; ++i) {
        long long count = (long long)(i - left[i]) * (right[i] - i) % MOD;
        result = (result + count * a[i] % MOD) % MOD;
    }

    return result;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        vector<int> a(n);
        for (int i = 0; i < n; ++i) {
            cin >> a[i];
        }
        cout << calculateExtremeValues(a) << "\n";
    }

    return 0;
}