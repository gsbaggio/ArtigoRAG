#include <iostream>
#include <vector>
using namespace std;

const int MOD = 998244353;

// Calculate operations needed to make a <= b
int calcOperations(int a, int b) {
    if (a <= b) return 0;
    
    int ops = 0;
    while (a > b) {
        int half = (a + 1) / 2;
        a = half;  // We only care about the largest value after split
        ops++;
    }
    
    return ops;
}

long long solveCase(const vector<int>& a) {
    int n = a.size();
    vector<vector<int>> ops(n, vector<int>(n, 0));
    
    // Precompute operations for each pair (i,j)
    for (int i = 0; i < n - 1; i++) {
        ops[i][i+1] = calcOperations(a[i], a[i+1]);
        
        // For longer subarrays
        for (int j = i + 2; j < n; j++) {
            ops[i][j] = ops[i][j-1] + calcOperations(a[j-1], a[j]);
        }
    }
    
    long long result = 0;
    for (int i = 0; i < n; i++) {
        for (int j = i; j < n; j++) {
            if (i == j) continue;  // Skip single-element subarrays (extreme value is 0)
            result = (result + ops[i][j]) % MOD;
        }
    }
    
    return result;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    
    int t;
    cin >> t;
    
    while (t--) {
        int n;
        cin >> n;
        
        vector<int> a(n);
        for (int i = 0; i < n; i++) {
            cin >> a[i];
        }
        
        cout << solveCase(a) << "\n";
    }
    
    return 0;
}