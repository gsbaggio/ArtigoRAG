def solve():
    n, m = map(int, input().split())
    a = list(map(int, input().split()))
    b = list(map(int, input().split()))

    inversions = 0
    c = []

    def count_inversions(arr):
        count = 0
        for i in range(len(arr)):
            for j in range(i + 1, len(arr)):
                if arr[i] > arr[j]:
                    count += 1
        return count

    import itertools

    min_inversions = float('inf')

    # Generate all possible permutations of b
    for perm_b in itertools.permutations(b):
        # Generate all possible insertion positions of perm_b into a
        for i in range(len(a) + 1):
            temp_c = a[:i] + list(perm_b) + a[i:]
            inversions_count = count_inversions(temp_c)
            min_inversions = min(min_inversions, inversions_count)

    print(min_inversions)

t = int(input())
for _ in range(t):
    solve()