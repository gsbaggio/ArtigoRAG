def minimize_inversions(t, test_cases):
    results = []
    
    for case in test_cases:
        n, m, a, b = case
        b.sort()  # Sort array b
        inversions = 0
        i, j = 0, 0  # Pointers for a and b
        
        # Count inversions using a two-pointer merge approach
        while i < n and j < m:
            if b[j] <= a[i]:
                # Place b[j] before a[i], causing no inversion
                j += 1
            else:
                # Move to the next element in a
                i += 1
                # All remaining elements in b[j:] are smaller than a[i]
                inversions += j
        
        # Add remaining inversions for elements in b that are still unmerged
        inversions += j * (n - i)
        
        results.append(inversions)
    
    return results


# Input reading
if __name__ == "__main__":
    import sys
    input = sys.stdin.read
    data = input().split()
    
    t = int(data[0])
    test_cases = []
    idx = 1
    
    for _ in range(t):
        n, m = map(int, data[idx:idx+2])
        idx += 2
        a = list(map(int, data[idx:idx+n]))
        idx += n
        b = list(map(int, data[idx:idx+m]))
        idx += m
        test_cases.append((n, m, a, b))
    
    results = minimize_inversions(t, test_cases)
    sys.stdout.write("\n".join(map(str, results)) + "\n")