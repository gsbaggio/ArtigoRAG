#include <iostream>
#include <vector>
using namespace std;

const int mod = 998244353;
const int N = 250000;

vector<int> graph[N+1];
long long dp0[N+1], dp1[N+1];

void dfs(int u, int parent) {
    dp0[u] = 1;
    dp1[u] = 1;
    for (int v : graph[u]) {
        if (v == parent) continue;
        dfs(v, u);
        dp0[u] = (dp0[u] * (2 * dp0[v] + dp1[v])) % mod;
        dp1[u] = (dp1[u] * (dp0[v] + dp1[v])) % mod;
    }
}

int main() {
    int n;
    cin >> n;
    for (int i = 0; i < n-1; i++) {
        int u, v;
        cin >> u >> v;
        graph[u].push_back(v);
        graph[v].push_back(u);
    }
    dfs(1, 0);
    long long ans = (dp0[1] - dp1[1] + mod) % mod;
    cout << ans << endl;
    return 0;
}