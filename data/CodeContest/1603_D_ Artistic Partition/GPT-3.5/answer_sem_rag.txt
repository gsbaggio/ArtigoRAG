def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

def c(l, r):
    count = 0
    for i in range(l, r + 1):
        for j in range(i, r + 1):
            if gcd(i, j) >= l:
                count += 1
    return count

def f(n, k):
    dp = [[0] * (n + 1) for _ in range(k + 2)]

    for j in range(1, n + 1):
        dp[1][j] = c(1, j)

    for i in range(2, k + 1):
        for j in range(i, n + 1):
            dp[i][j] = float('inf')
            for x in range(i - 1, j):
                dp[i][j] = min(dp[i][j], dp[i - 1][x] + c(x + 1, j))

    return dp[k][n]

# Input parsing
t = int(input())
for _ in range(t):
    n, k = map(int, input().split())
    print(f(n, k))