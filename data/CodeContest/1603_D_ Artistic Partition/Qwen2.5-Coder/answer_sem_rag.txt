def compute_gcd_counts(n):
    # Initialize the count array
    count = [0] * (n + 1)
    
    # Precompute the number of pairs (i, j) with gcd(i, j) = d
    for d in range(1, n + 1):
        for i in range(d, n + 1, d):
            for j in range(i, n + 1, d):
                count[d] += 1
    
    # Compute prefix sums for count array
    prefix_count = [0] * (n + 1)
    for i in range(1, n + 1):
        prefix_count[i] = prefix_count[i - 1] + count[i]
    
    return prefix_count

def c(l, r, prefix_count):
    # c(l, r) = sum of count[d] for all d >= l and d <= r
    return prefix_count[r] - prefix_count[l - 1]

def solve(n, k, prefix_count):
    # Initialize the dp array
    dp = [[float('inf')] * k for _ in range(n + 1)]
    
    # Base case: dp[i][0] = c(1, i)
    for i in range(1, n + 1):
        dp[i][0] = c(1, i, prefix_count)
    
    # Fill the dp table
    for j i