import math
from functools import lru_cache

# Use memoization for calculating c(l,r)
@lru_cache(maxsize=None)
def count_pairs(left, right):
    count = 0
    for i in range(left, right + 1):
        j = i
        while j <= right:
            count += (right // j - (i - 1) // j)
            j += 1
    return count

def solve(n, k):
    # dp[i][j] = minimum cost to partition [1...i] into j segments
    dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]
    dp[0][0] = 0
    
    for i in range(1, n + 1):
        for j in range(1, min(i, k) + 1):
            for prev in range(j - 1, i):
                dp[i][j] = min(dp[i][j], dp[prev][j-1] + count_pairs(prev + 1, i))
    
    return dp[n][k]

t = int(input())
for _ in range(t):
    n, k = map(int, input().split())
    print(solve(n, k))