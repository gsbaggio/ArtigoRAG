def gcd(a, b):
    """
    Calculates the greatest common divisor (GCD) of two integers using the Euclidean algorithm.

    Args:
        a (int): The first integer.
        b (int): The second integer.

    Returns:
        int: The greatest common divisor of a and b.
    """
    while b:
        a, b = b, a % b
    return a

def c(l, r):
    """
    Calculates the number of integer pairs (i, j) such that l <= i <= j <= r and gcd(i, j) >= l.

    Args:
        l (int): The lower bound of the range.
        r (int): The upper bound of the range.

    Returns:
        int: The number of pairs satisfying the condition.
    """
    count = 0
    for i in range(l, r + 1):
        for j in range(i, r + 1):
            if gcd(i, j) >= l:
                count += 1
    return count

def solve():
    """
    Reads input, calculates f(n, k), and prints the result.
    """
    n, k = map(int, input().split())

    # dp[i][j] stores the minimum sum of c(x_i+1, x_{i+1}) for the first i segments, ending at x_{i+1} = j
    dp = [[float('inf')] * (n + 1) for _ in range(k + 1)]
    dp[0][0] = 0

    # Iterate through the number of segments
    for i in range(1, k + 1):
        # Iterate through the possible ending points of the current segment
        for j in range(1, n + 1):
            # Iterate through the possible starting points of the current segment
            for x in range(0, j):
                dp[i][j] = min(dp[i][j], dp[i - 1][x] + c(x + 1, j))

    print(dp[k][n])

# Read the number of test cases
t = int(input())
for _ in range(t):
    solve()