#include <iostream>
#include <vector>
#include <set>
using namespace std;

int main() {
    int n;
    cin >> n;
    
    vector<int> a(n);
    for (int i = 0; i < n; i++) {
        cin >> a[i];
    }
    
    // Track which numbers we've already used in pairs
    set<int> paired_numbers;
    
    // First: identify existing pairs
    for (int i = 0; i < n - 1; i++) {
        if (a[i] > 0 && a[i] == a[i+1]) {
            paired_numbers.insert(a[i]);
        }
    }
    
    // Second: create pairs where a zero is adjacent to non-zero
    for (int i = 0; i < n; i++) {
        if (a[i] == 0) {
            // Try to make it part of a pair
            if (i > 0 && a[i-1] > 0) {
                a[i] = a[i-1];
                paired_numbers.insert(a[i]);
            } else if (i < n-1 && a[i+1] > 0) {
                a[i] = a[i+1];
                paired_numbers.insert(a[i]);
            }
        }
    }
    
    // Third: handle remaining zeros, preferably in consecutive pairs
    int next_number = 1;
    for (int i = 0; i < n - 1; i++) {
        if (a[i] == 0 && a[i+1] == 0) {
            // Find an unused number to create a new pair
            while (next_number <= n && paired_numbers.count(next_number) > 0) {
                next_number++;
            }
            
            // If we found an unused number
            if (next_number <= n) {
                a[i] = a[i+1] = next_number;
                paired_numbers.insert(next_number);
                next_number++;
                i++; // Skip the next zero
            }
        }
    }
    
    // Finally: fill any remaining zeros with any valid number
    for (int i = 0; i < n; i++) {
        if (a[i] == 0) {
            a[i] = 1; // Any number from 1 to n works here
        }
    }
    
    // Print the result
    for (int i = 0; i < n; i++) {
        cout << a[i] << (i == n - 1 ? '\n' : ' ');
    }
    
    return 0;
}