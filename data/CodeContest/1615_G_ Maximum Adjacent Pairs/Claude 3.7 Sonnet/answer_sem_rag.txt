def maximize_value(n, arr):
    # Make a copy of the input array
    result = arr.copy()
    
    # Find numbers that already have adjacent pairs
    has_pair = set()
    for i in range(n - 1):
        if arr[i] != 0 and arr[i] == arr[i + 1]:
            has_pair.add(arr[i])
    
    # Available numbers are those that don't already have pairs
    available = [i for i in range(1, n + 1) if i not in has_pair]
    next_available_idx = 0
    
    # First pass: Try to create pairs with existing non-zero elements
    i = 0
    while i < n:
        if result[i] == 0:
            # Check if we can form a pair with the previous element
            if i > 0 and result[i - 1] != 0 and result[i - 1] not in has_pair:
                result[i] = result[i - 1]
                has_pair.add(result[i - 1])
            # Check if we can form a pair with the next element
            elif i < n - 1 and result[i + 1] != 0 and result[i + 1] not in has_pair:
                result[i] = result[i + 1]
                has_pair.add(result[i + 1])
        i += 1
    
    # Second pass: Fill in consecutive zeros with new pairs
    i = 0
    while i < n:
        if result[i] == 0:
            if i < n - 1 and result[i + 1] == 0 and next_available_idx < len(available):
                # Form a new pair from available numbers
                result[i] = result[i + 1] = available[next_available_idx]
                next_available_idx += 1
                i += 2  # Skip the next element since we've filled it
            else:
                # If we can't form a pair or no available numbers left
                if next_available_idx < len(available):
                    result[i] = available[next_available_idx]
                    next_available_idx += 1
                else:
                    # If all numbers are used, just use 1
                    result[i] = 1
                i += 1
        else:
            i += 1
    
    return result

# Read input
n = int(input())
arr = list(map(int, input().split()))

# Solve and print output
result = maximize_value(n, arr)
print(" ".join(map(str, result)))