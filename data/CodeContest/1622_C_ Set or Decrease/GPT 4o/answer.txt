def solve():
    import sys
    input = sys.stdin.read
    data = input().split()
    
    t = int(data[0])
    idx = 1
    results = []
    
    for _ in range(t):
        n, k = map(int, data[idx:idx+2])
        idx += 2
        a = list(map(int, data[idx:idx+n]))
        idx += n
        
        # Sort the array
        a.sort()
        
        # Calculate prefix sums
        prefix_sum = [0] * n
        prefix_sum[0] = a[0]
        for i in range(1, n):
            prefix_sum[i] = prefix_sum[i-1] + a[i]
        
        # Initialize the minimum steps to a large value
        min_steps = float('inf')
        
        # Iterate over the number of elements to keep unchanged
        for i in range(n):
            # Sum of the smallest `i` elements
            smallest_sum = prefix_sum[i]
            # Remaining sum to reduce
            remaining_sum = prefix_sum[-1] - smallest_sum
            # Steps to reduce the remaining sum to `k`
            if remaining_sum > k:
                steps = remaining_sum - k
                # Add the number of elements reduced to the steps
                steps += (n - i - 1)
            else:
                steps = n - i - 1
            # Update the minimum steps
            min_steps = min(min_steps, steps)
        
        results.append(min_steps)
    
    sys.stdout.write("\n".join(map(str, results)) + "\n")