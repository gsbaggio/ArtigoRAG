from collections import defaultdict

def count_problem_combinations(t, testcases):
    for _ in range(t):
        n = testcases[_][0]
        topics = defaultdict(list)
        difficulties = defaultdict(list)
        
        for i in range(n):
            topic, difficulty = testcases[_][i+1]
            topics[topic].append(i)
            difficulties[difficulty].append(i)
        
        topic_count = sum(len(indices) for indices in topics.values())
        difficulty_count = sum(len(indices) for indices in difficulties.values())
        
        total_combinations = topic_count * (topic_count - 1) * (topic_count - 2) // 6
        total_combinations += difficulty_count * (difficulty_count - 1) * (difficulty_count - 2) // 6
        
        for indices in topics.values():
            total_combinations -= len(indices) * (len(indices) - 1) * (len(indices) - 2) // 6
        
        for indices in difficulties.values():
            total_combinations -= len(indices) * (len(indices) - 1) * (len(indices) - 2) // 6
        
        print(total_combinations)

# Input parsing
t = int(input())
testcases = []
for _ in range(t):
    n = int(input())
    problems = [[int(x) for x in input().split()] for _ in range(n)]
    testcases.append([n] + problems)

# Call the function to count problem combinations
count_problem_combinations(t, testcases)