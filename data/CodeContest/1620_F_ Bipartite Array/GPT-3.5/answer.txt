def find_bipartite_array(t, test_cases):
    def solve(n, p):
        a = [0] * n
        stack = []
        for i in range(n):
            while stack and stack[-1][0] < p[i]:
                _, idx = stack.pop()
                a[idx] = -p[i]
                a[i] = p[i]
            stack.append((p[i], i))
        
        for _, idx in stack:
            a[idx] = -p[idx]

        return a if all(a) else None

    results = []
    for _ in range(t):
        n, p = test_cases[_]
        result = solve(n, p)
        if result:
            results.append(("YES", " ".join(map(str, result))))
        else:
            results.append(("NO", ""))

    return results

# Sample Input
t = 4
test_cases = [
    (3, [1, 2, 3]),
    (6, [1, 3, 2, 6, 5, 4]),
    (4, [4, 1, 3, 2]),
    (8, [3, 2, 1, 6, 7, 8, 5, 4])
]

# Get the results
results = find_bipartite_array(t, test_cases)

# Output the results
for res in results:
    print(res[0])
    if res[0] == "YES":
        print(res[1])