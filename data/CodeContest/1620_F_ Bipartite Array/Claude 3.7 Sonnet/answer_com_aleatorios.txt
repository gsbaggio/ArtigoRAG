#include <iostream>
#include <vector>
#include <queue>
using namespace std;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    
    int t;
    cin >> t;
    
    while (t--) {
        int n;
        cin >> n;
        vector<int> p(n);
        for (int i = 0; i < n; i++) {
            cin >> p[i];
        }
        
        // Create graph implicitly using BFS
        vector<int> color(n, -1); // -1: uncolored, 0/1: colors
        bool isBipartite = true;
        
        for (int start = 0; start < n && isBipartite; start++) {
            if (color[start] != -1) continue;
            
            queue<int> q;
            q.push(start);
            color[start] = 0;
            
            while (!q.empty() && isBipartite) {
                int u = q.front();
                q.pop();
                
                for (int v = 0; v < n; v++) {
                    if ((u < v && p[u] > p[v]) || (v < u && p[v] > p[u])) {
                        if (color[v] == -1) {
                            color[v] = 1 - color[u];
                            q.push(v);
                        } else if (color[v] == color[u]) {
                            isBipartite = false;
                            break;
                        }
                    }
                }
            }
        }
        
        if (!isBipartite) {
            cout << "NO\n";
        } else {
            cout << "YES\n";
            for (int i = 0; i < n; i++) {
                cout << (color[i] == 0 ? p[i] : -p[i]) << " ";
            }
            cout << "\n";
        }
    }
    
    return 0;
}