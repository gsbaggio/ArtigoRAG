def solve():
    n = int(input())
    p = list(map(int, input().split()))

    def is_bipartite(arr):
        adj = [[] for _ in range(n)]
        for i in range(n):
            for j in range(i + 1, n):
                if arr[i] > arr[j]:
                    adj[i].append(j)
                    adj[j].append(i)

        color = [-1] * n
        
        def bfs(start_node):
            color[start_node] = 0
            queue = [start_node]
            
            while queue:
                u = queue.pop(0)
                
                for v in adj[u]:
                    if color[v] == -1:
                        color[v] = 1 - color[u]
                        queue.append(v)
                    elif color[v] == color[u]:
                        return False
            return True

        for i in range(n):
            if color[i] == -1:
                if not bfs(i):
                    return False
        return True

    
    for i in range(1 << n):
        a = []
        for j in range(n):
            if (i >> j) & 1:
                a.append(p[j])
            else:
                a.append(-p[j])
        
        if is_bipartite(a):
            print("YES")
            print(*a)
            return
    
    print("NO")

t = int(input())
for _ in range(t):
    solve()