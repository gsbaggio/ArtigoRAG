#include <iostream>
#include <vector>
#include <stack>
#include <algorithm>
#include <climits>
using namespace std;
typedef long long lint;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);

    int n, m_val;
    cin >> n >> m_val;
    vector<lint> a(n);
    for (int i = 0; i < n; i++) {
        cin >> a[i];
    }

    vector<vector<lint>> dp(n, vector<lint>(m_val + 1, LLONG_MIN));

    for (int i = 0; i < n; i++) {
        dp[i][1] = (m_val - 1) * a[i];
    }

    for (int k = 2; k <= m_val; k++) {
        vector<lint> best(n, LLONG_MIN);
        stack<int> st;
        for (int i = 0; i < n; i++) {
            while (!st.empty() && a[st.top()] > a[i]) {
                best[i] = max(best[i], best[st.top()]);
                st.pop();
            }
            if (st.empty()) {
                if (dp[i][k - 1] != LLONG_MIN) {
                    best[i] = max(best[i], dp[i][k - 1] - 2 * a[i] * (k - 1));
                }
            } else {
                best[i] = max(best[i], best[st.top()]);
                if (dp[i][k - 1] != LLONG_MIN) {
                    lint candidate = dp[i][k - 1] - 2 * a[i] * (k - 1) + 2 * a[st.top()] * (k - 1);
                    best[i] = max(best[i], candidate);
                }
            }
            st.push(i);
            if (best[i] != LLONG_MIN) {
                dp[i][k] = best[i] + (m_val - 1) * a[i];
            }
        }
    }

    lint ans = LLONG_MIN;
    for (int i = 0; i < n; i++) {
        if (dp[i][m_val] > ans) {
            ans = dp[i][m_val];
        }
    }
    cout << ans << endl;
}