#include <bits/stdc++.h>
using namespace std;

struct Sequence {
    int balance;
    bool start_open;
    bool end_close;
};

int main() {
    int n;
    cin >> n;
    
    vector<Sequence> sequences(n);
    
    for (int i = 0; i < n; ++i) {
        string s;
        cin >> s;
        
        int balance = 0;
        for (char c : s) {
            if (c == '(') balance++;
            else balance--;
        }
        
        sequences[i].balance = balance;
        sequences[i].start_open = (s[0] == '(');
        sequences[i].end_close = (s.back() == ')');
    }
    
    // Sort sequences by balance descending, then by start_open and end_close
    sort(sequences.begin(), sequences.end(), [](const Sequence& a, const Sequence& b) {
        if (a.balance != b.balance) return a.balance > b.balance;
        if (a.start_open != b.start_open) return a.start_open > b.start_open;
        return a.end_close > b.end_close;
    });
    
    int current_balance = 0;
    int valid_prefixes = 0;
    
    for (const Sequence& seq : sequences) {
        if (seq.start_open && current_balance == 0) {
            // If the sequence starts with '(' and current balance is zero, it forms a new valid RBS
            valid_prefixes++;
        }
        current_balance += seq.balance;
        if (current_balance >= 0) {
            // If the current balance is non-negative, it means the prefix is a valid RBS
            valid_prefixes++;
        } else {
            // If the current balance becomes negative, no further prefixes can be valid RBS
            break;
        }
    }
    
    cout << valid_prefixes;
    return 0;
}