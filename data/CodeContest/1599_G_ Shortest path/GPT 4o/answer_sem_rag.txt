import math

def distance(p1, p2):
    """Calculate the Euclidean distance between two points."""
    return math.sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2)

def solve():
    import sys
    input = sys.stdin.read
    data = input().split()
    
    N, K = int(data[0]), int(data[1]) - 1
    points = [(int(data[i * 2 + 2]), int(data[i * 2 + 3])) for i in range(N)]
    
    # Find the off-line point
    base = points[0]
    collinear = []
    off_line = None
    
    for i in range(1, N):
        if len(collinear) < 2:
            collinear.append(points[i])
        else:
            # Check if the point is collinear using the cross product
            x1, y1 = collinear[0][0] - base[0], collinear[0][1] - base[1]
            x2, y2 = points[i][0] - base[0], points[i][1] - base[1]
            if x1 * y2 == x2 * y1:
                collinear.append(points[i])
            else:
                off_line = points[i]
    
    if off_line is None:
        off_line = collinear.pop()
    
    # Sort collinear points by their projection on the line
    collinear.sort(key=lambda p: (p[0] - base[0])**2 + (p[1] - base[1])**2)
    
    # Get the extreme points of the line
    line_start = collinear[0]
    line_end = collinear[-1]
    
    # Calculate all possible paths
    start_point = points[K]
    d1 = distance(start_point, off_line) + distance(off_line, line_start) + distance(line_start, line_end)
    d2 = distance(start_point, off_line) + distance(off_line, line_end) + distance(line_end, line_start)
    d3 = distance(start_point, line_start) + distance(line_start, off_line) + distance(off_line, line_end)
    d4 = distance(start_point, line_end) + distance(line_end, off_line) + distance(off_line, line_start)
    
    # Output the minimum distance
    print(f"{min(d1, d2, d3, d4):.6f}")