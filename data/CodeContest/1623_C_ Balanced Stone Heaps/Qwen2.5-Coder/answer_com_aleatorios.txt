def max_stones_in_smallest_heap():
    import sys
    input = sys.stdin.read
    data = input().split()
    
    index = 0
    t = int(data[index])
    index += 1
    
    results = []
    
    for _ in range(t):
        n = int(data[index])
        index += 1
        h = list(map(int, data[index:index+n]))
        index += n
        
        # Initialize dp array
        dp = [0] * n
        
        # Fill dp array from the end to the beginning
        for i in range(n-3, -1, -1):
            d = h[i] // 3
            dp[i] = max(dp[i+1], d + dp[i+2])
        
        # Calculate new sizes of the first two heaps
        new_h0 = h[0] + dp[2]
        new_h1 = h[1] + dp[3]
        
        # Determine the maximum number of stones in the smallest heap
        smallest_heap_max_stones = min(new_h0, new_h1, h[2])
        results.append(smallest_heap_max_stones)
    
    # Print all results
    for result in results:
        print(result)

# Call the function to process input and print results
max_stones_in_smallest_heap()