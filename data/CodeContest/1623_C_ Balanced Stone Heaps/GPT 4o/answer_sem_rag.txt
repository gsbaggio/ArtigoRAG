def max_min_heap(t, test_cases):
    results = []
    
    for case in test_cases:
        n, h = case
        low, high = 0, max(h)
        
        while low < high:
            mid = (low + high + 1) // 2
            feasible = True
            heap = h[:]
            
            for i in range(n - 1, 1, -1):
                if heap[i] < mid:
                    feasible = False
                    break
                
                surplus = heap[i] - mid
                d = surplus // 3
                heap[i - 1] += d
                heap[i - 2] += 2 * d
            
            if feasible and heap[0] >= mid and heap[1] >= mid:
                low = mid
            else:
                high = mid - 1
        
        results.append(low)
    
    return results


# Input Reading and Output
if __name__ == "__main__":
    import sys
    input = sys.stdin.read
    data = input().split()
    
    t = int(data[0])
    test_cases = []
    idx = 1
    
    for _ in range(t):
        n = int(data[idx])
        idx += 1
        h = list(map(int, data[idx:idx + n]))
        idx += n
        test_cases.append((n, h))
    
    results = max_min_heap(t, test_cases)
    sys.stdout.write("\n".join(map(str, results)) + "\n")