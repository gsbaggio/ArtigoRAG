def find_perfect_coloring_and_cut(matrix, n, m):
    # Iterate through each possible column k
    for k in range(1, m):
        # Initialize max_left and min_right arrays
        max_left = [float('-inf')] * n
        min_right = [float('inf')] * n
        
        # Determine max_left and min_right for each row
        for i in range(n):
            max_left[i] = max(matrix[i][:k])
            min_right[i] = min(matrix[i][k:])
        
        # Check for a valid coloring
        red_rows = []
        blue_rows = []
        for i in range(n):
            if max_left[i] < min_right[i]:
                red_rows.append(i)
            elif min_right[i] < max_left[i]:
                blue_rows.append(i)
        
        # Ensure there is at least one red row and one blue row
        if red_rows and blue_rows:
            # Create the coloring string
            coloring = ['B'] * n
            for i in red_rows:
                coloring[i] = 'R'
            
            return "YES", ''.join(coloring), k
    
    return "NO", "", 0

# Read input
import sys
input = sys.stdin.read().splitlines()

t = int(input[0])
index = 1
results = []

for _ in range(t):
    n, m = map(int, input[index].split())
    matrix = []
    for i in range(index + 1, index + 1 + n):
        matrix.append(list(map(int, input[i].split())))
    
    result = find_perfect_coloring_and_cut(matrix, n, m)
    results.append(result)
    
    index += 1 + n

# Print results
for result in results:
    if result[0] == "NO":
        print("NO")
    else:
        print("YES")
        print(result[1])
        print(result[2])