def solve():
    import sys
    input = sys.stdin.read
    data = input().split()
    
    t = int(data[0])
    idx = 1
    results = []
    
    for _ in range(t):
        n, m = map(int, data[idx:idx+2])
        idx += 2
        matrix = []
        for i in range(n):
            matrix.append(list(map(int, data[idx:idx+m])))
            idx += m
        
        # Transpose the matrix for easier column-wise operations
        transposed = list(zip(*matrix))
        
        # Try to find a valid column k
        found = False
        for k in range(1, m):
            # Get the max of the left part and min of the right part for each row
            left_max = [max(row[:k]) for row in matrix]
            right_min = [min(row[k:]) for row in matrix]
            
            # Sort rows by left_max
            sorted_rows = sorted(range(n), key=lambda i: left_max[i])
            
            # Check if we can split into two groups
            red_max = float('-inf')
            blue_min = float('inf')
            
            for split in range(1, n):
                # Group 1 (Red): rows[0:split]
                # Group 2 (Blue): rows[split:]
                red_max = max(red_max, left_max[sorted_rows[split-1]])
                blue_min = min(blue_min, left_max[sorted_rows[split]])
                
                if red_max < blue_min:
                    # Check the right matrix condition
                    red_min_right = min(right_min[sorted_rows[i]] for i in range(split))
                    blue_max_right = max(right_min[sorted_rows[i]] for i in range(split, n))
                    
                    if red_min_right > blue_max_right:
                        # Valid split found
                        coloring = ['B'] * n
                        for i in range(split):
                            coloring[sorted_rows[i]] = 'R'
                        results.append(f"YES\n{''.join(coloring)} {k}")
                        found = True
                        break
            
            if found:
                break
        
        if not found:
            results.append("NO")
    
    sys.stdout.write("\n".join(results) + "\n")