CURRENT QUESTION:
There are three sticks with integer lengths l_1, l_2 and l_3.

You are asked to break exactly one of them into two pieces in such a way that: 

  * both pieces have positive (strictly greater than 0) integer length; 
  * the total length of the pieces is equal to the original length of the stick; 
  * it's possible to construct a rectangle from the resulting four sticks such that each stick is used as exactly one of its sides. 



A square is also considered a rectangle.

Determine if it's possible to do that.

Input

The first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of testcases.

The only line of each testcase contains three integers l_1, l_2, l_3 (1 ≤ l_i ≤ 10^8) — the lengths of the sticks.

Output

For each testcase, print "YES" if it's possible to break one of the sticks into two pieces with positive integer length in such a way that it's possible to construct a rectangle from the resulting four sticks. Otherwise, print "NO".

You may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES are all recognized as a positive answer).

Example

Input


4
6 1 5
2 5 2
2 4 2
5 5 4


Output


YES
NO
YES
YES

Note

In the first testcase, the first stick can be broken into parts of length 1 and 5. We can construct a rectangle with opposite sides of length 1 and 5.

In the second testcase, breaking the stick of length 2 can only result in sticks of lengths 1, 1, 2, 5, which can't be made into a rectangle. Breaking the stick of length 5 can produce results 2, 3 or 1, 4 but neither of them can't be put into a rectangle.

In the third testcase, the second stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 2 (which is a square).

In the fourth testcase, the third stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 5.

EXAMPLE QUESTIONS:
Example question 1:
Name: p02265 Doubly Linked List
Tags: ['']
Description: Your task is to implement a double linked list.

Write a program which performs the following operations:

* insert x: insert an element with key x into the front of the list.
* delete x: delete the first element which has the key of x from the list. If there is not such element, you need not do anything.
* deleteFirst: delete the first element from the list.
* deleteLast: delete the last element from the list.

Notes

Template in C -->

Constraints

* The number of operations ≤ 2,000,000
* The number of delete operations ≤ 20
* 0 ≤ value of a key ≤ 109
* The number of elements in the list does not exceed 106
* For a delete, deleteFirst or deleteLast operation, there is at least one element in the list.

Input

The input is given in the following format:

n
command1
command2
...
commandn


In the first line, the number of operations n is given. In the following n lines, the above mentioned operations are given in the following format:

* insert x
* delete x
* deleteFirst
* deleteLast

Output

Print all the element (key) in the list after the given operations. Two consequtive keys should be separated by a single space.

Examples

Input

7
insert 5
insert 2
insert 3
insert 1
delete 3
insert 6
delete 5


Output

6 1 2


Input

9
insert 5
insert 2
insert 3
insert 1
delete 3
insert 6
delete 5
deleteFirst
deleteLast


Output

1
Difficulty: 0
Solutions: #include <bits/stdc++.h>
using namespace std;

int main(){
    int n, c; cin >> n;
    string s;
    list<int> l;
    for(int i=0; i<n; i++){
        cin >> s;
        if(s =="insert"){
            cin >> c;
            l.push_front(c);
        }else if(s=="delete"){
            cin >> c;
            for (list<int>::iterator it=l.begin(); it!=l.end(); it++) {
                if( (*it) == c){
                    l.erase(it);
                    break;
                }
            }
        }else if(s=="deleteFirst"){
            l.pop_front();
        }else{
            l.pop_back();
        }
    }
    
    for(list<int>::iterator i=l.begin(); i!=l.end(); ){
    	cout << *i;
    	if(++i==l.end()) cout << endl;
    	else cout << " ";
    }
    
    return 0;
}



INSTRUCTIONS:
Solve the current question.
Provide:
1. A complete and efficient code solution, optimized for both time and space complexity.
2. A detailed explanation of the solution, including:
   - The intuition behind the approach;
   - Time and space complexity;
   - Important considerations about the algorithm.
3. You can use the example questions as general references for coding patterns and structure, but solve the current problem independently.
4. Don't use any external libraries. Any language is accepted.