#include <bits/stdc++.h>
using namespace std;

int main(){
    int n, m;
    cin >> n >> m;
    string a, b;
    cin >> a >> b;
    
    // Precompute the Hamming distance for each substring of length m in a
    vector<int> dist(n - m + 1);
    for(int i = 0; i < n - m + 1; i++){
        int d = 0;
        for(int j = 0; j < m; j++){
            if(a[i + j] != b[j]){
                d++;
            }
        }
        dist[i] = d;
    }
    
    // Initialize the DP table
    vector<vector<int>> dp(2, vector<int>(n - m + 2, 1e9));
    dp[0][0] = 0;
    
    // Fill the DP table
    for(int i = 0; i < n - m + 1; i++){
        int curr = i % 2;
        int next = (i + 1) % 2;
        for(int j = 0; j <= i + 1; j++){
            dp[next][j] = dp[curr][j]; // Do not include a[i:i+m] as a match
            if(j > 0){
                dp[next][j] = min(dp[next][j], dp[curr][j - 1] + dist[i]); // Include a[i:i+m] as a match
            }
        }
    }
    
    // Output the results
    for(int k = 0; k <= n - m + 1; k++){
        if(dp[(n - m + 1) % 2][k] == 1e9){
            cout << "-1 ";
        }
        else{
            cout << dp[(n - m + 1) % 2][k] << " ";
        }
    }
    cout << "\n";
    
    return 0;
}