#include <iostream>
#include <string>
#include <vector>

using namespace std;
typedef long long ll;

string solve(int n, int k, ll x, string s) {
    // Find positions of all asterisks
    vector<int> positions;
    for (int i = 0; i < n; i++) {
        if (s[i] == '*') {
            positions.push_back(i);
        }
    }
    
    int ast_count = positions.size();
    x--; // Convert to 0-indexed
    
    // Calculate b-counts for each asterisk
    vector<int> b_counts(ast_count, 0);
    for (int i = ast_count - 1; i >= 0; i--) {
        b_counts[i] = x % (k + 1);
        x /= (k + 1);
    }
    
    // Build the result string
    string result = s;
    for (int i = 0; i < ast_count; i++) {
        int pos = positions[i];
        string replacement = "";
        for (int j = 0; j < b_counts[i]; j++) {
            replacement += 'b';
        }
        result.replace(result.find('*'), 1, replacement);
    }
    
    return result;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    
    int t;
    cin >> t;
    
    while (t--) {
        int n, k;
        ll x;
        string s;
        
        cin >> n >> k >> x;
        cin >> s;
        
        cout << solve(n, k, x, s) << endl;
    }
    
    return 0;
}