#include <iostream>
#include <vector>
#include <map>
using namespace std;

void solve() {
    int n;
    cin >> n;
    
    vector<long long> a(n);
    long long sum = 0;
    
    for (int i = 0; i < n; i++) {
        cin >> a[i];
        sum += a[i];
    }
    
    // The mean must remain the same after removing two elements
    // If mean = k, then (sum - a[i] - a[j])/(n-2) = k
    // This simplifies to a[i] + a[j] = 2*k = 2*(sum/n)
    
    // For the mean to remain integer-divisible, this must be true:
    // 2*sum must be divisible by n
    if ((2 * sum) % n != 0) {
        cout << 0 << "\n";
        return;
    }
    
    long long target = (2 * sum) / n;
    long long count = 0;
    
    // Count pairs where a[i] + a[j] = target and i < j
    map<long long, int> freq;
    for (int i = 0; i < n; i++) {
        count += freq[target - a[i]];
        freq[a[i]]++;
    }
    
    cout << count << "\n";
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    
    int t;
    cin >> t;
    
    while (t--) {
        solve();
    }
    
    return 0;
}