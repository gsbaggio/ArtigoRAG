CURRENT QUESTION:
You are given n dominoes. Each domino has a left and a right cell. Each cell can be colored either black or white. Some cells are already colored, while some aren't yet.

The coloring is said to be valid if and only if it is possible to rearrange the dominoes in some order such that for each 1 ≤ i ≤ n the color of the right cell of the i-th domino is different from the color of the left cell of the ((i mod n)+1)-st domino. 

Note that you can't rotate the dominoes, so the left cell always remains the left cell, and the right cell always remains the right cell.

Count the number of valid ways to color the yet uncolored cells of dominoes. Two ways are considered different if there is a cell that is colored white in one way and black in the other. In particular, colorings BW WB and WB BW different (and both invalid).

As this number can be very big, output it modulo 998 244 353.

Input

The first line of the input contains a single integer n (1 ≤ n ≤ 10^5) — the number of dominoes.

The next n lines describe dominoes. Each line contains two characters which represent the left and the right cell. Character B means that the corresponding cell is black, character W means that the corresponding cell is white, and ? means that the cell is yet to be colored. 

Output

Print a single integer — the answer to the problem.

Examples

Input


1
?W


Output


1


Input


2
??
W?


Output


2


Input


4
BB
??
W?
??


Output


10

Note

In the first test case, there is only one domino, and we need the color of its right cell to be different from the color of its left cell. There is only one way to achieve this.

In the second test case, there are only 2 such colorings:

BB WW and WB WB.

EXAMPLE QUESTIONS:
Example question 1:
Name: p00052 Factorial II
Tags: ['']
Description: n! = n × (n − 1) × (n − 2) × ... × 3 × 2 × 1

Is called the factorial of n. For example, the factorial of 12

12! = 12 x 11 x 10 x 9 x 8 x 7 x 6 x 5 x 4 x 3 x 2 x 1 = 479001600

And there are two consecutive 0s at the end.

Write a program that inputs the integer n and outputs the number of consecutive 0s at the end of n !. However, n is a positive integer less than or equal to 20000.



Input

Multiple data are given. Each piece of data is given n (n ≤ 20000) on one line. When n is 0, it is the last input.

The number of data does not exceed 20.

Output

For each data, output the number of 0s that are consecutively arranged at the end of n! On one line.

Example

Input

2
12
10000
0


Output

0
2
2499
Difficulty: 0
Solutions: #include <iostream>
int main(void){
	int n,c;
	while (true){
		std::cin>>n;
		if (n==0) break;
		c=0;
		for (;0<n;n/=5,c+=n);
		std::cout<<c<<"\n";
	}
} 


INSTRUCTIONS:
Solve the current question.
Provide:
1. A complete and efficient code solution, optimized for both time and space complexity.
2. A detailed explanation of the solution, including:
   - The intuition behind the approach;
   - Time and space complexity;
   - Important considerations about the algorithm.
3. You can use the example questions as general references for coding patterns and structure, but solve the current problem independently.
4. Don't use any external libraries. Any language is accepted.