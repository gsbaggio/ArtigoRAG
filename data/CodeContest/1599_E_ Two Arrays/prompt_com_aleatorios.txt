CURRENT QUESTION:
You are given two integer arrays of length N, A1 and A2. You are also given Q queries of 4 types: 

1 k l r x: set Ak_i:=min(Ak_i, x) for each l ≤ i ≤ r.

2 k l r x: set Ak_i:=max(Ak_i, x) for each l ≤ i ≤ r.

3 k l r x: set Ak_i:=Ak_i+x for each l ≤ i ≤ r.

4 l r: find the (∑_{i=l}^r F(A1_i+A2_i)) \% (10^9+7) where F(k) is the k-th Fibonacci number (F(0)=0, F(1)=1, F(k)=F(k-1)+F(k-2)), and x \% y denotes the remainder of the division of x by y.

You should process these queries and answer each query of the fourth type.

Input

The first line contains two integers N and Q. (1 ≤ N, Q ≤ 5 × 10^4) 

The second line contains N integers, array A1_1, A1_2, ... A1_N. (0 ≤ A1_i ≤ 10^6)

The third line contains N integers, array A2_1, A2_2, ... A2_N. (0 ≤ A2_i ≤ 10^6)

The next Q lines describe the queries. Each line contains 5 or 3 integers, where the first integer denotes the type of the query. (k ∈ \{1, 2\}, 1 ≤ l ≤ r ≤ N)

For queries of type 1 and 2, 0 ≤ x ≤ 10^9 holds.

For queries of type 3, −10^6 ≤ x ≤ 10^6 holds.

It is guaranteed that after every query each number in arrays A1 and A2 will be nonnegative. 

Output

Print the answer to each query of the fourth type, in separate lines. 

Examples

Input


3 4
1 0 2
2 1 0
4 1 3
3 2 2 2 3
1 1 1 3 0
4 1 3


Output


4
4


Input


5 4
1 3 5 3 2
4 2 1 3 3
4 1 3
4 2 5
2 1 2 4 6
4 2 4


Output


18
26
68

Note

In the first example: The answer for the first query is F(1 + 2) + F(0 + 1) + F(2 + 0) = F(3) + F(1) + F(2) = 2 + 1 + 1 = 4. After the second query, the array A2 changes to [2, 4, 0]. After the third query, the array A1 changes to [0, 0, 0]. The answer for the fourth query is F(0 + 2) + F(0 + 4) + F(0 + 0) = F(2) + F(4) + F(0) = 1 + 3 + 0 = 4. 

In the second example: The answer for the first query is F(1 + 4) + F(3 + 2) + F(5 + 1) = F(5) + F(5) + F(6) = 5 + 5 + 8 = 18. The answer for the second query is F(3 + 2) + F(5 + 1) + F(3 + 3) + F(2 + 3) = F(5) + F(6) + F(6) + F(5) = 5 + 8 + 8 + 5 = 26. After the third query, the array A1 changes to [1, 6, 6, 6, 2]. The answer for the fourth query is F(6 + 2) + F(6 + 1) + F(6 + 3) = F(8) + F(7) + F(9) = 21 + 13 + 34 = 68. 

EXAMPLE QUESTIONS:
Example question 1:
Name: 1295_E. Permutation Separation
Tags: ['data structures', 'divide and conquer']
Description: You are given a permutation p_1, p_2, ... , p_n (an array where each integer from 1 to n appears exactly once). The weight of the i-th element of this permutation is a_i.

At first, you separate your permutation into two non-empty sets — prefix and suffix. More formally, the first set contains elements p_1, p_2, ... , p_k, the second — p_{k+1}, p_{k+2}, ... , p_n, where 1 ≤ k < n.

After that, you may move elements between sets. The operation you are allowed to do is to choose some element of the first set and move it to the second set, or vice versa (move from the second set to the first). You have to pay a_i dollars to move the element p_i.

Your goal is to make it so that each element of the first set is less than each element of the second set. Note that if one of the sets is empty, this condition is met.

For example, if p = [3, 1, 2] and a = [7, 1, 4], then the optimal strategy is: separate p into two parts [3, 1] and [2] and then move the 2-element into first set (it costs 4). And if p = [3, 5, 1, 6, 2, 4], a = [9, 1, 9, 9, 1, 9], then the optimal strategy is: separate p into two parts [3, 5, 1] and [6, 2, 4], and then move the 2-element into first set (it costs 1), and 5-element into second set (it also costs 1).

Calculate the minimum number of dollars you have to spend.

Input

The first line contains one integer n (2 ≤ n ≤ 2 ⋅ 10^5) — the length of permutation.

The second line contains n integers p_1, p_2, ... , p_n (1 ≤ p_i ≤ n). It's guaranteed that this sequence contains each element from 1 to n exactly once.

The third line contains n integers a_1, a_2, ... , a_n (1 ≤ a_i ≤ 10^9).

Output

Print one integer — the minimum number of dollars you have to spend.

Examples

Input


3
3 1 2
7 1 4


Output


4


Input


4
2 4 1 3
5 9 8 3


Output


3


Input


6
3 5 1 6 2 4
9 1 9 9 1 9


Output


2
Difficulty: 11
Solutions: #include <bits/stdc++.h>
using namespace std;
using lld = long long int;
using pii = pair<int, int>;
using pll = pair<lld, lld>;
using pli = pair<lld, int>;
using pil = pair<int, lld>;
int n, m;
lld ms[2 * 262144];
lld mt[2 * 262144];
pii a[200009];
pii b[200009];
void update(int dep, int ql, int qr, int ll, int rr, int v) {
  if (ql <= ll && rr <= qr) {
    mt[dep] += v;
    return;
  }
  if (qr < ll || rr < ql) return;
  update(dep * 2, ql, qr, ll, (ll + rr) / 2, v);
  update(dep * 2 + 1, ql, qr, (ll + rr) / 2 + 1, rr, v);
  ms[dep] = min(ms[dep * 2] + mt[dep * 2], ms[dep * 2 + 1] + mt[dep * 2 + 1]);
}
lld getms(int dep, int ql, int qr, int ll, int rr) {
  if (ql <= ll && rr <= qr) {
    return ms[dep] + mt[dep];
  }
  if (qr < ll || rr < ql) return 1000000000000009LL;
  lld p = getms(dep * 2, ql, qr, ll, (ll + rr) / 2);
  lld q = getms(dep * 2 + 1, ql, qr, (ll + rr) / 2 + 1, rr);
  return min(p, q) + mt[dep];
}
int main() {
  int i, j, k;
  int t = 1, tv = 0;
  while (t--) {
    scanf("%d", &n);
    for (i = 0; i < n; i++) {
      scanf("%d", &a[i].first);
    }
    for (i = 0; i < n; i++) {
      scanf("%d", &a[i].second);
    }
    for (i = 0; i < n; i++) {
      b[a[i].first - 1] = pii(i, a[i].second);
    }
    for (i = 0; i < n; i++) {
      ms[i + 262144 + 1] = ms[i + 262144] + a[i].second;
    }
    for (; i + 1 < 262144; i++) {
      ms[i + 262144 + 1] = ms[i + 262144];
    }
    for (i = 262144 - 1; i > 0; i--) {
      ms[i] = min(ms[i * 2], ms[i * 2 + 1]);
    }
    lld res = getms(1, 1, n - 1, 0, 262144 - 1);
    for (i = 0; i < n; i++) {
      j = b[i].first;
      update(1, 0, j, 0, 262144 - 1, b[i].second);
      update(1, j + 1, 262144 - 1, 0, 262144 - 1, -b[i].second);
      lld cur = getms(1, 1, n - 1, 0, 262144 - 1);
      res = min(res, cur);
    }
    printf("%lld\n", res);
  }
}


Example question 2:
Name: 902_D. GCD of Polynomials
Tags: ['constructive algorithms', 'math']
Description: Suppose you have two polynomials <image> and <image>. Then polynomial <image> can be uniquely represented in the following way:

<image>

This can be done using [long division](https://en.wikipedia.org/wiki/Polynomial_long_division). Here, <image> denotes the degree of polynomial P(x). <image> is called the remainder of division of polynomial <image> by polynomial <image>, it is also denoted as <image>. 

Since there is a way to divide polynomials with remainder, we can define Euclid's algorithm of finding the greatest common divisor of two polynomials. The algorithm takes two polynomials <image>. If the polynomial <image> is zero, the result is <image>, otherwise the result is the value the algorithm returns for pair <image>. On each step the degree of the second argument decreases, so the algorithm works in finite number of steps. But how large that number could be? You are to answer this question. 

You are given an integer n. You have to build two polynomials with degrees not greater than n, such that their coefficients are integers not exceeding 1 by their absolute value, the leading coefficients (ones with the greatest power of x) are equal to one, and the described Euclid's algorithm performs exactly n steps finding their greatest common divisor. Moreover, the degree of the first polynomial should be greater than the degree of the second. By a step of the algorithm we mean the transition from pair <image> to pair <image>. 

Input

You are given a single integer n (1 ≤ n ≤ 150) — the number of steps of the algorithm you need to reach.

Output

Print two polynomials in the following format.

In the first line print a single integer m (0 ≤ m ≤ n) — the degree of the polynomial. 

In the second line print m + 1 integers between  - 1 and 1 — the coefficients of the polynomial, from constant to leading. 

The degree of the first polynomial should be greater than the degree of the second polynomial, the leading coefficients should be equal to 1. Euclid's algorithm should perform exactly n steps when called using these polynomials.

If there is no answer for the given n, print -1.

If there are multiple answer, print any of them.

Examples

Input

1


Output

1
0 1
0
1


Input

2


Output

2
-1 0 1
1
0 1

Note

In the second example you can print polynomials x2 - 1 and x. The sequence of transitions is

(x2 - 1, x) → (x, - 1) → ( - 1, 0).

There are two steps in it.
Difficulty: 10
Solutions: class polynomial:
    def __init__(self, data):
        self.data = data
    
    def __lshift__(self, x):
        return polynomial([0] * x + self.data)
    
    def __len__(self):
        return len(self.data)
    
    def __sub__(self, other):
        newData = [y - x for y, x in zip(self.data, other.data + [0] * 1000)]
        while len(newData) > 0 and newData[-1] == 0:
            del newData[-1]
        return polynomial(newData)
    
    def __add__(self, other):
        newData = [(y + x) % 2 for y, x in zip(self.data + [0] * 1000, other.data + [0] * 1000)]
        while len(newData) > 0 and newData[-1] == 0:
            del newData[-1]
        return polynomial(newData)
    
    def __mul__(self, amt):
        return polynomial([x * amt for x in self.data])
    
    def __getitem__(self, idx):
        return self.data[idx]
    
    def __mod__(self, other):
        tmp = self
        times = 0
        while len(tmp) >= len(other):
            times += 1
            if times > 1000:
                print(*tmp.data)
                print(*other.data)
                exit(0)
            tmp = tmp - (other << (len(tmp) - len(other))) * (tmp[-1] // other[-1])
        return tmp

def gcdSteps(p1, p2, steps=0):
    # print(*p1.data)
    if len(p1) == 0 or len(p2) == 0:
        return steps
    else:
        return gcdSteps(p2, p1 % p2, steps + 1)

a, b = polynomial([0, 1]), polynomial([1])
# x = b + (a << 1)
for i in range(int(input()) - 1):
    # print(gcdSteps(a, b))
    if gcdSteps(a, b) != i + 1:
        print("error", i)
    a, b = b + (a << 1), a
    
print(len(a) - 1)
print(*a.data)
print(len(b) - 1)
print(*b.data)
# print(gcdSteps(x, a))

Example question 3:
Name: logically-correct
Tags: []
Description: Tired of playing Counter strike at every fest, well we can't do anything about it but we can sure give you a new game to play regardless of the fact that it ain't anything like GTA V or Mad Max but it sure can get you one step closer to glory you are entitled for.   

So the rules are simple we would provide you with first(A) and second(B) number of the series and the rest you have to figure out by the given formula. To simplify it we will give you the first and second number of the series and will ask you to calculate the Nth number of that series.  

To calculate I(n+2) =(I(n+1))^2 +I(n) 
So, if the first two terms of the series are 0 and 1: 
the third term = 1^2 + 0 = 1
fourth term = 1^2 + 1 = 2 
fifth term = 2^2 + 1 = 5 
... And so on.

Input format:
Three spaced integer. First is A, second is B and third is Nth number you’ve to calculate.

Output format:
One integer i.e the Nth number of the series when the first and second number of the series A and B are given.

Constraints:
A ≥ 0
B ≥ 0
0 < N < 9,223,372,036,854,775,807

SAMPLE INPUT
0 1 5

SAMPLE OUTPUT
5
Difficulty: 0
Solutions: '''
# Read input from stdin and provide input before running code

name = raw_input('What is your name?\n')
print 'Hi, %s.' % name
'''
#print 'Hello World!'
a,b,c=map(int,raw_input().split())
for i in range(2,c):
	d=pow(b,2)+a
	a=b
	b=d
print d


INSTRUCTIONS:
Solve the current question.
Provide:
1. A complete and efficient code solution, optimized for both time and space complexity.
2. A detailed explanation of the solution, including:
   - The intuition behind the approach;
   - Time and space complexity;
   - Important considerations about the algorithm.
3. You can use the example questions as general references for coding patterns and structure, but solve the current problem independently.
4. Don't use any external libraries. Any language is accepted.