#include <iostream>
#include <vector>
#include <queue>
using namespace std;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    
    int t;
    cin >> t;
    
    while (t--) {
        int n, m;
        cin >> n >> m;
        
        vector<string> grid(n);
        int labX = -1, labY = -1;
        
        // Read grid and find lab position
        for (int i = 0; i < n; i++) {
            cin >> grid[i];
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == 'L') {
                    labX = i;
                    labY = j;
                }
            }
        }
        
        // Mark reachable cells using DP
        vector<vector<bool>> canReach(n, vector<bool>(m, false));
        canReach[labX][labY] = true;
        
        bool changed;
        do {
            changed = false;
            
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < m; j++) {
                    if (grid[i][j] == '#' || canReach[i][j]) continue;
                    
                    // Count valid neighbors and neighbors that can reach the lab
                    int validCount = 0;
                    int reachCount = 0;
                    
                    // Check all four directions
                    if (i > 0 && grid[i-1][j] != '#') {
                        validCount++;
                        if (canReach[i-1][j]) reachCount++;
                    }
                    if (i < n-1 && grid[i+1][j] != '#') {
                        validCount++;
                        if (canReach[i+1][j]) reachCount++;
                    }
                    if (j > 0 && grid[i][j-1] != '#') {
                        validCount++;
                        if (canReach[i][j-1]) reachCount++;
                    }
                    if (j < m-1 && grid[i][j+1] != '#') {
                        validCount++;
                        if (canReach[i][j+1]) reachCount++;
                    }
                    
                    // Key insight: If all valid moves except at most one lead to cells
                    // that can reach the lab, then we can force the robot to a cell
                    // that reaches the lab
                    if (validCount > 0 && validCount - reachCount <= 1) {
                        canReach[i][j] = true;
                        changed = true;
                    }
                }
            }
        } while (changed);
        
        // Update grid
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == '.' && canReach[i][j]) {
                    grid[i][j] = '+';
                }
            }
            cout << grid[i];
        }
    }
    
    return 0;
}