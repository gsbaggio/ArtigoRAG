#include <bits/stdc++.h>
using namespace std;

const int MAXN = 100005;
const int ALPHABET_SIZE = 26;

struct TrieNode {
    int count;
    TrieNode* children[ALPHABET_SIZE];
    TrieNode() : count(0) {
        for (int i = 0; i < ALPHABET_SIZE; i++) children[i] = nullptr;
    }
};

class Trie {
public:
    TrieNode* root;
    Trie() { root = new TrieNode(); }

    void insert(const string& s) {
        TrieNode* node = root;
        for (char c : s) {
            int idx = c - 'a';
            if (!node->children[idx]) node->children[idx] = new TrieNode();
            node = node->children[idx];
            node->count++;
        }
    }

    int query(const string& s) {
        TrieNode* node = root;
        for (char c : s) {
            int idx = c - 'a';
            if (!node->children[idx]) return 0;
            node = node->children[idx];
        }
        return node->count;
    }
};

vector<pair<int, char>> tree[MAXN];
int parent[MAXN][20], depth[MAXN];
char edgeToParent[MAXN];
string strings[MAXN];
Trie trie;

void dfs(int node, int par, int dep) {
    parent[node][0] = par;
    depth[node] = dep;
    for (auto& [child, c] : tree[node]) {
        if (child == par) continue;
        edgeToParent[child] = c;
        dfs(child, node, dep + 1);
    }
}

void preprocessLCA(int n) {
    for (int j = 1; (1 << j) < n; j++) {
        for (int i = 1; i <= n; i++) {
            if (parent[i][j - 1] != -1)
                parent[i][j] = parent[parent[i][j - 1]][j - 1];
        }
    }
}

int findLCA(int u, int v) {
    if (depth[u] < depth[v]) swap(u, v);
    int diff = depth[u] - depth[v];
    for (int i = 0; i < 20; i++) {
        if ((diff >> i) & 1) u = parent[u][i];
    }
    if (u == v) return u;
    for (int i = 19; i >= 0; i--) {
        if (parent[u][i] != parent[v][i]) {
            u = parent[u][i];
            v = parent[v][i];
        }
    }
    return parent[u][0];
}

string getPathString(int u, int v) {
    int lca = findLCA(u, v);
    string path;
    while (u != lca) {
        path += edgeToParent[u];
        u = parent[u][0];
    }
    string revPath;
    while (v != lca) {
        revPath += edgeToParent[v];
        v = parent[v][0];
    }
    reverse(revPath.begin(), revPath.end());
    return path + revPath;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int n, m, q;
    cin >> n >> m >> q;

    for (int i = 1; i < n; i++) {
        int u, v;
        char c;
        cin >> u >> v >> c;
        tree[u].emplace_back(v, c);
        tree[v].emplace_back(u, c);
    }

    for (int i = 1; i <= m; i++) {
        cin >> strings[i];
        trie.insert(strings[i]);
    }

    memset(parent, -1, sizeof(parent));
    dfs(1, -1, 0);
    preprocessLCA(n);

    while (q--) {
        int u, v, l, r;
        cin >> u >> v >> l >> r;
        string pathString = getPathString(u, v);
        int totalCount = 0;
        for (int i = l; i <= r; i++) {
            if (strings[i].find(pathString) != string::npos) totalCount++;
        }
        cout << totalCount << '\n';
    }

    return 0;
}