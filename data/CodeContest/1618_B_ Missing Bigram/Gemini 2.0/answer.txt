def solve():
    n = int(input())
    bigrams = input().split()
    
    def construct_words(bigrams):
        words = set()
        for i in range(len(bigrams) + 1):
            word = ""
            valid = True
            
            # Build the word from bigrams
            word += bigrams[0][0]
            word += bigrams[0][1]
            
            for j in range(1, len(bigrams)):
                if bigrams[j][0] == word[-1]:
                    word += bigrams[j][1]
                else:
                    valid = False
                    break
            
            if valid:
                words.add(word)
        return words

    def generate_all_possible_words(n, bigrams):
        possible_words = []
        
        # Start with the first bigram
        first_char = bigrams[0][0]
        
        # Construct a word by appending the second character of each bigram
        word = first_char
        for bigram in bigrams:
            if bigram[0] == word[-1]:
                word += bigram[1]
            else:
                # If the bigram doesn't fit, it's not a valid word
                return []
        
        # If the word is shorter than n, append the last character until it reaches n
        while len(word) < n:
            word += word[-1]
        
        # If the word is longer than n, truncate it
        if len(word) > n:
            word = word[:n]
        
        possible_words.append(word)
        
        return possible_words

    possible_words = generate_all_possible_words(n, bigrams)
    
    print(possible_words[0])

t = int(input())
for _ in range(t):
    solve()