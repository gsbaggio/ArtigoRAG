def reconstruct_words(test_cases):
    results = []
    for n, bigrams in test_cases:
        # Start with the first bigram
        word = bigrams[0]
        
        # Reconstruct the word by iterating through the bigrams
        for i in range(1, len(bigrams)):
            # If the last character of the current word matches the first character of the bigram, append the second character
            if word[-1] == bigrams[i][0]:
                word += bigrams[i][1]
            else:
                # If there's a mismatch, append the entire bigram
                word += bigrams[i]
        
        # If the word is shorter than n, append 'a' (or 'b') to ensure the length matches
        if len(word) < n:
            word += 'a'  # This ensures the word is of length n
        
        results.append(word)
    return results


# Input reading
if __name__ == "__main__":
    t = int(input())  # Number of test cases
    test_cases = []
    for _ in range(t):
        n = int(input())  # Length of the word
        bigrams = input().split()  # List of bigrams
        test_cases.append((n, bigrams))
    
    # Solve the problem
    results = reconstruct_words(test_cases)
    
    # Output the results
    for result in results:
        print(result)