def reconstruct_words(test_cases):
    results = []
    for n, bigrams in test_cases:
        # Start with the first bigram
        word = bigrams[0]
        
        # Reconstruct the word by appending the second character of each bigram
        for i in range(1, len(bigrams)):
            if bigrams[i][0] == word[-1]:
                word += bigrams[i][1]
            else:
                # If there's a missing bigram, insert the first character of the current bigram
                word += bigrams[i]
        
        # Ensure the word length matches n
        if len(word) < n:
            word += bigrams[-1][1]
        
        results.append(word)
    return results

# Input reading
t = int(input())
test_cases = []
for _ in range(t):
    n = int(input())
    bigrams = input().split()
    test_cases.append((n, bigrams))

# Solve and output results
results = reconstruct_words(test_cases)
print("\n".join(results))