def max_successful_commands(t, test_cases):
    for i in range(t):
        n, m = test_cases[i][0]
        commands = test_cases[i][1]

        max_moves = 0
        best_start = (1, 1)

        for row in range(1, n + 1):
            for col in range(1, m + 1):
                r, c = row, col
                moves = 0

                for command in commands:
                    if command == 'L' and c > 1:
                        c -= 1
                    elif command == 'R' and c < m:
                        c += 1
                    elif command == 'U' and r > 1:
                        r -= 1
                    elif command == 'D' and r < n:
                        r += 1
                    else:
                        break

                    moves += 1

                if moves > max_moves:
                    max_moves = moves
                    best_start = (row, col)

        print(f"{best_start[0]} {best_start[1]}")

# Input parsing
t = int(input())
test_cases = []
for _ in range(t):
    n, m = map(int, input().split())
    commands = input().strip()
    test_cases.append(((n, m), commands))

max_successful_commands(t, test_cases)