def find_starting_cell(t, test_cases):
    results = []
    
    for i in range(t):
        n, m, s = test_cases[i]
        max_commands = 0
        best_cell = (1, 1)

        for r in range(1, n + 1):
            for c in range(1, m + 1):
                row, col = r, c
                commands = 0
                for move in s:
                    if move == 'L' and col > 1:
                        col -= 1
                    elif move == 'R' and col < m:
                        col += 1
                    elif move == 'U' and row > 1:
                        row -= 1
                    elif move == 'D' and row < n:
                        row += 1
                    else:
                        break
                    commands += 1
                
                if commands > max_commands:
                    max_commands = commands
                    best_cell = (r, c)

        results.append(best_cell)

    return results

# Input parsing
t = int(input())
test_cases = []
for _ in range(t):
    n, m = map(int, input().split())
    s = input().strip()
    test_cases.append((n, m, s))

# Find the best starting cell for each test case
output = find_starting_cell(t, test_cases)

# Output the results
for cell in output:
    print(cell[0], cell[1])