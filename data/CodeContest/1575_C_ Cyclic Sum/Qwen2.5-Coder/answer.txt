MOD = 10**9 + 7

def count_segments(n, m, k, a):
    # Compute prefix sums modulo k
    prefix_mod = [0] * (n + 1)
    for i in range(1, n + 1):
        prefix_mod[i] = (prefix_mod[i - 1] + a[i - 1]) % k
    
    # Count occurrences of each prefix sum modulo k
    count = [0] * k
    for i in range(n + 1):
        count[prefix_mod[i]] += 1
    
    # Compute the number of valid segments in 2a
    total_segments = 0
    for i in range(n + 1):
        for j in range(i + 1, n + 1):
            if (prefix_mod[j] - prefix_mod[i]) % k == 0:
                total_segments += count[prefix_mod[i]]
                total_segments %= MOD
    
    # Adjust for cyclic segments
    for i in range(n + 1):
        for j in range(n + 1, 2 * n + 1):
            if (prefix_mod[j] - prefix_mod[i]) % k == 0:
                total_segments += count[prefix_mod[i]]
                total_segments %= MOD
    
    # Multiply by m to account for all m copies of a
    total_segments *= m
    total_segments %= MOD
    
    return total_segments

# Read input
n, m, k = map(int, input().split())
a = list(map(int, input().split()))

# Output the result
print(count_segments(n, m, k, a))