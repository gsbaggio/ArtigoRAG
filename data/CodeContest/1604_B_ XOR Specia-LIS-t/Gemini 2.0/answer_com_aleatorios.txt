def solve():
    n = int(input())
    a = list(map(int, input().split()))

    def lis(arr):
        """Calculates the length of the longest increasing subsequence."""
        if not arr:
            return 0
        
        tail = []
        for num in arr:
            if not tail or num > tail[-1]:
                tail.append(num)
            else:
                # Binary search to find the smallest element in tail that is >= num
                l, r = 0, len(tail) - 1
                while l <= r:
                    mid = (l + r) // 2
                    if tail[mid] < num:
                        l = mid + 1
                    else:
                        r = mid - 1
                tail[l] = num
        return len(tail)

    def can_split(arr):
        """Checks if the array can be split such that XOR of LIS lengths is 0."""
        
        if not arr:
            return True
        
        for i in range(1, len(arr) + 1):
            first_subarray = arr[:i]
            rest_of_array = arr[i:]
            
            lis_length = lis(first_subarray)
            
            if can_split(rest_of_array):
                if lis_length == 0:
                    return True
                
                # Check if XORing lis_length with 0 gives 0, which is only possible if lis_length is 0
                if lis_length == 0:
                    return True
                
                # If the rest of the array can be split into subarrays with XOR of LIS lengths equal to lis_length, then we found a valid split
                
                def can_split_with_target(arr, target):
                    if not arr:
                        return target == 0

                    for j in range(1, len(arr) + 1):
                        first_subarray_inner = arr[:j]
                        rest_of_array_inner = arr[j:]
                        
                        lis_length_inner = lis(first_subarray_inner)
                        
                        if can_split_with_target(rest_of_array_inner, target ^ lis_length_inner):
                            return True
                    return False
                
                if can_split_with_target(rest_of_array, lis_length):
                    return True
        
        return False

    if can_split(a):
        print("YES")
    else:
        print("NO")

t = int(input())
for _ in range(t):
    solve()