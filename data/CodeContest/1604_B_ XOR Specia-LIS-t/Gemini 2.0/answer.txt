def solve():
    t = int(input())
    for _ in range(t):
        n = int(input())
        a = list(map(int, input().split()))

        def longest_increasing_subsequence_length(arr):
            """
            Calculates the length of the longest increasing subsequence in an array.
            Uses dynamic programming with patience sorting optimization for O(n log n) time complexity.
            """
            tails = []
            for num in arr:
                if not tails or num > tails[-1]:
                    tails.append(num)
                else:
                    # Binary search to find the smallest tail >= num
                    l, r = 0, len(tails) - 1
                    while l <= r:
                        mid = (l + r) // 2
                        if tails[mid] < num:
                            l = mid + 1
                        else:
                            r = mid - 1
                    tails[l] = num
            return len(tails)

        def can_split_xor_zero(arr):
            """
            Checks if the array can be split into subarrays such that the XOR of LIS lengths is 0.
            """
            if not arr:
                return True

            for i in range(1, len(arr) + 1):
                first_subarray = arr[:i]
                rest_of_array = arr[i:]
                
                lis_length = longest_increasing_subsequence_length(first_subarray)
                
                if can_split_xor_zero(rest_of_array):
                    # Check if XORing lis_length with 0 results in 0
                    if lis_length == 0:
                        if can_split_xor_zero(rest_of_array):
                            return True
                    else:
                        # If the rest of the array can be split to give XOR of lis_length, then we can split to give XOR of 0
                        def find_splits_with_xor(arr, target_xor):
                            if not arr:
                                return target_xor == 0

                            for i in range(1, len(arr) + 1):
                                first_subarray = arr[:i]
                                rest_of_array = arr[i:]
                                lis_length = longest_increasing_subsequence_length(first_subarray)
                                if find_splits_with_xor(rest_of_array, target_xor ^ lis_length):
                                    return True
                            return False
                        
                        if find_splits_with_xor(rest_of_array, lis_length):
                            return True
            return False

        if can_split_xor_zero(a):
            print("YES")
        else:
            print("NO")

solve()