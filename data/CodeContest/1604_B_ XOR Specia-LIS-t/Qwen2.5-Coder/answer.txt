def can_split_to_zero_xor(sequence):
    n = len(sequence)
    if n == 1:
        return "NO"
    
    # Calculate LIS for the entire sequence
    lis_length = 1
    current_length = 1
    
    for i in range(1, n):
        if sequence[i] > sequence[i - 1]:
            current_length += 1
        else:
            lis_length = max(lis_length, current_length)
            current_length = 1
    lis_length = max(lis_length, current_length)
    
    # Identify subarray LIS lengths
    subarray_lengths = []
    current_length = 1
    
    for i in range(1, n):
        if sequence[i] > sequence[i - 1]:
            current_length += 1
        else:
            subarray_lengths.append(current_length)
            current_length = 1
    subarray_lengths.append(current_length)
    
    # Check if we can partition such that XOR is 0
    xor_set = set()
    
    for length in subarray_lengths:
        if length in xor_set:
            xor_set.remove(length)
        else:
            xor_set.add(length)
    
    return "YES" if not xor_set else "NO"

# Read input
import sys
input = sys.stdin.read
data = input().split()

t = int(data[0])
index = 1
results = []

for _ in range(t):
    n = int(data[index])
    index += 1
    sequence = list(map(int, data[index:index + n]))
    index += n
    results.append(can_split_to_zero_xor(sequence))

# Print results
for result in results:
    print(result)