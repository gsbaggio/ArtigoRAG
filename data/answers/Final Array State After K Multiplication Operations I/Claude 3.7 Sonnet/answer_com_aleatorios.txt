import java.util.*;

class Solution {
    public int[] getFinalState(int[] nums, int k, int multiplier) {
        int n = nums.length;
        
        // Create a priority queue (min-heap) to keep track of values and their indices
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[0] - b[0]);
        
        // Add all elements to the priority queue [value, index]
        for (int i = 0; i < n; i++) {
            pq.offer(new int[]{nums[i], i});
        }
        
        // Perform k operations
        for (int i = 0; i < k; i++) {
            // Get the minimum element
            int[] min = pq.poll();
            int value = min[0];
            int index = min[1];
            
            // Update the value in the original array
            nums[index] *= multiplier;
            
            // Put the updated element back into the queue
            pq.offer(new int[]{nums[index], index});
        }
        
        return nums;
    }
}