# Definition for a binary tree node.
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

class Solution:
    def reverseOddLevels(self, root: Optional[TreeNode]) -> Optional[TreeNode]:
        if not root:
            return None
        
        # BFS traversal
        queue = [root]
        level = 0
        
        while queue:
            size = len(queue)
            # If odd level, collect node values for reversal
            if level % 2 == 1:
                # Get all values at this level
                values = [node.val for node in queue]
                # Reverse the values
                values.reverse()
                # Update nodes with reversed values
                for i in range(size):
                    queue[i].val = values[i]
            
            # Process next level
            for _ in range(size):
                node = queue.pop(0)
                if node.left:
                    queue.append(node.left)
                if node.right:
                    queue.append(node.right)
            
            level += 1
            
        return root