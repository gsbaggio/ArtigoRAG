class Solution:
    def strongPasswordCheckerII(self, password: str) -> bool:
        # Check length requirement
        if len(password) < 8:
            return False
        
        # Track character types
        has_lowercase = False
        has_uppercase = False
        has_digit = False
        has_special = False
        special_chars = "!@#$%^&*()-+"
        
        # Check for adjacent duplicates
        for i in range(len(password)):
            # Check character types
            if password[i].islower():
                has_lowercase = True
            elif password[i].isupper():
                has_uppercase = True
            elif password[i].isdigit():
                has_digit = True
            elif password[i] in special_chars:
                has_special = True
            
            # Check for adjacent duplicates
            if i > 0 and password[i] == password[i-1]:
                return False
        
        # Check if all criteria are met
        return has_lowercase and has_uppercase and has_digit and has_special