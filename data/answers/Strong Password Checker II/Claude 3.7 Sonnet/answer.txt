class Solution:
    def strongPasswordChecker(self, password: str) -> bool:
        # Check length requirement
        if len(password) < 8:
            return False
        
        # Check character type requirements
        has_lower = False
        has_upper = False
        has_digit = False
        has_special = False
        special_chars = "!@#$%^&*()-+"
        
        # Check adjacent duplicate requirement and character types
        for i in range(len(password)):
            # Check for adjacent duplicates
            if i > 0 and password[i] == password[i-1]:
                return False
            
            # Check character types
            char = password[i]
            if 'a' <= char <= 'z':
                has_lower = True
            elif 'A' <= char <= 'Z':
                has_upper = True
            elif '0' <= char <= '9':
                has_digit = True
            elif char in special_chars:
                has_special = True
        
        # Return true if all criteria are met
        return has_lower and has_upper and has_digit and has_special