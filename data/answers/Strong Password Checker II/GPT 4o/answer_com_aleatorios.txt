class Solution:
    def strongPasswordCheckerII(self, password: str) -> bool:
        # Check if the length is at least 8
        if len(password) < 8:
            return False

        # Initialize flags for different criteria
        has_lowercase = False
        has_uppercase = False
        has_digit = False
        has_special = False
        special_characters = "!@#$%^&*()-+"

        # Iterate through the password to check for character types and adjacent duplicates
        for i in range(len(password)):
            char = password[i]

            # Check for lowercase letter
            if char.islower():
                has_lowercase = True

            # Check for uppercase letter
            if char.isupper():
                has_uppercase = True

            # Check for digit
            if char.isdigit():
                has_digit = True

            # Check for special character
            if char in special_characters:
                has_special = True

            # Check for adjacent duplicate characters
            if i > 0 and password[i] == password[i - 1]:
                return False

        # Ensure all criteria are met
        return has_lowercase and has_uppercase and has_digit and has_special