class Solution:
    def minimumDifference(self, nums):
        n = len(nums) // 2
        
        # If n=1, we just return the absolute difference
        if n == 1:
            return abs(nums[0] - nums[1])
        
        # Split array in half
        left = nums[:n]
        right = nums[n:]
        
        # Calculate all possible subset sums for the left half
        left_sums = [[] for _ in range(n+1)]
        for mask in range(1 << n):
            subset_size = bin(mask).count('1')
            subset_sum = sum(left[i] for i in range(n) if mask & (1 << i))
            left_sums[subset_size].append(subset_sum)
        
        # Calculate all possible subset sums for the right half
        right_sums = [[] for _ in range(n+1)]
        for mask in range(1 << n):
            subset_size = bin(mask).count('1')
            subset_sum = sum(right[i] for i in range(n) if mask & (1 << i))
            right_sums[subset_size].append(subset_sum)
        
        # Sort each list of sums for binary search
        for i in range(n+1):
            right_sums[i].sort()
        
        total_sum = sum(nums)
        min_diff = float('inf')
        
        # Try all possible ways to distribute n elements between the two halves
        for left_size in range(n+1):
            right_size = n - left_size
            target = total_sum / 2
            
            for left_sum in left_sums[left_size]:
                # We want to find a value in right_sums[right_size] that makes
                # left_sum + right_sum as close as possible to total_sum/2
                desired_right_sum = target - left_sum
                
                # Binary search for the closest value
                idx = bisect_left(right_sums[right_size], desired_right_sum)
                
                if idx < len(right_sums[right_size]):
                    curr_diff = abs(total_sum - 2 * (left_sum + right_sums[right_size][idx]))
                    min_diff = min(min_diff, curr_diff)
                
                if idx > 0:
                    curr_diff = abs(total_sum - 2 * (left_sum + right_sums[right_size][idx-1]))
                    min_diff = min(min_diff, curr_diff)
        
        return min_diff

    # Helper function for binary search
    def bisect_left(arr, x):
        lo, hi = 0, len(arr)
        while lo < hi:
            mid = (lo + hi) // 2
            if arr[mid] < x:
                lo = mid + 1
            else:
                hi = mid
        return lo