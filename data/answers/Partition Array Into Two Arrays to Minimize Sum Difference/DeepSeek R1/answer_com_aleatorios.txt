import java.util.*;

class Solution {
    public int minimumDifference(int[] nums) {
        int n = nums.length / 2;
        int total = 0;
        for (int num : nums) {
            total += num;
        }
        int[] A = Arrays.copyOfRange(nums, 0, n);
        int[] B = Arrays.copyOfRange(nums, n, 2 * n);

        List<Integer>[] left = new ArrayList[n + 1];
        List<Integer>[] right = new ArrayList[n + 1];
        for (int i = 0; i <= n; i++) {
            left[i] = new ArrayList<>();
            right[i] = new ArrayList<>();
        }

        for (int mask = 0; mask < (1 << n); mask++) {
            int cnt = Integer.bitCount(mask);
            int s = 0;
            for (int i = 0; i < n; i++) {
                if ((mask & (1 << i)) != 0) {
                    s += A[i];
                }
            }
            left[cnt].add(s);
        }

        for (int mask = 0; mask < (1 << n); mask++) {
            int cnt = Integer.bitCount(mask);
            int s = 0;
            for (int i = 0; i < n; i++) {
                if ((mask & (1 << i)) != 0) {
                    s += B[i];
                }
            }
            right[cnt].add(s);
        }

        for (int i = 0; i <= n; i++) {
            Collections.sort(right[i]);
        }

        int best = Integer.MAX_VALUE;
        for (int i = 0; i <= n; i++) {
            int j = n - i;
            List<Integer> listA = left[i];
            List<Integer> listB = right[j];
            for (int a : listA) {
                int T = total - 2 * a;
                double target = T / 2.0;
                int low = 0;
                int high = listB.size();
                while (low < high) {
                    int mid = low + (high - low) / 2;
                    double midVal = listB.get(mid);
                    if (midVal < target) {
                        low = mid + 1;
                    } else {
                        high = mid;
                    }
                }
                if (low < listB.size()) {
                    int b1 = listB.get(low);
                    int diff = Math.abs(2 * b1 - T);
                    if (diff < best) {
                        best = diff;
                    }
                }
                if (low - 1 >= 0) {
                    int b0 = listB.get(low - 1);
                    int diff = Math.abs(2 * b0 - T);
                    if (diff < best) {
                        best = diff;
                    }
                }
            }
        }
        return best;
    }
}