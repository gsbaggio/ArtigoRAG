class Solution:
    def minimumDifference(self, nums: List[int]) -> int:
        n_val = len(nums) // 2
        total_sum = sum(nums)
        left_arr = nums[:n_val]
        right_arr = nums[n_val:]
        
        left_subsets = [[] for _ in range(n_val + 1)]
        m = n_val
        for bitmask in range(1 << m):
            count = 0
            s = 0
            for i in range(m):
                if bitmask & (1 << i):
                    count += 1
                    s += left_arr[i]
            left_subsets[count].append(s)
        
        right_subsets = [[] for _ in range(n_val + 1)]
        for bitmask in range(1 << m):
            count = 0
            s = 0
            for i in range(m):
                if bitmask & (1 << i):
                    count += 1
                    s += right_arr[i]
            right_subsets[count].append(s)
        
        for i in range(n_val + 1):
            left_subsets[i].sort()
            right_subsets[i].sort()
        
        ans = float('inf')
        
        for k in range(n_val + 1):
            k2 = n_val - k
            list_left = left_subsets[k]
            list_right = right_subsets[k2]
            for a in list_left:
                T = total_sum - 2 * a
                lo, hi = 0, len(list_right)
                while lo < hi:
                    mid = (lo + hi) // 2
                    if 2 * list_right[mid] < T:
                        lo = mid + 1
                    else:
                        hi = mid
                candidates = []
                if lo < len(list_right):
                    candidates.append(list_right[lo])
                if lo > 0:
                    candidates.append(list_right[lo - 1])
                for b in candidates:
                    diff = abs(2 * b - T)
                    if diff < ans:
                        ans = diff
                    if ans == 0:
                        return 0
        return ans