class Solution:
    def minAreaFreeRect(self, points):
        # Convert points to a set for O(1) lookup
        point_set = set(map(tuple, points))
        n = len(points)
        min_area = float('inf')
        found = False

        # Iterate through all pairs of points
        for i in range(n):
            for j in range(i + 1, n):
                # Get the two points
                x1, y1 = points[i]
                x2, y2 = points[j]

                # Calculate the potential other two points of the rectangle
                # Midpoint of the diagonal
                mid_x, mid_y = (x1 + x2) / 2, (y1 + y2) / 2
                # Other two points
                p3 = (x1 + x2 - y2 + y1, y1 + y2 + x2 - x1)
                p4 = (x1 + x2 + y2 - y1, y1 + y2 - x2 + x1)

                # Check if the other two points exist
                if p3 in point_set and p4 in point_set:
                    # Calculate the area of the rectangle
                    area = abs(x1 - x2) * abs(y1 - y2)
                    min_area = min(min_area, area)
                    found = True

        # If no rectangle was found, return 0
        return min_area if found else 0