from collections import defaultdict

class Solution:
    def minAreaFreeRect(self, points: List[List[int]]) -> float:
        n = len(points)
        groups = defaultdict(list)
        
        for i in range(n):
            for j in range(i + 1, n):
                x1, y1 = points[i]
                x2, y2 = points[j]
                sx = x1 + x2
                sy = y1 + y2
                d = (x1 - x2) ** 2 + (y1 - y2) ** 2
                groups[(sx, sy, d)].append((x1, y1))
        
        min_area = float('inf')
        
        for key, endpoints in groups.items():
            sx, sy, d = key
            k = len(endpoints)
            if k < 2:
                continue
            for i in range(k):
                x1, y1 = endpoints[i]
                for j in range(i + 1, k):
                    x2, y2 = endpoints[j]
                    dx1 = x2 - x1
                    dy1 = y2 - y1
                    dx2 = sx - x1 - x2
                    dy2 = sy - y1 - y2
                    area = abs(dx1 * dy2 - dy1 * dx2)
                    if area == 0:
                        continue
                    if area < min_area:
                        min_area = area
        
        return 0.0 if min_area == float('inf') else min_area