class Solution:
    def minAreaFreeRect(self, points):
        """
        Finds the minimum area of any rectangle formed from the given points,
        with sides not necessarily parallel to the X and Y axes.

        Args:
            points (list of lists of int): A list of points in the X-Y plane.

        Returns:
            float: The minimum area of any rectangle formed from these points.
                   Returns 0 if there is no such rectangle.
        """
        n = len(points)
        if n < 4:
            return 0.0

        point_set = set((x, y) for x, y in points)
        min_area = float('inf')

        for i in range(n):
            for j in range(i + 1, n):
                for k in range(j + 1, n):
                    # Consider points[i] and points[j] as two vertices of a potential rectangle.
                    # points[k] is the third vertex.
                    x1, y1 = points[i]
                    x2, y2 = points[j]
                    x3, y3 = points[k]

                    # Calculate the coordinates of the fourth vertex.
                    x4 = x1 + x2 - x3
                    y4 = y1 + y2 - y3

                    # Check if the fourth vertex exists in the set of points.
                    if (x4, y4) in point_set:
                        # Calculate the lengths of the sides.
                        side1_sq = (x1 - x3)**2 + (y1 - y3)**2
                        side2_sq = (x2 - x3)**2 + (y2 - y3)**2

                        # Check if it is a rectangle (dot product of sides is 0).
                        if (x1 - x3) * (x2 - x3) + (y1 - y3) * (y2 - y3) == 0:
                            # Calculate the area.
                            area = (side1_sq**0.5) * (side2_sq**0.5)
                            min_area = min(min_area, area)

        if min_area == float('inf'):
            return 0.0
        else:
            return min_area