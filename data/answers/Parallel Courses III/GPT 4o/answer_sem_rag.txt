class Solution:
    def minimumTime(self, n, relations, time):
        # Step 1: Build the graph and inDegree array
        from collections import defaultdict, deque
        
        graph = defaultdict(list)
        inDegree = [0] * (n + 1)
        
        for prev, next in relations:
            graph[prev].append(next)
            inDegree[next] += 1
        
        # Step 2: Initialize the queue with courses having no prerequisites
        queue = deque()
        dp = [0] * (n + 1)  # dp[i] stores the minimum time to complete course i
        
        for i in range(1, n + 1):
            if inDegree[i] == 0:
                queue.append(i)
                dp[i] = time[i - 1]  # Course time is directly its duration if no prerequisites
        
        # Step 3: Process courses in topological order
        while queue:
            course = queue.popleft()
            
            for next_course in graph[course]:
                # Update the dp value for the next course
                dp[next_course] = max(dp[next_course], dp[course] + time[next_course - 1])
                
                # Decrease inDegree and add to queue if it becomes 0
                inDegree[next_course] -= 1
                if inDegree[next_course] == 0:
                    queue.append(next_course)
        
        # Step 4: Return the maximum time from dp array
        return max(dp)