from collections import defaultdict

class Solution:
    def minimumTime(self, n, relations, time):
        graph = defaultdict(list)
        inDegree = [0] * (n+1)
        
        for prev, next in relations:
            graph[prev].append(next)
            inDegree[next] += 1
        
        queue = []
        for i in range(1, n+1):
            if inDegree[i] == 0:
                queue.append(i)
        
        dp = [0] * (n+1)
        result = 0
        
        while queue:
            size = len(queue)
            for _ in range(size):
                node = queue.pop(0)
                result = max(result, dp[node] + time[node-1])
                
                for neighbor in graph[node]:
                    inDegree[neighbor] -= 1
                    dp[neighbor] = max(dp[neighbor], dp[node] + time[node-1])
                    if inDegree[neighbor] == 0:
                        queue.append(neighbor)
        
        return result