from collections import defaultdict
from itertools import combinations

class Solution:
    def minimumTime(self, n, relations, time):
        in_degrees = [0] * n
        graph = defaultdict(list)
        
        for prevCourse, nextCourse in relations:
            in_degrees[nextCourse - 1] += 1
            graph[prevCourse - 1].append(nextCourse - 1)
        
        @lru_cache(None)
        def recurse(mask, in_degrees):
            if not mask:
                return 0
            
            nodes = [i for i in range(n) if mask & 1 << i and in_degrees[i] == 0]
            ans = float('inf')
            
            for k_nodes in combinations(nodes, min(k, len(nodes))):
                new_mask, new_in_degrees = mask, list(in_degrees)
                
                for node in k_nodes:
                    new_mask ^= 1 << node
                    for child in graph[node]:
                        new_in_degrees[child] -= 1
                
                ans = min(ans, 1 + recurse(new_mask, tuple(new_in_degrees)))
            
            return ans
        
        return recurse((1 << n) - 1, tuple(in_degrees))