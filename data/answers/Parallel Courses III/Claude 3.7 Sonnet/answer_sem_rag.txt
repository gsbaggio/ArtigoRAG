class Solution:
    def minimumTime(self, n, relations, time):
        # Build adjacency list and in-degree count
        graph = [[] for _ in range(n + 1)]
        in_degree = [0] * (n + 1)
        
        for prev, next_course in relations:
            graph[prev].append(next_course)
            in_degree[next_course] += 1
        
        # Calculate earliest completion time for each course
        earliest_completion = [0] + time.copy()  # 1-indexed, adding 0 at index 0
        
        # Queue for courses with no prerequisites
        queue = []
        for i in range(1, n + 1):
            if in_degree[i] == 0:
                queue.append(i)
        
        while queue:
            current = queue.pop(0)
            
            for next_course in graph[current]:
                # Update earliest completion time for the next course
                earliest_completion[next_course] = max(
                    earliest_completion[next_course],
                    earliest_completion[current] + time[next_course - 1]
                )
                
                in_degree[next_course] -= 1
                if in_degree[next_course] == 0:
                    queue.append(next_course)
        
        # Return the maximum completion time
        return max(earliest_completion)