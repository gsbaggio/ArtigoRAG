class Solution:
    def lengthOfLIS(self, nums: list[int]) -> int:
        """
        Finds the length of the longest strictly increasing subsequence.

        The intuition behind the approach is to use dynamic programming with patience sorting.
        We maintain a 'tails' array, where tails[i] is the smallest tail of all increasing subsequences of length i+1.
        For each number in nums, we try to extend an existing subsequence or start a new one.
        If the number is larger than all tails, it extends the longest subsequence by 1.
        Otherwise, we find the smallest tail that is greater than or equal to the number and replace it with the number.
        This keeps the tails array sorted, allowing for binary search to find the replacement point efficiently.

        Time Complexity: O(n log n), where n is the length of nums.  Binary search is performed for each element.
        Space Complexity: O(n), where n is the length of nums, for the 'tails' array.

        Important considerations:
        - The 'tails' array is always sorted in increasing order.
        - The length of the 'tails' array represents the length of the longest increasing subsequence found so far.
        - We use binary search to find the smallest tail that is greater than or equal to the current number.
        - If the current number is smaller than all tails, it becomes the new smallest tail of a subsequence of length 1.
        - If the current number is larger than all tails, it extends the longest subsequence by 1.
        """
        tails = []
        for num in nums:
            if not tails or num > tails[-1]:
                tails.append(num)
            else:
                # Binary search to find the smallest tail >= num
                l, r = 0, len(tails) - 1
                while l <= r:
                    mid = (l + r) // 2
                    if tails[mid] < num:
                        l = mid + 1
                    else:
                        r = mid - 1
                tails[l] = num
        return len(tails)