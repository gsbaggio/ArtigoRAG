class Solution:
    def lengthOfLIS(self, nums):
        if not nums:
            return 0
        
        dp = []
        
        for num in nums:
            # Use binary search to find the insertion point of the current number in dp
            left, right = 0, len(dp)
            while left < right:
                mid = (left + right) // 2
                if dp[mid] < num:
                    left = mid + 1
                else:
                    right = mid
            
            # If left is equal to the length of dp, it means num is greater than any element in dp
            if left == len(dp):
                dp.append(num)
            else:
                # Replace the element at the found position with num
                dp[left] = num
        
        # The length of dp is the length of the longest increasing subsequence
        return len(dp)