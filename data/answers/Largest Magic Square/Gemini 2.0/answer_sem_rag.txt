class Solution:
    def largestMagicSquare(self, grid: list[list[int]]) -> int:
        """
        Finds the size of the largest magic square within a given grid.

        Args:
            grid (list[list[int]]): The input grid of integers.

        Returns:
            int: The size (side length) of the largest magic square found within the grid.
        """
        m, n = len(grid), len(grid[0])
        max_size = min(m, n)

        for size in range(max_size, 0, -1):
            for row in range(m - size + 1):
                for col in range(n - size + 1):
                    if self.isMagicSquare(grid, row, col, size):
                        return size
        return 1

    def isMagicSquare(self, grid: list[list[int]], row: int, col: int, size: int) -> bool:
        """
        Checks if a square subgrid within the given grid is a magic square.

        Args:
            grid (list[list[int]]): The input grid.
            row (int): The starting row index of the subgrid.
            col (int): The starting column index of the subgrid.
            size (int): The size (side length) of the subgrid.

        Returns:
            bool: True if the subgrid is a magic square, False otherwise.
        """
        magic_constant = -1

        # Check row sums
        for i in range(row, row + size):
            row_sum = sum(grid[i][col + j] for j in range(size))
            if magic_constant == -1:
                magic_constant = row_sum
            elif row_sum != magic_constant:
                return False

        # Check column sums
        for j in range(col, col + size):
            col_sum = sum(grid[row + i][j] for i in range(size))
            if col_sum != magic_constant:
                return False

        # Check main diagonal sum
        diag_sum1 = sum(grid[row + i][col + i] for i in range(size))
        if diag_sum1 != magic_constant:
            return False

        # Check anti-diagonal sum
        diag_sum2 = sum(grid[row + i][col + size - 1 - i] for i in range(size))
        if diag_sum2 != magic_constant:
            return False

        return True