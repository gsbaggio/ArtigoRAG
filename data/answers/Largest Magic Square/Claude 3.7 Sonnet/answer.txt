class Solution:
    def largestMagicSquare(self, grid: list[list[int]]) -> int:
        m, n = len(grid), len(grid[0])
        
        # Precompute prefix sums for rows, columns, and diagonals
        row_sum = [[0] * (n + 1) for _ in range(m)]
        col_sum = [[0] * (m + 1) for _ in range(n)]
        
        for i in range(m):
            for j in range(n):
                row_sum[i][j + 1] = row_sum[i][j] + grid[i][j]
        
        for j in range(n):
            for i in range(m):
                col_sum[j][i + 1] = col_sum[j][i] + grid[i][j]
        
        # Start with the largest possible size and decrease
        for k in range(min(m, n), 0, -1):
            for i in range(m - k + 1):
                for j in range(n - k + 1):
                    if self.is_magic_square(grid, i, j, k, row_sum, col_sum):
                        return k
        return 1  # Every 1x1 grid is a magic square
    
    def is_magic_square(self, grid: list[list[int]], i: int, j: int, k: int, 
                        row_sum: list[list[int]], col_sum: list[list[int]]) -> bool:
        # Get sum of first row as reference
        target = row_sum[i][j + k] - row_sum[i][j]
        
        # Check all row sums
        for r in range(i, i + k):
            if row_sum[r][j + k] - row_sum[r][j] != target:
                return False
        
        # Check all column sums
        for c in range(j, j + k):
            if col_sum[c][i + k] - col_sum[c][i] != target:
                return False
        
        # Check main diagonal (top-left to bottom-right)
        diag1_sum = 0
        for d in range(k):
            diag1_sum += grid[i + d][j + d]
        if diag1_sum != target:
            return False
        
        # Check anti-diagonal (top-right to bottom-left)
        diag2_sum = 0
        for d in range(k):
            diag2_sum += grid[i + d][j + k - 1 - d]
        if diag2_sum != target:
            return False
        
        return True