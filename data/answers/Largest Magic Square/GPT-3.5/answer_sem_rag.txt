class Solution:
    def largestMagicSquare(self, grid: List[List[int]]) -> int:
        m, n = len(grid), len(grid[0])
        prefix_sum = [[0] * (n + 1) for _ in range(m + 1)]
        for i in range(m):
            for j in range(n):
                prefix_sum[i + 1][j + 1] = prefix_sum[i + 1][j] + prefix_sum[i][j + 1] - prefix_sum[i][j] + grid[i][j]

        def get_sum(i, j, k):
            return prefix_sum[i + k][j + k] - prefix_sum[i][j + k] - prefix_sum[i + k][j] + prefix_sum[i][j]

        def is_magic(i, j, k):
            target_sum = get_sum(i, j, k)
            for x in range(k):
                if get_sum(i + x, j, k) != target_sum or get_sum(i, j + x, k) != target_sum:
                    return False
            if sum(grid[i + x][j + x] for x in range(k)) != target_sum or sum(grid[i + x][j + k - 1 - x] for x in range(k)) != target_sum:
                return False
            return True

        max_k = 1
        for k in range(2, min(m, n) + 1):
            for i in range(m - k + 1):
                for j in range(n - k + 1):
                    if is_magic(i, j, k):
                        max_k = max(max_k, k)

        return max_k