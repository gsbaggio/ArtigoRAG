class Solution:
    def largestMagicSquare(self, grid: List[List[int]]) -> int:
        m, n = len(grid), len(grid[0])
        max_k = min(m, n)  # Maximum possible size of the magic square

        # Prefix sum for rows, columns, and diagonals
        row_sum = [[0] * (n + 1) for _ in range(m)]
        col_sum = [[0] * (n + 1) for _ in range(m)]
        diag_sum = [[0] * (n + 1) for _ in range(m)]

        for i in range(m):
            for j in range(n):
                row_sum[i][j + 1] = row_sum[i][j] + grid[i][j]
                col_sum[i][j + 1] = col_sum[i][j] + grid[i][j]
                diag_sum[i][j + 1] = diag_sum[i][j] + grid[i][j] if i == j else diag_sum[i][j]

        def is_magic_square(i, j, k):
            target_sum = row_sum[i][j + k] - row_sum[i][j]
            for l in range(i + 1, i + k):
                if row_sum[l][j + k] - row_sum[l][j] != target_sum:
                    return False
            for c in range(j, j + k):
                if col_sum[i + k - 1][c + 1] - col_sum[i][c + 1] != target_sum:
                    return False
            if diag_sum[i + k - 1][j + k] - diag_sum[i][j] != target_sum:
                return False
            if diag_sum[i + k - 1][j] - diag_sum[i][j + k] != target_sum:
                return False
            return True

        for k in range(max_k, 1, -1):
            for i in range(m - k + 1):
                for j in range(n - k + 1):
                    if is_magic_square(i, j, k):
                        return k

        return 1