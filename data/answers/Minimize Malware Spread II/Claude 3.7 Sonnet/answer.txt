class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        Arrays.sort(initial); // Sort to ensure we return smallest index in case of ties
        
        // Find best node to remove
        int minInfected = Integer.MAX_VALUE;
        int bestNode = -1;
        
        for (int removeNode : initial) {
            // Create a list of initial nodes without the removed node
            List<Integer> newInitial = new ArrayList<>();
            for (int node : initial) {
                if (node != removeNode) {
                    newInitial.add(node);
                }
            }
            
            // Count infections after spreading with the node removed
            int infectedCount = countInfected(graph, newInitial, n, removeNode);
            
            // Update best node if this one results in fewer infections
            if (infectedCount < minInfected) {
                minInfected = infectedCount;
                bestNode = removeNode;
            }
        }
        
        return bestNode;
    }
    
    // BFS to count infected nodes with a node removed
    private int countInfected(int[][] graph, List<Integer> initial, int n, int removedNode) {
        boolean[] infected = new boolean[n];
        Queue<Integer> queue = new LinkedList<>();
        
        // Mark initial infections
        for (int node : initial) {
            infected[node] = true;
            queue.add(node);
        }
        
        // BFS to spread infection
        while (!queue.isEmpty()) {
            int curr = queue.poll();
            
            for (int neighbor = 0; neighbor < n; neighbor++) {
                // Skip if neighbor is the removed node or if already infected
                if (neighbor == removedNode || infected[neighbor] || graph[curr][neighbor] == 0) {
                    continue;
                }
                
                infected[neighbor] = true;
                queue.add(neighbor);
            }
        }
        
        // Count total infected
        int count = 0;
        for (int i = 0; i < n; i++) {
            if (i != removedNode && infected[i]) {
                count++;
            }
        }
        
        return count;
    }
}