class Solution:
    def minMalwareSpread(self, graph, initial):
        n = len(graph)
        initial_set = set(initial)
        
        def count_infected_after_removal(removed):
            # Start with initially infected nodes (excluding the removed one)
            infected = set(node for node in initial_set if node != removed)
            queue = list(infected)
            
            # BFS to spread infection
            while queue:
                node = queue.pop(0)
                for neighbor in range(n):
                    # Skip connections to the removed node
                    if neighbor == removed:
                        continue
                        
                    if graph[node][neighbor] == 1 and neighbor not in infected:
                        infected.add(neighbor)
                        queue.append(neighbor)
                        
            return len(infected)
        
        min_infected = float('inf')
        min_node = float('inf')
        
        # Try removing each initially infected node
        for node in initial:
            infected_count = count_infected_after_removal(node)
            
            # Update result if fewer nodes get infected or if same but with smaller index
            if infected_count < min_infected or (infected_count == min_infected and node < min_node):
                min_infected = infected_count
                min_node = node
        
        return min_node