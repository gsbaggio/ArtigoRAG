class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;

        // 1. Build the disjoint set union (DSU) data structure.
        DSU dsu = new DSU(n);
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (graph[i][j] == 1) {
                    dsu.union(i, j);
                }
            }
        }

        // 2. Count the number of initial nodes in each component.
        int[] componentInitialCount = new int[n];
        for (int node : initial) {
            componentInitialCount[dsu.find(node)]++;
        }

        // 3. Find the node to remove that minimizes the spread.
        int bestNode = -1;
        int savedNodes = -1;

        for (int node : initial) {
            int root = dsu.find(node);
            // If this component has only one initial node, removing it will save the entire component.
            if (componentInitialCount[root] == 1) {
                int componentSize = dsu.size(root);
                if (componentSize > savedNodes) {
                    savedNodes = componentSize;
                    bestNode = node;
                } else if (componentSize == savedNodes && node < bestNode) {
                    bestNode = node;
                }
            }
        }

        // 4. If no node can save any other nodes, return the smallest initial node.
        if (bestNode == -1) {
            bestNode = Integer.MAX_VALUE;
            for (int node : initial) {
                bestNode = Math.min(bestNode, node);
            }
        }

        return bestNode;
    }
}

class DSU {
    private int[] parent;
    private int[] size;

    public DSU(int n) {
        parent = new int[n];
        size = new int[n];
        for (int i = 0; i < n; i++) {
            parent[i] = i;
            size[i] = 1;
        }
    }

    public int find(int x) {
        if (parent[x] != x) {
            parent[x] = find(parent[x]);  // Path compression
        }
        return parent[x];
    }

    public void union(int x, int y) {
        int rootX = find(x);
        int rootY = find(y);
        if (rootX != rootY) {
            parent[rootX] = rootY;
            size[rootY] += size[rootX];
        }
    }

    public int size(int x) {
        return size[find(x)];
    }
}