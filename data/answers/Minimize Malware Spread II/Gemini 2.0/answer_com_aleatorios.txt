class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        int[] clean = new int[n];
        for (int node : initial) {
            clean[node] = -1; // Mark initial nodes as not clean
        }

        // Function to perform Depth-First Search and count connected clean nodes
        function dfs(node, visited, graph, clean) {
            visited[node] = true;
            let count = 1;
            for (let neighbor = 0; neighbor < graph.length; neighbor++) {
                if (graph[node][neighbor] === 1 && !visited[neighbor] && clean[neighbor] !== -1) {
                    count += dfs(neighbor, visited, graph, clean);
                }
            }
            return count;
        }

        // Count the number of nodes each initial node can save
        int[] saved = new int[n];
        for (int initialNode : initial) {
            boolean[] visited = new boolean[n];
            clean[initialNode] = 0; // Temporarily mark the initial node as clean
            for (int i = 0; i < n; i++) {
                if (graph[initialNode][i] == 1 && clean[i] != -1 && !visited[i]) {
                    saved[initialNode] += dfs(i, visited, graph, clean);
                }
            }
            clean[initialNode] = -1; // Restore the initial node as infected
        }

        // Find the initial node that saves the most nodes
        int maxSaved = -1;
        int result = -1;
        for (int initialNode : initial) {
            if (saved[initialNode] > maxSaved) {
                maxSaved = saved[initialNode];
                result = initialNode;
            } else if (saved[initialNode] == maxSaved && initialNode < result) {
                result = initialNode;
            }
        }

        return result;
    }

    // Depth-First Search function to count connected clean nodes
    private int dfs(int node, boolean[] visited, int[][] graph, int[] clean) {
        visited[node] = true;
        int count = 1;
        for (int neighbor = 0; neighbor < graph.length; neighbor++) {
            if (graph[node][neighbor] == 1 && !visited[neighbor] && clean[neighbor] != -1) {
                count += dfs(neighbor, visited, graph, clean);
            }
        }
        return count;
    }
}