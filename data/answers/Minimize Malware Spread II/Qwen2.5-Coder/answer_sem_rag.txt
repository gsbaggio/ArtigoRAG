class Solution:
    def minMalwareSpread(self, graph, initial):
        n = len(graph)
        
        # Union-Find data structure
        parent = list(range(n))
        rank = [1] * n
        
        def find(x):
            if parent[x] != x:
                parent[x] = find(parent[x])
            return parent[x]
        
        def union(x, y):
            rootX = find(x)
            rootY = find(y)
            if rootX != rootY:
                if rank[rootX] > rank[rootY]:
                    parent[rootY] = rootX
                elif rank[rootX] < rank[rootY]:
                    parent[rootX] = rootY
                else:
                    parent[rootY] = rootX
                    rank[rootX] += 1
        
        # Step 1: Union all nodes that are directly connected
        for i in range(n):
            for j in range(i + 1, n):
                if graph[i][j] == 1:
                    union(i, j)
        
        # Step 2: Calculate the size of each component
        component_size = {}
        for i in range(n):
            root = find(i)
            component_size[root] = component_size.get(root, 0) + 1
        
        # Step 3: Count the number of initially infected nodes in each component
        infected_count = {}
        for node in initial:
            root = find(node)
            infected_count[root] = infected_count.get(root, 0) + 1
        
        # Step 4: Determine the node to remove
        max_size = 0
        best_node = min(initial)  # Default to the smallest index if no better option
        
        for node in initial:
            root = find(node)
            if infected_count[root] == 1:  # Only consider components with exactly one infected node
                if component_size[root] > max_size:
                    max_size = component_size[root]
                    best_node = node
                elif component_size[root] == max_size:
                    best_node = min(best_node, node)  # Choose the smaller index if sizes are equal
        
        return best_node