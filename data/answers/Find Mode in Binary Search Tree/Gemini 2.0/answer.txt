class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

class Solution:
    def findMode(self, root: TreeNode) -> list[int]:
        """
        Finds the mode(s) in a binary search tree (BST) with duplicates.

        The intuition behind the approach is to perform an inorder traversal of the BST.
        During the inorder traversal, we keep track of the current value, its frequency,
        and the maximum frequency encountered so far. If the current value is the same
        as the previous value, we increment the current frequency. Otherwise, we reset
        the current frequency to 1. If the current frequency is greater than the maximum
        frequency, we update the maximum frequency and reset the list of modes to contain
        only the current value. If the current frequency is equal to the maximum frequency,
        we add the current value to the list of modes.

        Time Complexity: O(N), where N is the number of nodes in the BST, as we visit each node once.
        Space Complexity: O(1), excluding the space used by the output list. We use constant extra space
                          for variables like current_val, current_freq, max_freq, and modes. This satisfies
                          the follow-up requirement of using no extra space. The implicit stack space used
                          by recursion is not counted.

        Important Considerations:
        - The inorder traversal property of BST is crucial for this approach to work efficiently.
        - The algorithm handles the case where there are multiple modes correctly.
        - The algorithm correctly handles the case where the tree is empty or contains only one node.
        """
        self.current_val = None
        self.current_freq = 0
        self.max_freq = 0
        self.modes = []

        def inorder(node):
            if not node:
                return

            inorder(node.left)

            if node.val == self.current_val:
                self.current_freq += 1
            else:
                self.current_freq = 1
                self.current_val = node.val

            if self.current_freq > self.max_freq:
                self.max_freq = self.current_freq
                self.modes = [node.val]
            elif self.current_freq == self.max_freq:
                self.modes.append(node.val)

            inorder(node.right)

        inorder(root)
        return self.modes