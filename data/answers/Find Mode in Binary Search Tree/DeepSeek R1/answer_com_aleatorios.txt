#include <vector>

using namespace std;

struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode() : val(0), left(nullptr), right(nullptr) {}
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
    TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
};

class Solution {
private:
    int currentVal;
    int currentCount;
    int maxCount;
    vector<int> modes;

    void process(int val) {
        if (currentCount == 0) {
            currentVal = val;
            currentCount = 1;
        } else if (val == currentVal) {
            currentCount++;
        } else {
            currentVal = val;
            currentCount = 1;
        }

        if (currentCount > maxCount) {
            maxCount = currentCount;
            modes.clear();
            modes.push_back(val);
        } else if (currentCount == maxCount) {
            modes.push_back(val);
        }
    }

public:
    vector<int> findMode(TreeNode* root) {
        currentVal = 0;
        currentCount = 0;
        maxCount = 0;
        modes.clear();

        TreeNode* cur = root;
        while (cur) {
            if (!cur->left) {
                process(cur->val);
                cur = cur->right;
            } else {
                TreeNode* pre = cur->left;
                while (pre->right && pre->right != cur) {
                    pre = pre->right;
                }
                if (!pre->right) {
                    pre->right = cur;
                    cur = cur->left;
                } else {
                    pre->right = nullptr;
                    process(cur->val);
                    cur = cur->right;
                }
            }
        }
        return modes;
    }
};