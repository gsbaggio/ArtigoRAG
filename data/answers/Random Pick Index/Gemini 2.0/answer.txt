class Solution {

    private int[] nums;
    private java.util.Random random;

    public Solution(int[] nums) {
        this.nums = nums;
        this.random = new java.util.Random();
    }

    public int pick(int target) {
        int count = 0;
        int result = -1;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == target) {
                count++;
                if (random.nextInt(count) == 0) {
                    result = i;
                }
            }
        }
        return result;
    }
}

/**
 * Explanation:
 *
 * The problem requires us to pick a random index from the input array `nums` where the value at that index is equal to the given `target`.
 * If multiple such indices exist, each index should have an equal probability of being returned.
 *
 * Intuition:
 *
 * The core idea is to iterate through the array and maintain a count of the number of times the `target` has been encountered.
 * When we find an element equal to the `target`, we increment the count.
 * Then, we use a random number generator to decide whether to update the result with the current index.
 * The probability of updating the result is `1 / count`. This ensures that each index has an equal probability of being selected.
 *
 * For example, if the target appears three times at indices i1, i2, and i3, the algorithm works as follows:
 * - When i = i1, count = 1, the probability of selecting i1 is 1/1 = 1.
 * - When i = i2, count = 2, the probability of selecting i2 is 1/2. The probability of i1 being the final result is (1 - 1/2) = 1/2.
 * - When i = i3, count = 3, the probability of selecting i3 is 1/3. The probability of i1 being the final result is (1/2) * (1 - 1/3) = 1/3.
 *   The probability of i2 being the final result is (1/2) * (1 - 1/3) = 1/3.
 *
 * This approach is known as Reservoir Sampling.
 *
 * Time and Space Complexity:
 *
 * - Time Complexity: O(n), where n is the length of the input array `nums`. We iterate through the entire array once.
 * - Space Complexity: O(1), as we only use a few constant extra variables.
 *
 * Important Considerations:
 *
 * - The `java.util.Random` class is used for generating random numbers.
 * - The `nextInt(count)` method returns a pseudorandom, uniformly distributed int value between 0 (inclusive) and the specified value (exclusive).
 * - The algorithm assumes that the target number exists in the array, as stated in the problem constraints.
 */