from collections import defaultdict

class Solution:
    def build_graph(self, numCourses, prerequisites):
        graph = defaultdict(list)
        for prerequisite in prerequisites:
            graph[prerequisite[1]].append(prerequisite[0])
        return graph

    def dfs(self, graph, start, target, visited):
        if start == target:
            return True
        visited[start] = True
        for neighbor in graph[start]:
            if not visited[neighbor] and self.dfs(graph, neighbor, target, visited):
                return True
        return False

    def checkIfPrerequisite(self, numCourses, prerequisites, queries):
        graph = self.build_graph(numCourses, prerequisites)
        answer = []
        
        for query in queries:
            visited = [False] * numCourses
            answer.append(self.dfs(graph, query[0], query[1], visited))
        
        return answer