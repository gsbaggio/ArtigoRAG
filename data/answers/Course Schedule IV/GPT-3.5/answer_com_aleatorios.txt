#include <vector>
#include <queue>

using namespace std;

class Solution {
public:
    vector<bool> checkIfPrerequisite(int numCourses, vector<vector<int>>& prerequisites, vector<vector<int>>& queries) {
        vector<vector<int>> graph(numCourses);
        vector<int> inDegree(numCourses, 0);
        vector<vector<bool>> isPrerequisite(numCourses, vector<bool>(numCourses, false));
        
        for (auto& pre : prerequisites) {
            graph[pre[0]].push_back(pre[1]);
            inDegree[pre[1]++;
        }
        
        for (int i = 0; i < numCourses; ++i) {
            vector<bool> visited(numCourses, false);
            queue<int> q;
            q.push(i);
            while (!q.empty()) {
                int current = q.front();
                q.pop();
                
                for (int neighbor : graph[current]) {
                    if (!visited[neighbor]) {
                        isPrerequisite[i][neighbor] = true;
                        visited[neighbor] = true;
                        q.push(neighbor);
                    }
                }
            }
        }
        
        vector<bool> result;
        for (auto& q : queries) {
            result.push_back(isPrerequisite[q[0]][q[1]]);
        }
        
        return result;
    }
};