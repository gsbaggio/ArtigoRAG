from collections import deque

class Solution:
    def checkIfPrerequisite(self, numCourses: int, prerequisites: List[List[int]], queries: List[List[int]]) -> List[bool]:
        graph = [[] for _ in range(numCourses)]
        for a, b in prerequisites:
            graph[a].append(b)
        
        closure = [[False] * numCourses for _ in range(numCourses)]
        
        for i in range(numCourses):
            visited = [False] * numCourses
            dq = deque([i])
            visited[i] = True
            while dq:
                cur = dq.popleft()
                for neighbor in graph[cur]:
                    if not visited[neighbor]:
                        visited[neighbor] = True
                        closure[i][neighbor] = True
                        dq.append(neighbor)
        
        return [closure[u][v] for u, v in queries]