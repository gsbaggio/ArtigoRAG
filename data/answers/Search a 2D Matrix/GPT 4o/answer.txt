class Solution:
    def searchMatrix(self, matrix, target):
        # Dimensions of the matrix
        m, n = len(matrix), len(matrix[0])
        
        # Binary search on the flattened matrix
        left, right = 0, m * n - 1
        while left <= right:
            mid = (left + right) // 2
            # Map the 1D index to 2D indices
            row, col = divmod(mid, n)
            mid_value = matrix[row][col]
            
            if mid_value == target:
                return True
            elif mid_value < target:
                left = mid + 1
            else:
                right = mid - 1
        
        return False