class Solution:
    def wordBreak(self, s: str, wordDict: list[str]) -> bool:
        # Convert the word dictionary to a set for O(1) lookups
        wordSet = set(wordDict)
        # Create a DP array to store whether a substring can be segmented
        dp = [False] * (len(s) + 1)
        dp[0] = True  # Base case: empty string can always be segmented
        
        # Iterate over each position in the string
        for i in range(1, len(s) + 1):
            # Check all possible substrings ending at position i
            for j in range(i):
                # If the substring s[j:i] is in the word set and dp[j] is True
                if dp[j] and s[j:i] in wordSet:
                    dp[i] = True
                    break  # No need to check further substrings ending at i
        
        # The value at dp[len(s)] will tell us if the entire string can be segmented
        return dp[len(s)]