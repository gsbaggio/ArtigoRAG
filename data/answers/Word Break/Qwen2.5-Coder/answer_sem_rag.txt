class Solution:
    def wordBreak(self, s: str, wordDict: list[str]) -> bool:
        # Convert wordDict to a set for O(1) average time complexity lookups
        word_set = set(wordDict)
        
        # Initialize the dp array with False values
        dp = [False] * (len(s) + 1)
        
        # Base case: An empty string can always be segmented
        dp[0] = True
        
        # Fill the dp array
        for i in range(1, len(s) + 1):
            for j in range(i):
                # Check if the substring s[j:i] is in the dictionary and dp[j] is True
                if dp[j] and s[j:i] in word_set:
                    dp[i] = True
                    break  # No need to check further substrings ending at i
        
        # The result is whether the entire string can be segmented
        return dp[len(s)]