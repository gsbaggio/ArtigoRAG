class Solution:
    def maxProfit(self, k, prices):
        if not prices or k == 0:
            return 0
        
        n = len(prices)
        
        # If k >= n/2, then we can make as many transactions as we want
        if k >= n // 2:
            return sum(max(prices[i+1] - prices[i], 0) for i in range(n-1))
        
        # Initialize min_cost and max_profit arrays
        min_cost = [float('inf')] * (k + 1)
        max_profit = [0] * (k + 1)
        
        # Iterate over each day
        for price in prices:
            # Update min_cost and max_profit for each transaction
            for j in range(1, k + 1):
                min_cost[j] = min(min_cost[j], price - max_profit[j-1])
                max_profit[j] = max(max_profit[j], price - min_cost[j])
        
        return max_profit[k]