class Solution {
public:
    int maxProfit(int k, std::vector<int>& prices) {
        if (prices.empty() || k == 0) return 0;

        // If k is greater than or equal to half the number of days, we can make unlimited transactions
        if (k >= prices.size() / 2) {
            int profit = 0;
            for (int i = 1; i < prices.size(); ++i) {
                if (prices[i] > prices[i - 1]) {
                    profit += prices[i] - prices[i - 1];
                }
            }
            return profit;
        }

        // Initialize buy and sell arrays
        std::vector<int> buy(k + 1, INT_MIN);
        std::vector<int> sell(k + 1, 0);

        // Iterate over each day
        for (int price : prices) {
            // Update buy and sell states for each transaction
            for (int i = 1; i <= k; ++i) {
                buy[i] = std::max(buy[i], sell[i - 1] - price);
                sell[i] = std::max(sell[i], buy[i] + price);
            }
        }

        // The maximum profit after k transactions is stored in sell[k]
        return sell[k];
    }
};