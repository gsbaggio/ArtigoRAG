class Solution:
    def maxProfit(self, k: int, prices: list[int]) -> int:
        """
        You are given an integer array prices where prices[i] is the price of a given stock on the ith day, and an integer k.

        Find the maximum profit you can achieve. You may complete at most k transactions: i.e. you may buy at most k times and sell at most k times.

        Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

        Example 1:

        Input: k = 2, prices = [2,4,1]
        Output: 2
        Explanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.
        Example 2:

        Input: k = 2, prices = [3,2,6,5,0,3]
        Output: 7
        Explanation: Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.
        

        Constraints:

        1 <= k <= 100
        1 <= prices.length <= 1000
        0 <= prices[i] <= 1000
        """
        n = len(prices)

        # If no prices are given, no profit can be made
        if n == 0:
            return 0

        # If k is too large, we can perform infinite transactions, so we can simplify the problem to a simpler version
        if k >= n // 2:
            profit = 0
            for i in range(1, n):
                if prices[i] > prices[i - 1]:
                    profit += prices[i] - prices[i - 1]
            return profit

        # dp[i][j] represents the maximum profit we can have with at most i transactions until day j
        dp = [[0] * n for _ in range(k + 1)]

        # Iterate through the number of transactions
        for i in range(1, k + 1):
            # Initialize the maximum profit after buying as negative infinity
            max_profit_after_buy = -prices[0]

            # Iterate through the days
            for j in range(1, n):
                # Either we don't do anything on day j, or we sell on day j
                dp[i][j] = max(dp[i][j - 1], max_profit_after_buy + prices[j])

                # Update the maximum profit after buying. Either we don't buy on day j, or we buy on day j
                max_profit_after_buy = max(max_profit_after_buy, dp[i - 1][j - 1] - prices[j])

        # The maximum profit we can have with at most k transactions until the last day
        return dp[k][n - 1]