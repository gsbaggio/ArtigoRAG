class Solution:
    def maxProfit(self, k: int, prices: list[int]) -> int:
        """
        You are given an integer array prices where prices[i] is the price of a given stock on the ith day, and an integer k.

        Find the maximum profit you can achieve. You may complete at most k transactions: i.e. you may buy at most k times and sell at most k times.

        Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

        Example 1:

        Input: k = 2, prices = [2,4,1]
        Output: 2
        Explanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.
        Example 2:

        Input: k = 2, prices = [3,2,6,5,0,3]
        Output: 7
        Explanation: Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.

        Constraints:

        1 <= k <= 100
        1 <= prices.length <= 1000
        0 <= prices[i] <= 1000
        """
        n = len(prices)

        # If the number of transactions is too large, it's equivalent to unlimited transactions
        if k >= n // 2:
            profit = 0
            for i in range(1, n):
                if prices[i] > prices[i - 1]:
                    profit += prices[i] - prices[i - 1]
            return profit

        # dp[i][j] represents the maximum profit with at most i transactions up to day j
        dp = [[0] * n for _ in range(k + 1)]

        for i in range(1, k + 1):
            max_diff = -prices[0]  # Initialize max_diff for the first day
            for j in range(1, n):
                dp[i][j] = max(dp[i][j - 1], prices[j] + max_diff)
                max_diff = max(max_diff, dp[i - 1][j - 1] - prices[j])

        return dp[k][n - 1]

        """
        Intuition:
        The problem can be solved using dynamic programming. The state dp[i][j] represents the maximum profit with at most i transactions up to day j.
        The transition function is:
        dp[i][j] = max(dp[i][j-1], prices[j] - prices[m] + dp[i-1][m-1]), where m ranges from 0 to j-1.
        dp[i][j-1] means we don't do any transaction on day j.
        prices[j] - prices[m] + dp[i-1][m-1] means we buy on day m and sell on day j, and we have i-1 transactions before day m.

        Optimization:
        The above transition function takes O(n) time to compute dp[i][j]. We can optimize it to O(1) by maintaining a variable max_diff, where max_diff = max(dp[i-1][m-1] - prices[m]).
        Then the transition function becomes:
        dp[i][j] = max(dp[i][j-1], prices[j] + max_diff)
        max_diff = max(max_diff, dp[i-1][j-1] - prices[j])

        Time and space complexity:
        Time complexity: O(k*n), where k is the number of transactions and n is the number of days.
        Space complexity: O(k*n)

        Important considerations:
        1. If the number of transactions is too large, it's equivalent to unlimited transactions. In this case, we can use a greedy algorithm to solve the problem in O(n) time.
        2. The problem can be further optimized to O(n) space by using only two rows of the dp table.
        """