class Solution:
    def maxProfit(self, k: int, prices: list[int]) -> int:
        n = len(prices)
        if n == 0:
            return 0
        
        # If k >= n/2, we can perform unlimited transactions
        if k >= n // 2:
            return sum(max(prices[i + 1] - prices[i], 0) for i in range(n - 1))
        
        # DP table
        dp = [[0] * n for _ in range(k + 1)]
        
        for i in range(1, k + 1):
            maxDiff = -prices[0]  # max(dp[i-1][m] - prices[m]) for m < j
            for j in range(1, n):
                dp[i][j] = max(dp[i][j - 1], prices[j] + maxDiff)
                maxDiff = max(maxDiff, dp[i - 1][j] - prices[j])
        
        return dp[k][n - 1]