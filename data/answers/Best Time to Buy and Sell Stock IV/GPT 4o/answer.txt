class Solution:
    def maxProfit(self, k: int, prices: list[int]) -> int:
        n = len(prices)
        if n == 0 or k == 0:
            return 0
        
        # If k >= n // 2, it's equivalent to unlimited transactions
        if k >= n // 2:
            return sum(max(prices[i] - prices[i - 1], 0) for i in range(1, n))
        
        # DP table
        dp = [[0] * n for _ in range(k + 1)]
        
        for t in range(1, k + 1):
            maxDiff = -prices[0]
            for d in range(1, n):
                dp[t][d] = max(dp[t][d - 1], prices[d] + maxDiff)
                maxDiff = max(maxDiff, dp[t - 1][d - 1] - prices[d])
        
        return dp[k][n - 1]