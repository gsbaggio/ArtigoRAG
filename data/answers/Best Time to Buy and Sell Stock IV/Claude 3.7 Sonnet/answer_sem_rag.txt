def maxProfit(k, prices):
    if not prices or k == 0:
        return 0
    
    n = len(prices)
    
    # If k is large enough to cover all possible transactions
    if 2 * k >= n:
        # Just do as many transactions as possible (greedy approach)
        profit = 0
        for i in range(1, n):
            if prices[i] > prices[i-1]:
                profit += prices[i] - prices[i-1]
        return profit
    
    # dp[i][j] = max profit with at most i transactions up to day j
    dp = [[0 for _ in range(n)] for _ in range(k+1)]
    
    for i in range(1, k+1):
        # Initialize max_diff to be the negative of the first price
        max_diff = -prices[0]
        
        for j in range(1, n):
            # Either don't transact on day j, or sell on day j
            dp[i][j] = max(dp[i][j-1], prices[j] + max_diff)
            
            # Update max_diff to potentially use in future iterations
            # max_diff represents the max profit if we buy on day j
            max_diff = max(max_diff, dp[i-1][j] - prices[j])
    
    return dp[k][n-1]