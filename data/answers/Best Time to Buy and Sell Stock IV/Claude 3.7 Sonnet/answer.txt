class Solution:
    def maxProfit(self, k: int, prices: list[int]) -> int:
        if not prices or k == 0:
            return 0
            
        n = len(prices)
        
        # If k is large enough to cover all possible transactions
        # we can use a simpler approach (like unlimited transactions)
        if k >= n // 2:
            return self.maxProfitUnlimited(prices)
        
        # dp[i][j] represents the max profit with at most i transactions up to day j
        # Initialize a 2D array with zeros
        dp = [[0 for _ in range(n)] for _ in range(k+1)]
        
        for i in range(1, k+1):
            # Initialize maxDiff to be the negative of the first price
            # This helps to simplify the calculation in the inner loop
            maxDiff = -prices[0]
            
            for j in range(1, n):
                # Two options: don't trade on day j, or sell on day j
                dp[i][j] = max(dp[i][j-1], prices[j] + maxDiff)
                
                # Update maxDiff to potentially include a better buying option
                # maxDiff represents the max profit if we buy at prices[j]
                maxDiff = max(maxDiff, dp[i-1][j] - prices[j])
        
        return dp[k][n-1]
    
    def maxProfitUnlimited(self, prices: list[int]) -> int:
        profit = 0
        for i in range(1, len(prices)):
            if prices[i] > prices[i-1]:
                profit += prices[i] - prices[i-1]
        return profit