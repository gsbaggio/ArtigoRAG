class Solution:
    def maxProfit(self, k: int, prices: List[int]) -> int:
        if k == 0:
            return 0
        n = len(prices)
        if k >= n // 2:
            profit = 0
            for i in range(1, n):
                if prices[i] > prices[i-1]:
                    profit += prices[i] - prices[i-1]
            return profit
        
        NEG_INF = -10**9
        cash = [NEG_INF] * (k+1)
        hold = [NEG_INF] * (k+1)
        cash[0] = 0
        hold[0] = -prices[0]
        
        for i in range(1, n):
            new_cash = [NEG_INF] * (k+1)
            new_hold = [NEG_INF] * (k+1)
            for j in range(0, k+1):
                new_cash[j] = cash[j]
                if j >= 1:
                    candidate_cash = hold[j-1] + prices[i]
                    if candidate_cash > new_cash[j]:
                        new_cash[j] = candidate_cash
                
                new_hold[j] = hold[j]
                if j < k:
                    candidate_hold = cash[j] - prices[i]
                    if candidate_hold > new_hold[j]:
                        new_hold[j] = candidate_hold
            cash = new_cash
            hold = new_hold
        
        return max(cash)