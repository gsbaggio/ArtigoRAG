class Solution {
public:
    bool predictTheWinner(vector<int>& nums) {
        int n = nums.size();
        // dp[i][j] represents the maximum score difference (player1 - player2)
        // when considering the subarray nums[i...j]
        vector<vector<int>> dp(n, vector<int>(n, 0));
        
        // Base case: single element subarrays
        for (int i = 0; i < n; i++) {
            dp[i][i] = nums[i];
        }
        
        // Fill the dp table
        for (int len = 2; len <= n; len++) {
            for (int i = 0; i <= n - len; i++) {
                int j = i + len - 1;
                // Take the left element and subtract the opponent's best score
                int takeLeft = nums[i] - dp[i + 1][j];
                // Take the right element and subtract the opponent's best score
                int takeRight = nums[j] - dp[i][j - 1];
                // The optimal choice is the maximum of these two options
                dp[i][j] = max(takeLeft, takeRight);
            }
        }
        
        // If the score difference is non-negative, player 1 wins (or ties)
        return dp[0][n - 1] >= 0;
    }
};