class Solution {
public:
    bool predictTheWinner(vector<int>& nums) {
        int n = nums.size();
        // dp[i][j] represents the maximum score difference Player 1 can achieve
        // if the subarray nums[i...j] is considered
        vector<vector<int>> dp(n, vector<int>(n, 0));
        
        // Base case: when there's only one element, Player 1 takes it
        for (int i = 0; i < n; i++) {
            dp[i][i] = nums[i];
        }
        
        // Fill the DP table for subarrays of increasing lengths
        for (int len = 2; len <= n; len++) {
            for (int i = 0; i <= n - len; i++) {
                int j = i + len - 1;
                // Player 1 can choose nums[i] or nums[j]
                dp[i][j] = max(nums[i] - dp[i + 1][j], nums[j] - dp[i][j - 1]);
            }
        }
        
        // If Player 1's score difference >= 0, Player 1 can win or tie
        return dp[0][n - 1] >= 0;
    }
};