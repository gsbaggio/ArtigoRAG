class Solution {
public:
    bool predictTheWinner(vector<int>& nums) {
        int n = nums.size();
        vector<vector<int>> dp(n, vector<int>(n, 0));
        
        // Base case: single element subarrays
        for (int i = 0; i < n; ++i) {
            dp[i][i] = nums[i];
        }
        
        // Fill the dp table
        for (int len = 2; len <= n; ++len) { // len is the length of the subarray
            for (int i = 0; i <= n - len; ++i) {
                int j = i + len - 1;
                // Player 1 can choose either nums[i] or nums[j]
                dp[i][j] = max(nums[i] - dp[i + 1][j], nums[j] - dp[i][j - 1]);
            }
        }
        
        // If the score difference is non-negative, Player 1 can win or tie
        return dp[0][n - 1] >= 0;
    }
};