#include <vector>

class Solution {
public:
    bool predictTheWinner(std::vector<int>& nums) {
        int n = nums.size();
        
        // Create a 2D DP array to store the maximum score player 1 can achieve with a given subarray
        std::vector<std::vector<int>> dp(n, std::vector<int>(n));
        
        // Initialize the DP array with the base case where only one element is available
        for (int i = 0; i < n; ++i) {
            dp[i][i] = nums[i];
        }
        
        // Build the DP array bottom-up
        for (int len = 1; len < n; ++len) {
            for (int i = 0; i + len < n; ++i) {
                int j = i + len;
                dp[i][j] = std::max(nums[i] - dp[i+1][j], nums[j] - dp[i][j-1]);
            }
        }
        
        // Player 1 wins if the maximum score player 1 can achieve with the whole array is non-negative
        return dp[0][n-1] >= 0;
    }
};