class Solution:
    def maxScore(self, nums1, nums2, k):
        # Step 1: Pair nums1 and nums2 with their indices and sort by nums2 in descending order
        n = len(nums1)
        pairs = sorted(zip(nums1, nums2), key=lambda x: -x[1])
        
        # Step 2: Use a min-heap to maintain the top k elements from nums1
        import heapq
        min_heap = []
        current_sum = 0
        max_score = 0
        
        # Step 3: Iterate through the sorted pairs
        for num1, num2 in pairs:
            # Add the current num1 to the heap and update the sum
            heapq.heappush(min_heap, num1)
            current_sum += num1
            
            # If the heap size exceeds k, remove the smallest element
            if len(min_heap) > k:
                current_sum -= heapq.heappop(min_heap)
            
            # If the heap size is exactly k, calculate the score
            if len(min_heap) == k:
                max_score = max(max_score, current_sum * num2)
        
        return max_score