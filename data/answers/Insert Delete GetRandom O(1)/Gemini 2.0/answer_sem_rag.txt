class RandomizedSet:

    def __init__(self):
        """
        Initializes the RandomizedSet object.
        """
        self.data = []
        self.index_map = {}  # val -> index in data

    def insert(self, val: int) -> bool:
        """
        Inserts an item val into the set if not present.
        Returns true if the item was not present, false otherwise.
        """
        if val in self.index_map:
            return False
        
        self.data.append(val)
        self.index_map[val] = len(self.data) - 1
        return True

    def remove(self, val: int) -> bool:
        """
        Removes an item val from the set if present.
        Returns true if the item was present, false otherwise.
        """
        if val not in self.index_map:
            return False
        
        # Get the index of the value to be removed
        index_to_remove = self.index_map[val]
        
        # If the value is not the last element in the list,
        # swap it with the last element to make removal O(1)
        if index_to_remove < len(self.data) - 1:
            last_element = self.data[-1]
            self.data[index_to_remove] = last_element
            self.index_map[last_element] = index_to_remove

        # Remove the last element from the list
        self.data.pop()
        del self.index_map[val]
        
        return True

    def getRandom(self) -> int:
        """
        Returns a random element from the current set of elements.
        """
        import random
        return self.data[random.randint(0, len(self.data) - 1)]


# Explanation:
#
# Intuition:
# The key idea is to use a list (self.data) to store the elements and a dictionary (self.index_map)
# to store the index of each element in the list. This allows us to perform insert, remove, and getRandom
# operations in O(1) average time complexity.
#
# insert(val):
# - Check if the value is already present in the index_map. If yes, return False.
# - Append the value to the data list.
# - Add the value and its index to the index_map.
# - Return True.
#
# remove(val):
# - Check if the value is present in the index_map. If no, return False.
# - Get the index of the value to be removed.
# - If the value is not the last element in the list, swap it with the last element to make removal O(1).
# - Remove the last element from the list.
# - Remove the value from the index_map.
# - Return True.
#
# getRandom():
# - Generate a random index within the range of the data list.
# - Return the element at the random index.
#
# Time and Space Complexity:
# - Time Complexity:
#   - insert: O(1) on average
#   - remove: O(1) on average
#   - getRandom: O(1)
# - Space Complexity: O(N), where N is the number of elements in the RandomizedSet.
#
# Important Considerations:
# - The remove operation is optimized by swapping the element to be removed with the last element in the list.
#   This ensures that the removal operation takes O(1) time on average.
# - The getRandom operation uses the random.randint() function to generate a random index. This function has a
#   time complexity of O(1).