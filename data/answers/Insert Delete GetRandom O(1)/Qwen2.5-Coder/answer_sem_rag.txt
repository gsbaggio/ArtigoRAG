import random

class RandomizedSet:
    def __init__(self):
        # Initialize the data structures
        self.value_to_index = {}  # Hash map to store value to index mapping
        self.values = []          # List to store the values

    def insert(self, val: int) -> bool:
        # Insert the value if it is not already present
        if val in self.value_to_index:
            return False
        self.value_to_index[val] = len(self.values)
        self.values.append(val)
        return True

    def remove(self, val: int) -> bool:
        # Remove the value if it is present
        if val not in self.value_to_index:
            return False
        index_to_remove = self.value_to_index[val]
        last_value = self.values[-1]
        
        # Swap the value to be removed with the last value in the list
        self.values[index_to_remove], self.values[-1] = self.values[-1], self.values[index_to_remove]
        # Update the hash map with the new index of the last value
        self.value_to_index[last_value] = index_to_remove
        # Remove the last value from the list
        self.values.pop()
        # Delete the entry for the value from the hash map
        del self.value_to_index[val]
        return True

    def getRandom(self) -> int:
        # Return a random element from the list
        return random.choice(self.values)