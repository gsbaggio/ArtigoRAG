class Solution:
    def nthUglyNumber(self, n: int) -> int:
        """
        Finds the nth ugly number.

        An ugly number is a positive integer whose prime factors are limited to 2, 3, and 5.

        Args:
            n: The index of the ugly number to find.

        Returns:
            The nth ugly number.

        Time Complexity: O(n)
        Space Complexity: O(n)

        Intuition:
        The idea is to use dynamic programming. We maintain an array of ugly numbers, starting with 1.
        Then, we keep track of the next multiple of 2, 3, and 5 that could be an ugly number.
        We choose the smallest of these multiples as the next ugly number and update the corresponding pointer.
        This ensures that the ugly numbers are generated in increasing order.

        Important Considerations:
        - The array `ugly` stores the ugly numbers in increasing order.
        - The variables `i2`, `i3`, and `i5` are pointers to the next multiple of 2, 3, and 5, respectively.
        - We use `min` to find the smallest of the next multiples of 2, 3, and 5.
        - We update the pointers only when the corresponding multiple is equal to the current ugly number to avoid duplicates.
        """
        ugly = [1] * n
        i2, i3, i5 = 0, 0, 0
        next_multiple_of_2 = 2
        next_multiple_of_3 = 3
        next_multiple_of_5 = 5

        for i in range(1, n):
            ugly[i] = min(next_multiple_of_2, next_multiple_of_3, next_multiple_of_5)

            if ugly[i] == next_multiple_of_2:
                i2 += 1
                next_multiple_of_2 = ugly[i2] * 2

            if ugly[i] == next_multiple_of_3:
                i3 += 1
                next_multiple_of_3 = ugly[i3] * 3

            if ugly[i] == next_multiple_of_5:
                i5 += 1
                next_multiple_of_5 = ugly[i5] * 5

        return ugly[n - 1]