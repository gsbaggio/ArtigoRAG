class Solution:
    def containsNearbyDuplicate(self, nums, k):
        """
        Given an integer array nums and an integer k, return true if there are two distinct indices i and j in the array such that nums[i] == nums[j] and abs(i - j) <= k.

        Example 1:

        Input: nums = [1,2,3,1], k = 3
        Output: true
        Example 2:

        Input: nums = [1,0,1,1], k = 1
        Output: true
        Example 3:

        Input: nums = [1,2,3,1,2,3], k = 2
        Output: false

        Constraints:

        1 <= nums.length <= 105
        -109 <= nums[i] <= 109
        0 <= k <= 105
        """
        # Intuition:
        # We can use a hash map to store the most recent index of each number.
        # Then, for each number, we check if it exists in the hash map and if the distance between the current index and the index in the hash map is less than or equal to k.
        # If it is, we return true. Otherwise, we update the index of the number in the hash map.
        # If we reach the end of the array without finding such a pair, we return false.

        # Time complexity: O(n)
        # Space complexity: O(n)

        # Important considerations:
        # The hash map stores the most recent index of each number.
        # We only need to iterate through the array once.

        num_map = {}
        for i, num in enumerate(nums):
            if num in num_map and abs(i - num_map[num]) <= k:
                return True
            num_map[num] = i
        return False