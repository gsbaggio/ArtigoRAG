# Definition for a binary tree node.
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

class Solution:
    def pathSum(self, root: TreeNode, targetSum: int) -> list[list[int]]:
        result = []
        
        def dfs(node, current_sum, path):
            if not node:
                return
                
            # Add current node to path
            path.append(node.val)
            current_sum += node.val
            
            # Check if we're at a leaf node and the sum matches
            if not node.left and not node.right and current_sum == targetSum:
                result.append(path[:])  # Make a copy of the path
                
            # Continue DFS on left and right children
            dfs(node.left, current_sum, path)
            dfs(node.right, current_sum, path)
            
            # Backtrack - remove current node from path
            path.pop()
        
        dfs(root, 0, [])
        return result