# Definition for a binary tree node.
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

class Solution:
    def pathSum(self, root: TreeNode, targetSum: int) -> list[list[int]]:
        result = []

        def dfs(node, current_path, current_sum):
            if not node:
                return

            # Add the current node's value to the path and sum
            current_path.append(node.val)
            current_sum += node.val

            # If it's a leaf node and the sum equals targetSum, add the path to the result
            if not node.left and not node.right and current_sum == targetSum:
                result.append(list(current_path))  # Append a copy of the current path

            # Recursively traverse the left and right subtrees
            dfs(node.left, current_path, current_sum)
            dfs(node.right, current_path, current_sum)

            # Backtrack: remove the current node from the path
            current_path.pop()

        # Start Depth-First Search (DFS) from the root
        dfs(root, [], 0)
        
        return result