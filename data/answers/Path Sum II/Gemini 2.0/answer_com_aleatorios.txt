/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> pathSum(TreeNode* root, int targetSum) {
        vector<vector<int>> result;
        vector<int> currentPath;
        pathSumHelper(root, targetSum, currentPath, result);
        return result;
    }

private:
    void pathSumHelper(TreeNode* root, int targetSum, vector<int>& currentPath, vector<vector<int>>& result) {
        if (!root) {
            return;
        }

        currentPath.push_back(root->val);
        targetSum -= root->val;

        if (!root->left && !root->right) {
            if (targetSum == 0) {
                result.push_back(currentPath);
            }
        } else {
            pathSumHelper(root->left, targetSum, currentPath, result);
            pathSumHelper(root->right, targetSum, currentPath, result);
        }

        currentPath.pop_back(); // Backtrack
    }
};