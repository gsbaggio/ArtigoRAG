class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

class Solution:
    def pathSum(self, root: TreeNode, targetSum: int) -> list[list[int]]:
        if not root:
            return []
        result = []
        path = []
        stack = [(root, targetSum, 0)]
        while stack:
            node, remaining, depth = stack.pop()
            if depth < len(path):
                path[depth] = node.val
            else:
                path.append(node.val)
            new_remaining = remaining - node.val
            if node.left is None and node.right is None:
                if new_remaining == 0:
                    result.append(path[:depth+1])
            if node.right:
                stack.append((node.right, new_remaining, depth+1))
            if node.left:
                stack.append((node.left, new_remaining, depth+1))
        return result