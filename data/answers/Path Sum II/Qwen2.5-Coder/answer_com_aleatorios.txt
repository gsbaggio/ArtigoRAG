class Solution {
public:
    vector<vector<int>> pathSum(TreeNode* root, int targetSum) {
        vector<vector<int>> result;
        vector<int> currentPath;
        dfs(root, targetSum, 0, currentPath, result);
        return result;
    }

private:
    void dfs(TreeNode* node, int targetSum, int currentSum, vector<int>& currentPath, vector<vector<int>>& result) {
        if (!node) return; // Base case: if the node is null, return

        currentPath.push_back(node->val); // Add the current node's value to the path
        currentSum += node->val; // Update the current path sum

        // Check if it's a leaf node and the current path sum equals targetSum
        if (!node->left && !node->right && currentSum == targetSum) {
            result.push_back(currentPath); // Add the current path to the result
        }

        // Recur for the left and right subtrees
        dfs(node->left, targetSum, currentSum, currentPath, result);
        dfs(node->right, targetSum, currentSum, currentPath, result);

        currentPath.pop_back(); // Backtrack: remove the current node's value from the path
    }
};