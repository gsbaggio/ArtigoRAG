class Solution:
    def rob(self, nums: list[int]) -> int:
        """
        You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night.

        Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.

        Example 1:

        Input: nums = [1,2,3,1]
        Output: 4
        Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).
        Total amount you can rob = 1 + 3 = 4.
        Example 2:

        Input: nums = [2,7,9,3,1]
        Output: 12
        Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).
        Total amount you can rob = 2 + 9 + 1 = 12.

        Constraints:

        1 <= nums.length <= 100
        0 <= nums[i] <= 400
        """
        # Intuition:
        # We can use dynamic programming to solve this problem.
        # Let dp[i] be the maximum amount of money we can rob from the first i houses.
        # Then, dp[i] = max(dp[i-1], dp[i-2] + nums[i-1]).
        # dp[i-1] means we don't rob the i-th house, so the maximum amount of money we can rob is the same as the maximum amount of money we can rob from the first i-1 houses.
        # dp[i-2] + nums[i-1] means we rob the i-th house, so the maximum amount of money we can rob is the maximum amount of money we can rob from the first i-2 houses plus the amount of money in the i-th house.

        # Time complexity: O(n)
        # Space complexity: O(n)

        # Important considerations:
        # We can optimize the space complexity to O(1) by using two variables to store the previous two values of dp.

        n = len(nums)
        if n == 0:
            return 0
        if n == 1:
            return nums[0]

        dp = [0] * (n + 1)
        dp[0] = 0
        dp[1] = nums[0]

        for i in range(2, n + 1):
            dp[i] = max(dp[i - 1], dp[i - 2] + nums[i - 1])

        return dp[n]