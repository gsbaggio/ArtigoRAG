class Solution:
    def rob(self, nums):
        if not nums:
            return 0
        if len(nums) == 1:
            return nums[0]
        
        # We only need to keep track of two previous states
        # prev1 = max money up to previous house (i-1)
        # prev2 = max money up to two houses back (i-2)
        prev2 = 0
        prev1 = nums[0]
        
        # Start from the second house
        for i in range(1, len(nums)):
            # Current max is either:
            # 1. Rob current house + max money from houses up to i-2
            # 2. Skip current house + max money from houses up to i-1
            current = max(nums[i] + prev2, prev1)
            
            # Update our trackers for next iteration
            prev2 = prev1
            prev1 = current
            
        return prev1