CURRENT QUESTION:
You are given an integer num. You can swap two digits at most once to get the maximum valued number.

Return the maximum valued number you can get.

 

Example 1:

Input: num = 2736
Output: 7236
Explanation: Swap the number 2 and the number 7.
Example 2:

Input: num = 9973
Output: 9973
Explanation: No swap.
 

Constraints:

0 <= num <= 108

SIMILAR QUESTIONS:
Similar question 1 (Similarity score: 0.72):
Title: Largest Number
Categorys: Array String Greedy Sorting
Question text: Given a list of non-negative integers nums, arrange them such that they form the largest number and return it.

Since the result may be very large, so you need to return a string instead of an integer.

 

Example 1:

Input: nums = [10,2]
Output: "210"
Example 2:

Input: nums = [3,30,34,5,9]
Output: "9534330"
 

Constraints:

1 <= nums.length <= 100
0 <= nums[i] <= 109
Solution: class Solution {
public:
    string largestNumber(vector<int>& nums) {
        // Sort the numbers using Tim Sort
        timSort(nums);
        // Concatenate sorted numbers to form the largest number
        string largestNum;
        for (int num : nums) {
            largestNum += to_string(num);
        }
        // Handle the case where the largest number is zero
        return largestNum[0] == '0' ? "0" : largestNum;
    }

private:
    const int RUN = 32;

    void insertionSort(vector<int>& nums, int left, int right) {
        for (int i = left + 1; i <= right; ++i) {
            int temp = nums[i];
            int j = i - 1;
            while (j >= left && compare(temp, nums[j])) {
                nums[j + 1] = nums[j];
                --j;
            }
            nums[j + 1] = temp;
        }
    }

    void merge(vector<int>& nums, int left, int mid, int right) {
        vector<int> leftArr(nums.begin() + left, nums.begin() + mid + 1);
        vector<int> rightArr(nums.begin() + mid + 1, nums.begin() + right + 1);

        int i = 0, j = 0, k = left;
        while (i < leftArr.size() && j < rightArr.size()) {
            if (compare(leftArr[i], rightArr[j])) {
                nums[k++] = leftArr[i++];
            } else {
                nums[k++] = rightArr[j++];
            }
        }
        while (i < leftArr.size()) nums[k++] = leftArr[i++];
        while (j < rightArr.size()) nums[k++] = rightArr[j++];
    }

    void timSort(vector<int>& nums) {
        int n = nums.size();
        // Sort small runs with insertion sort
        for (int i = 0; i < n; i += RUN) {
            insertionSort(nums, i, min(i + RUN - 1, n - 1));
        }
        // Merge sorted runs
        for (int size = RUN; size < n; size = 2 * size) {
            for (int left = 0; left < n; left += 2 * size) {
                int mid = left + size - 1;
                int right = min(left + 2 * size - 1, n - 1);
                if (mid < right) {
                    merge(nums, left, mid, right);
                }
            }
        }
    }

    bool compare(int firstNum, int secondNum) {
        return to_string(firstNum) + to_string(secondNum) >
               to_string(secondNum) + to_string(firstNum);
    }
};
Explanation: Intuition
TimSort is a sorting algorithm that combines insertion sort and merge sort.

We start by dividing the list into small segments called runs. Each run is a segment of the list that is sorted independently using insertion sort. Insertion sort is well-suited for this task because it efficiently handles small or already partially sorted segments. For instance, in our example list [3, 30, 34, 5, 9], TimSort first breaks it into runs. Since the list is small, it might treat the entire list as a single run or split it into smaller manageable runs like [3, 30] and [34, 5, 9] [Usually runs are not this small but for the sake of this example lets say its 2].

Minrun is chosen from the range 32 to 64 inclusive, such that the size of the data, divided by minrun, is equal to, or slightly less than, a power of two.

Next, we merge these sorted runs into larger, sorted segments. During the merging phase, we use a custom comparison function to determine the order of numbers based on which concatenated result is larger.

After all runs are merged, we get a fully sorted list arranged to form the largest possible number. Finally, we check if the result starts with '0'. If it does, this indicates that all numbers are zeros, so we return "0".

Consider the list [3, 30, 34, 5, 9]. TimSort starts by sorting small runs like [3, 30] and [34, 5, 9] using insertion sort. It then merges these runs, comparing concatenated results to determine the correct order. For instance, it would compare "330" with "303" and place "3" before "30" because "330" is larger. The final merge step sorts the list to [9, 5, 34, 3, 30]. Concatenating these gives us the largest number, "9534330".

Timsort aims to optimize the merging process by ensuring that the number of runs is close to a power of two. Merging is most effective when the number of runs is equal to or just under a power of two, while it becomes less efficient when the number of runs exceeds a power of two. To achieve this, Timsort selects the value of RUN so that the total number of runs is close to a power of two.

RUN is chosen within the range of 32 to 64. It is set so that the total size of the data divided by RUN is either equal to or slightly less than a power of two. The method for determining RUN involves taking the six most significant bits of the array size, adding one if any of the remaining bits are set, and using this result for RUN. This approach accommodates all array sizes, including those smaller than 64. For arrays with 63 or fewer elements, RUN is set equal to the array size, effectively reducing Timsort to insertion sort for those smaller arrays.

Fun fact: Timsort is highly regarded for its efficiency and stability. It is more advanced compared to older algorithms like bubble sort or insertion sort. Invented by Tim Peters in 2002, it was named after him. Timsort is used in Python sort.

Algorithm
Sort the nums array using the custom timSort algorithm.

timSort function:

For each small run of size RUN (32 elements), call insertionSort to sort the subarrays.
After sorting small runs, iteratively merge them using the merge function until the entire array is sorted.
insertionSort function:

Iterate through the subarray from left + 1 to right.
For each element, store it in a temporary variable temp.
Compare temp with its previous elements (from right to left) using the compare function:
If the comparison returns true (i.e., temp should precede the compared element), shift the previous element to the right.
Insert temp in its correct position once all comparisons are done.
merge function:

Split the array into two subarrays: leftArr (from left to mid) and rightArr (from mid + 1 to right).
Merge the two subarrays back into the original array:
Compare the elements from both subarrays using the compare function.
Insert the smaller element into the original array and proceed until both subarrays are fully merged.
compare function:

Convert the two numbers firstNum and secondNum into strings.
Concatenate them in both possible orders and return true if the first concatenation results in a larger number.
Once nums is sorted, concatenate all elements in nums to form the largestNum string.

If the first character of largestNum is '0', return "0" to handle the case where all numbers are zero.

Otherwise, return largestNum as the final result.


        INSTRUCTIONS:
        Solve the current question.
        Provide:
        1. A complete and efficient code solution, optimized for both time and space complexity.
        2. A detailed explanation of the solution, including:
           - The intuition behind the approach;
           - Time and space complexity;
           - Important considerations about the algorithm.
        3. If the language has classes, implement in 'Solution' class. Any language is accepted.
        4. Use the similar questions as references to improve the solution, but only if they are relevant.
        5. Don't use any external libraries. Don't need to import any libraries.
